// Decompile from assembly: I18N.MidEast.dll

using System;

internal class <Module>
{
}

// Decompile from assembly: I18N.MidEast.dll

using System;

internal static class Consts
{
	public const string MonoVersion = "2.6.5.0";

	public const string MonoCompany = "MONO development team";

	public const string MonoProduct = "MONO Common language infrastructure";

	public const string MonoCopyright = "(c) various MONO Authors";

	public const string FxVersion = "2.0.5.0";

	public const string VsVersion = "9.0.0.0";

	public const string FxFileVersion = "3.0.40818.0";

	public const string VsFileVersion = "9.0.50727.42";

	public const string AssemblyI18N = "I18N, Version=2.0.5.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756";

	public const string AssemblyMicrosoft_VisualStudio = "Microsoft.VisualStudio, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblyMicrosoft_VisualStudio_Web = "Microsoft.VisualStudio.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblyMicrosoft_VSDesigner = "Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblyMono_Http = "Mono.Http, Version=2.0.5.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756";

	public const string AssemblyMono_Posix = "Mono.Posix, Version=2.0.5.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756";

	public const string AssemblyMono_Security = "Mono.Security, Version=2.0.5.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756";

	public const string AssemblyMono_Messaging_RabbitMQ = "Mono.Messaging.RabbitMQ, Version=2.0.5.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756";

	public const string AssemblyCorlib = "mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";

	public const string AssemblySystem = "System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";

	public const string AssemblySystem_Data = "System.Data, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";

	public const string AssemblySystem_Design = "System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_DirectoryServices = "System.DirectoryServices, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Drawing = "System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Drawing_Design = "System.Drawing.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Messaging = "System.Messaging, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Security = "System.Security, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_ServiceProcess = "System.ServiceProcess, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Web = "System.Web, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";

	public const string AssemblySystem_Windows_Forms = "System.Windows.Forms, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";

	public const string AssemblySystem_Core = "System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP1254 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'€',
			'\u0081',
			'‚',
			'ƒ',
			'„',
			'…',
			'†',
			'‡',
			'ˆ',
			'‰',
			'Š',
			'‹',
			'Œ',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'‘',
			'’',
			'“',
			'”',
			'•',
			'–',
			'—',
			'˜',
			'™',
			'š',
			'›',
			'œ',
			'\u009d',
			'\u009e',
			'Ÿ',
			'\u00a0',
			'¡',
			'¢',
			'£',
			'¤',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'ª',
			'«',
			'¬',
			'­',
			'®',
			'¯',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'·',
			'¸',
			'¹',
			'º',
			'»',
			'¼',
			'½',
			'¾',
			'¿',
			'À',
			'Á',
			'Â',
			'Ã',
			'Ä',
			'Å',
			'Æ',
			'Ç',
			'È',
			'É',
			'Ê',
			'Ë',
			'Ì',
			'Í',
			'Î',
			'Ï',
			'Ğ',
			'Ñ',
			'Ò',
			'Ó',
			'Ô',
			'Õ',
			'Ö',
			'×',
			'Ø',
			'Ù',
			'Ú',
			'Û',
			'Ü',
			'İ',
			'Ş',
			'ß',
			'à',
			'á',
			'â',
			'ã',
			'ä',
			'å',
			'æ',
			'ç',
			'è',
			'é',
			'ê',
			'ë',
			'ì',
			'í',
			'î',
			'ï',
			'ğ',
			'ñ',
			'ò',
			'ó',
			'ô',
			'õ',
			'ö',
			'÷',
			'ø',
			'ù',
			'ú',
			'û',
			'ü',
			'ı',
			'ş',
			'ÿ'
		};

		public CP1254() : base(1254, CP1254.ToChars, "Turkish (Windows)", "iso-8859-9", "windows-1254", "windows-1254", true, true, true, true, 1254)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 128)
				{
					int num4 = num3;
					switch (num4)
					{
					case 157:
					case 158:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 255:
						goto IL_43C;
					case 159:
					case 208:
					case 221:
					case 222:
					case 240:
					case 253:
					case 254:
					case 256:
					case 257:
					case 258:
					case 259:
					case 260:
					case 261:
					case 262:
					case 263:
					case 264:
					case 265:
					case 266:
					case 267:
					case 268:
					case 269:
					case 270:
					case 271:
					case 272:
					case 273:
					case 274:
					case 275:
					case 276:
					case 277:
					case 278:
					case 279:
					case 280:
					case 281:
					case 282:
					case 283:
					case 284:
					case 285:
					case 288:
					case 289:
					case 290:
					case 291:
					case 292:
					case 293:
					case 294:
					case 295:
					case 296:
					case 297:
					case 298:
					case 299:
					case 300:
					case 301:
					case 302:
					case 303:
					case 306:
					case 307:
					case 308:
					case 309:
					case 310:
					case 311:
					case 312:
					case 313:
					case 314:
					case 315:
					case 316:
					case 317:
					case 318:
					case 319:
					case 320:
					case 321:
					case 322:
					case 323:
					case 324:
					case 325:
					case 326:
					case 327:
					case 328:
					case 329:
					case 330:
					case 331:
					case 332:
					case 333:
					case 334:
					case 335:
					case 336:
					case 337:
					case 340:
					case 341:
					case 342:
					case 343:
					case 344:
					case 345:
					case 346:
					case 347:
					case 348:
					case 349:
						IL_345:
						switch (num4)
						{
						case 8211:
							num3 = 150;
							goto IL_5D0;
						case 8212:
							num3 = 151;
							goto IL_5D0;
						case 8213:
						case 8214:
						case 8215:
						case 8219:
						case 8223:
						case 8227:
						case 8228:
						case 8229:
							IL_3A2:
							switch (num4)
							{
							case 141:
							case 142:
							case 143:
							case 144:
								goto IL_43C;
							default:
								if (num4 == 8249)
								{
									num3 = 139;
									goto IL_5D0;
								}
								if (num4 == 8250)
								{
									num3 = 155;
									goto IL_5D0;
								}
								if (num4 == 129)
								{
									goto IL_43C;
								}
								if (num4 == 376)
								{
									num3 = 159;
									goto IL_5D0;
								}
								if (num4 == 402)
								{
									num3 = 131;
									goto IL_5D0;
								}
								if (num4 == 710)
								{
									num3 = 136;
									goto IL_5D0;
								}
								if (num4 == 732)
								{
									num3 = 152;
									goto IL_5D0;
								}
								if (num4 == 8240)
								{
									num3 = 137;
									goto IL_5D0;
								}
								if (num4 == 8364)
								{
									num3 = 128;
									goto IL_5D0;
								}
								if (num4 != 8482)
								{
									if (num3 >= 65281 && num3 <= 65374)
									{
										num3 -= 65248;
									}
									else
									{
										base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
									}
									goto IL_5D0;
								}
								num3 = 153;
								goto IL_5D0;
							}
							break;
						case 8216:
							num3 = 145;
							goto IL_5D0;
						case 8217:
							num3 = 146;
							goto IL_5D0;
						case 8218:
							num3 = 130;
							goto IL_5D0;
						case 8220:
							num3 = 147;
							goto IL_5D0;
						case 8221:
							num3 = 148;
							goto IL_5D0;
						case 8222:
							num3 = 132;
							goto IL_5D0;
						case 8224:
							num3 = 134;
							goto IL_5D0;
						case 8225:
							num3 = 135;
							goto IL_5D0;
						case 8226:
							num3 = 149;
							goto IL_5D0;
						case 8230:
							num3 = 133;
							goto IL_5D0;
						}
						goto IL_3A2;
					case 286:
						num3 = 208;
						goto IL_5D0;
					case 287:
						num3 = 240;
						goto IL_5D0;
					case 304:
						num3 = 221;
						goto IL_5D0;
					case 305:
						num3 = 253;
						goto IL_5D0;
					case 338:
						num3 = 140;
						goto IL_5D0;
					case 339:
						num3 = 156;
						goto IL_5D0;
					case 350:
						num3 = 222;
						goto IL_5D0;
					case 351:
						num3 = 254;
						goto IL_5D0;
					case 352:
						num3 = 138;
						goto IL_5D0;
					case 353:
						num3 = 154;
						goto IL_5D0;
					}
					goto IL_345;
					IL_43C:;
				}
				IL_5D0:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCwindows_1254 : CP1254
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP1255 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'€',
			'\u0081',
			'‚',
			'ƒ',
			'„',
			'…',
			'†',
			'‡',
			'ˆ',
			'‰',
			'\u008a',
			'‹',
			'\u008c',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'‘',
			'’',
			'“',
			'”',
			'•',
			'–',
			'—',
			'˜',
			'™',
			'\u009a',
			'›',
			'\u009c',
			'\u009d',
			'\u009e',
			'\u009f',
			'\u00a0',
			'¡',
			'¢',
			'£',
			'₪',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'×',
			'«',
			'¬',
			'­',
			'®',
			'¯',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'·',
			'¸',
			'¹',
			'÷',
			'»',
			'¼',
			'½',
			'¾',
			'¿',
			'ְ',
			'ֱ',
			'ֲ',
			'ֳ',
			'ִ',
			'ֵ',
			'ֶ',
			'ַ',
			'ָ',
			'ֹ',
			'?',
			'ֻ',
			'ּ',
			'ֽ',
			'־',
			'ֿ',
			'׀',
			'ׁ',
			'ׂ',
			'׃',
			'װ',
			'ױ',
			'ײ',
			'׳',
			'״',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'א',
			'ב',
			'ג',
			'ד',
			'ה',
			'ו',
			'ז',
			'ח',
			'ט',
			'י',
			'ך',
			'כ',
			'ל',
			'ם',
			'מ',
			'ן',
			'נ',
			'ס',
			'ע',
			'ף',
			'פ',
			'ץ',
			'צ',
			'ק',
			'ר',
			'ש',
			'ת',
			'?',
			'?',
			'‎',
			'‏',
			'?'
		};

		public CP1255() : base(1255, CP1255.ToChars, "Hebrew (Windows)", "windows-1255", "windows-1255", "windows-1255", true, true, true, true, 1255)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 128)
				{
					int num4 = num3;
					switch (num4)
					{
					case 138:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 154:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
						goto IL_385;
					case 139:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 155:
					case 164:
					case 170:
					case 186:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
						IL_169:
						switch (num4)
						{
						case 1456:
						case 1457:
						case 1458:
						case 1459:
						case 1460:
						case 1461:
						case 1462:
						case 1463:
						case 1464:
						case 1465:
							num3 -= 1264;
							goto IL_50B;
						case 1466:
						case 1476:
						case 1477:
						case 1478:
						case 1479:
						case 1480:
						case 1481:
						case 1482:
						case 1483:
						case 1484:
						case 1485:
						case 1486:
						case 1487:
						case 1515:
						case 1516:
						case 1517:
						case 1518:
						case 1519:
							IL_28A:
							switch (num4)
							{
							case 8206:
								num3 = 253;
								goto IL_50B;
							case 8207:
								num3 = 254;
								goto IL_50B;
							case 8208:
							case 8209:
							case 8210:
							case 8213:
							case 8214:
							case 8215:
							case 8219:
							case 8223:
							case 8227:
							case 8228:
							case 8229:
								IL_2FB:
								switch (num4)
								{
								case 8362:
									num3 = 164;
									goto IL_50B;
								case 8363:
									IL_314:
									if (num4 == 8249)
									{
										num3 = 139;
										goto IL_50B;
									}
									if (num4 == 8250)
									{
										num3 = 155;
										goto IL_50B;
									}
									if (num4 == 129)
									{
										goto IL_385;
									}
									if (num4 == 247)
									{
										num3 = 186;
										goto IL_50B;
									}
									if (num4 == 402)
									{
										num3 = 131;
										goto IL_50B;
									}
									if (num4 == 710)
									{
										num3 = 136;
										goto IL_50B;
									}
									if (num4 == 732)
									{
										num3 = 152;
										goto IL_50B;
									}
									if (num4 == 8240)
									{
										num3 = 137;
										goto IL_50B;
									}
									if (num4 != 8482)
									{
										if (num3 >= 65281 && num3 <= 65374)
										{
											num3 -= 65248;
										}
										else
										{
											base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
										}
										goto IL_50B;
									}
									num3 = 153;
									goto IL_50B;
								case 8364:
									num3 = 128;
									goto IL_50B;
								}
								goto IL_314;
							case 8211:
								num3 = 150;
								goto IL_50B;
							case 8212:
								num3 = 151;
								goto IL_50B;
							case 8216:
								num3 = 145;
								goto IL_50B;
							case 8217:
								num3 = 146;
								goto IL_50B;
							case 8218:
								num3 = 130;
								goto IL_50B;
							case 8220:
								num3 = 147;
								goto IL_50B;
							case 8221:
								num3 = 148;
								goto IL_50B;
							case 8222:
								num3 = 132;
								goto IL_50B;
							case 8224:
								num3 = 134;
								goto IL_50B;
							case 8225:
								num3 = 135;
								goto IL_50B;
							case 8226:
								num3 = 149;
								goto IL_50B;
							case 8230:
								num3 = 133;
								goto IL_50B;
							}
							goto IL_2FB;
						case 1467:
						case 1468:
						case 1469:
						case 1470:
						case 1471:
						case 1472:
						case 1473:
						case 1474:
						case 1475:
							num3 -= 1264;
							goto IL_50B;
						case 1488:
						case 1489:
						case 1490:
						case 1491:
						case 1492:
						case 1493:
						case 1494:
						case 1495:
						case 1496:
						case 1497:
						case 1498:
						case 1499:
						case 1500:
						case 1501:
						case 1502:
						case 1503:
						case 1504:
						case 1505:
						case 1506:
						case 1507:
						case 1508:
						case 1509:
						case 1510:
						case 1511:
						case 1512:
						case 1513:
						case 1514:
							num3 -= 1264;
							goto IL_50B;
						case 1520:
						case 1521:
						case 1522:
						case 1523:
						case 1524:
							num3 -= 1308;
							goto IL_50B;
						}
						goto IL_28A;
					case 215:
						num3 = 170;
						goto IL_50B;
					}
					goto IL_169;
					IL_385:;
				}
				IL_50B:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCwindows_1255 : CP1255
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP1256 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'€',
			'پ',
			'‚',
			'ƒ',
			'„',
			'…',
			'†',
			'‡',
			'ˆ',
			'‰',
			'ٹ',
			'‹',
			'Œ',
			'چ',
			'ژ',
			'ڈ',
			'گ',
			'‘',
			'’',
			'“',
			'”',
			'•',
			'–',
			'—',
			'ک',
			'™',
			'ڑ',
			'›',
			'œ',
			'‌',
			'‍',
			'ں',
			'\u00a0',
			'،',
			'¢',
			'£',
			'¤',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'ھ',
			'«',
			'¬',
			'­',
			'®',
			'¯',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'·',
			'¸',
			'¹',
			'؛',
			'»',
			'¼',
			'½',
			'¾',
			'؟',
			'ہ',
			'ء',
			'آ',
			'أ',
			'ؤ',
			'إ',
			'ئ',
			'ا',
			'ب',
			'ة',
			'ت',
			'ث',
			'ج',
			'ح',
			'خ',
			'د',
			'ذ',
			'ر',
			'ز',
			'س',
			'ش',
			'ص',
			'ض',
			'×',
			'ط',
			'ظ',
			'ع',
			'غ',
			'ـ',
			'ف',
			'ق',
			'ك',
			'à',
			'ل',
			'â',
			'م',
			'ن',
			'ه',
			'و',
			'ç',
			'è',
			'é',
			'ê',
			'ë',
			'ى',
			'ي',
			'î',
			'ï',
			'ً',
			'ٌ',
			'ٍ',
			'َ',
			'ô',
			'ُ',
			'ِ',
			'÷',
			'ّ',
			'ù',
			'ْ',
			'û',
			'ü',
			'‎',
			'‏',
			'ے'
		};

		public CP1256() : base(1256, CP1256.ToChars, "Arabic (Windows)", "windows-1256", "windows-1256", "windows-1256", true, true, true, true, 1256)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 128)
				{
					int num4 = num3;
					switch (num4)
					{
					case 65136:
						num3 = 240;
						goto IL_1117;
					case 65137:
						num3 = 240;
						goto IL_1117;
					case 65138:
						num3 = 241;
						goto IL_1117;
					case 65139:
					case 65141:
						IL_245:
						switch (num4)
						{
						case 1563:
							num3 = 186;
							goto IL_1117;
						case 1564:
						case 1565:
						case 1566:
						case 1568:
						case 1595:
						case 1596:
						case 1597:
						case 1598:
						case 1599:
						case 1619:
						case 1620:
						case 1621:
						case 1622:
						case 1623:
						case 1624:
						case 1625:
						case 1626:
						case 1627:
						case 1628:
						case 1629:
						case 1630:
						case 1631:
						case 1642:
						case 1645:
						case 1646:
						case 1647:
						case 1648:
						case 1649:
						case 1650:
						case 1651:
						case 1652:
						case 1653:
						case 1654:
						case 1655:
						case 1656:
						case 1658:
						case 1659:
						case 1660:
						case 1661:
						case 1663:
						case 1664:
						case 1665:
						case 1666:
						case 1667:
						case 1668:
						case 1669:
						case 1671:
						case 1673:
						case 1674:
						case 1675:
						case 1676:
						case 1677:
						case 1678:
						case 1679:
						case 1680:
						case 1682:
						case 1683:
						case 1684:
						case 1685:
						case 1686:
						case 1687:
							IL_44A:
							switch (num4)
							{
							case 160:
							case 162:
							case 163:
							case 164:
							case 165:
							case 166:
							case 167:
							case 168:
							case 169:
							case 171:
							case 172:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 178:
							case 179:
							case 180:
							case 181:
							case 182:
							case 183:
							case 184:
							case 185:
							case 187:
							case 188:
							case 189:
							case 190:
							case 215:
								goto IL_7F6;
							case 161:
							case 170:
							case 186:
							case 191:
							case 192:
							case 193:
							case 194:
							case 195:
							case 196:
							case 197:
							case 198:
							case 199:
							case 200:
							case 201:
							case 202:
							case 203:
							case 204:
							case 205:
							case 206:
							case 207:
							case 208:
							case 209:
							case 210:
							case 211:
							case 212:
							case 213:
							case 214:
								IL_537:
								switch (num4)
								{
								case 8204:
									num3 = 157;
									goto IL_1117;
								case 8205:
									num3 = 158;
									goto IL_1117;
								case 8206:
									num3 = 253;
									goto IL_1117;
								case 8207:
									num3 = 254;
									goto IL_1117;
								case 8208:
								case 8209:
								case 8210:
								case 8213:
								case 8214:
								case 8215:
								case 8219:
								case 8223:
								case 8227:
								case 8228:
								case 8229:
									IL_5B0:
									switch (num4)
									{
									case 231:
									case 232:
									case 233:
									case 234:
									case 235:
									case 238:
									case 239:
									case 244:
									case 247:
									case 249:
									case 251:
									case 252:
										goto IL_7F6;
									case 236:
									case 237:
									case 240:
									case 241:
									case 242:
									case 243:
									case 245:
									case 246:
									case 248:
									case 250:
										IL_615:
										switch (num4)
										{
										case 64392:
											num3 = 143;
											goto IL_1117;
										case 64393:
										case 64395:
										case 64397:
										case 64399:
										case 64401:
										case 64403:
											IL_656:
											switch (num4)
											{
											case 1776:
											case 1777:
											case 1778:
											case 1779:
											case 1780:
											case 1781:
											case 1782:
											case 1783:
											case 1784:
											case 1785:
												num3 -= 1728;
												goto IL_1117;
											default:
												switch (num4)
												{
												case 64422:
													num3 = 192;
													goto IL_1117;
												case 64423:
												case 64425:
												case 64427:
												case 64429:
													IL_6BC:
													switch (num4)
													{
													case 1726:
														num3 = 170;
														goto IL_1117;
													case 1727:
													case 1728:
														IL_6D9:
														switch (num4)
														{
														case 224:
														case 226:
															goto IL_7F6;
														case 225:
															IL_6F2:
															switch (num4)
															{
															case 64342:
																num3 = 129;
																goto IL_1117;
															case 64343:
																IL_70B:
																switch (num4)
																{
																case 64358:
																	num3 = 138;
																	goto IL_1117;
																case 64359:
																	IL_724:
																	switch (num4)
																	{
																	case 64378:
																		num3 = 141;
																		goto IL_1117;
																	case 64379:
																		IL_73D:
																		if (num4 == 338)
																		{
																			num3 = 140;
																			goto IL_1117;
																		}
																		if (num4 == 339)
																		{
																			num3 = 156;
																			goto IL_1117;
																		}
																		if (num4 == 8249)
																		{
																			num3 = 139;
																			goto IL_1117;
																		}
																		if (num4 == 8250)
																		{
																			num3 = 155;
																			goto IL_1117;
																		}
																		if (num4 == 402)
																		{
																			num3 = 131;
																			goto IL_1117;
																		}
																		if (num4 == 710)
																		{
																			num3 = 136;
																			goto IL_1117;
																		}
																		if (num4 == 1548)
																		{
																			num3 = 161;
																			goto IL_1117;
																		}
																		if (num4 == 1705)
																		{
																			num3 = 152;
																			goto IL_1117;
																		}
																		if (num4 == 1711)
																		{
																			num3 = 144;
																			goto IL_1117;
																		}
																		if (num4 == 1722)
																		{
																			num3 = 159;
																			goto IL_1117;
																		}
																		if (num4 == 1746)
																		{
																			num3 = 255;
																			goto IL_1117;
																		}
																		if (num4 == 8240)
																		{
																			num3 = 137;
																			goto IL_1117;
																		}
																		if (num4 == 8364)
																		{
																			num3 = 128;
																			goto IL_1117;
																		}
																		if (num4 == 8482)
																		{
																			num3 = 153;
																			goto IL_1117;
																		}
																		if (num4 != 64414)
																		{
																			if (num3 >= 65281 && num3 <= 65374)
																			{
																				num3 -= 65248;
																			}
																			else
																			{
																				base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
																			}
																			goto IL_1117;
																		}
																		num3 = 159;
																		goto IL_1117;
																	case 64380:
																		num3 = 141;
																		goto IL_1117;
																	}
																	goto IL_73D;
																case 64360:
																	num3 = 138;
																	goto IL_1117;
																}
																goto IL_724;
															case 64344:
																num3 = 129;
																goto IL_1117;
															}
															goto IL_70B;
														}
														goto IL_6F2;
													case 1729:
														num3 = 192;
														goto IL_1117;
													}
													goto IL_6D9;
												case 64424:
													num3 = 192;
													goto IL_1117;
												case 64426:
													num3 = 170;
													goto IL_1117;
												case 64428:
													num3 = 170;
													goto IL_1117;
												case 64430:
													num3 = 255;
													goto IL_1117;
												}
												goto IL_6BC;
											}
											break;
										case 64394:
											num3 = 142;
											goto IL_1117;
										case 64396:
											num3 = 154;
											goto IL_1117;
										case 64398:
											num3 = 152;
											goto IL_1117;
										case 64400:
											num3 = 152;
											goto IL_1117;
										case 64402:
											num3 = 144;
											goto IL_1117;
										case 64404:
											num3 = 144;
											goto IL_1117;
										}
										goto IL_656;
									}
									goto IL_615;
								case 8211:
									num3 = 150;
									goto IL_1117;
								case 8212:
									num3 = 151;
									goto IL_1117;
								case 8216:
									num3 = 145;
									goto IL_1117;
								case 8217:
									num3 = 146;
									goto IL_1117;
								case 8218:
									num3 = 130;
									goto IL_1117;
								case 8220:
									num3 = 147;
									goto IL_1117;
								case 8221:
									num3 = 148;
									goto IL_1117;
								case 8222:
									num3 = 132;
									goto IL_1117;
								case 8224:
									num3 = 134;
									goto IL_1117;
								case 8225:
									num3 = 135;
									goto IL_1117;
								case 8226:
									num3 = 149;
									goto IL_1117;
								case 8230:
									num3 = 133;
									goto IL_1117;
								}
								goto IL_5B0;
							}
							goto IL_537;
							IL_7F6:
							goto IL_1117;
						case 1567:
							num3 = 191;
							goto IL_1117;
						case 1569:
						case 1570:
						case 1571:
						case 1572:
						case 1573:
						case 1574:
						case 1575:
						case 1576:
						case 1577:
						case 1578:
						case 1579:
						case 1580:
						case 1581:
						case 1582:
						case 1583:
						case 1584:
						case 1585:
						case 1586:
						case 1587:
						case 1588:
						case 1589:
						case 1590:
							num3 -= 1376;
							goto IL_1117;
						case 1591:
						case 1592:
						case 1593:
						case 1594:
							num3 -= 1375;
							goto IL_1117;
						case 1600:
						case 1601:
						case 1602:
						case 1603:
							num3 -= 1380;
							goto IL_1117;
						case 1604:
							num3 = 225;
							goto IL_1117;
						case 1605:
						case 1606:
						case 1607:
						case 1608:
							num3 -= 1378;
							goto IL_1117;
						case 1609:
							num3 = 236;
							goto IL_1117;
						case 1610:
							num3 = 237;
							goto IL_1117;
						case 1611:
						case 1612:
						case 1613:
						case 1614:
							num3 -= 1371;
							goto IL_1117;
						case 1615:
							num3 = 245;
							goto IL_1117;
						case 1616:
							num3 = 246;
							goto IL_1117;
						case 1617:
							num3 = 248;
							goto IL_1117;
						case 1618:
							num3 = 250;
							goto IL_1117;
						case 1632:
						case 1633:
						case 1634:
						case 1635:
						case 1636:
						case 1637:
						case 1638:
						case 1639:
						case 1640:
						case 1641:
							num3 -= 1584;
							goto IL_1117;
						case 1643:
							num3 = 44;
							goto IL_1117;
						case 1644:
							num3 = 46;
							goto IL_1117;
						case 1657:
							num3 = 138;
							goto IL_1117;
						case 1662:
							num3 = 129;
							goto IL_1117;
						case 1670:
							num3 = 141;
							goto IL_1117;
						case 1672:
							num3 = 143;
							goto IL_1117;
						case 1681:
							num3 = 154;
							goto IL_1117;
						case 1688:
							num3 = 142;
							goto IL_1117;
						}
						goto IL_44A;
					case 65140:
						num3 = 242;
						goto IL_1117;
					case 65142:
						num3 = 243;
						goto IL_1117;
					case 65143:
						num3 = 243;
						goto IL_1117;
					case 65144:
						num3 = 245;
						goto IL_1117;
					case 65145:
						num3 = 245;
						goto IL_1117;
					case 65146:
						num3 = 246;
						goto IL_1117;
					case 65147:
						num3 = 246;
						goto IL_1117;
					case 65148:
						num3 = 248;
						goto IL_1117;
					case 65149:
						num3 = 248;
						goto IL_1117;
					case 65150:
						num3 = 250;
						goto IL_1117;
					case 65151:
						num3 = 250;
						goto IL_1117;
					case 65152:
						num3 = 193;
						goto IL_1117;
					case 65153:
						num3 = 194;
						goto IL_1117;
					case 65154:
						num3 = 194;
						goto IL_1117;
					case 65155:
						num3 = 195;
						goto IL_1117;
					case 65156:
						num3 = 195;
						goto IL_1117;
					case 65157:
						num3 = 196;
						goto IL_1117;
					case 65158:
						num3 = 196;
						goto IL_1117;
					case 65159:
						num3 = 197;
						goto IL_1117;
					case 65160:
						num3 = 197;
						goto IL_1117;
					case 65161:
						num3 = 198;
						goto IL_1117;
					case 65162:
						num3 = 198;
						goto IL_1117;
					case 65163:
						num3 = 198;
						goto IL_1117;
					case 65164:
						num3 = 198;
						goto IL_1117;
					case 65165:
						num3 = 199;
						goto IL_1117;
					case 65166:
						num3 = 199;
						goto IL_1117;
					case 65167:
						num3 = 200;
						goto IL_1117;
					case 65168:
						num3 = 200;
						goto IL_1117;
					case 65169:
						num3 = 200;
						goto IL_1117;
					case 65170:
						num3 = 200;
						goto IL_1117;
					case 65171:
						num3 = 201;
						goto IL_1117;
					case 65172:
						num3 = 201;
						goto IL_1117;
					case 65173:
						num3 = 202;
						goto IL_1117;
					case 65174:
						num3 = 202;
						goto IL_1117;
					case 65175:
						num3 = 202;
						goto IL_1117;
					case 65176:
						num3 = 202;
						goto IL_1117;
					case 65177:
						num3 = 203;
						goto IL_1117;
					case 65178:
						num3 = 203;
						goto IL_1117;
					case 65179:
						num3 = 203;
						goto IL_1117;
					case 65180:
						num3 = 203;
						goto IL_1117;
					case 65181:
						num3 = 204;
						goto IL_1117;
					case 65182:
						num3 = 204;
						goto IL_1117;
					case 65183:
						num3 = 204;
						goto IL_1117;
					case 65184:
						num3 = 204;
						goto IL_1117;
					case 65185:
						num3 = 205;
						goto IL_1117;
					case 65186:
						num3 = 205;
						goto IL_1117;
					case 65187:
						num3 = 205;
						goto IL_1117;
					case 65188:
						num3 = 205;
						goto IL_1117;
					case 65189:
						num3 = 206;
						goto IL_1117;
					case 65190:
						num3 = 206;
						goto IL_1117;
					case 65191:
						num3 = 206;
						goto IL_1117;
					case 65192:
						num3 = 206;
						goto IL_1117;
					case 65193:
						num3 = 207;
						goto IL_1117;
					case 65194:
						num3 = 207;
						goto IL_1117;
					case 65195:
						num3 = 208;
						goto IL_1117;
					case 65196:
						num3 = 208;
						goto IL_1117;
					case 65197:
						num3 = 209;
						goto IL_1117;
					case 65198:
						num3 = 209;
						goto IL_1117;
					case 65199:
						num3 = 210;
						goto IL_1117;
					case 65200:
						num3 = 210;
						goto IL_1117;
					case 65201:
						num3 = 211;
						goto IL_1117;
					case 65202:
						num3 = 211;
						goto IL_1117;
					case 65203:
						num3 = 211;
						goto IL_1117;
					case 65204:
						num3 = 211;
						goto IL_1117;
					case 65205:
						num3 = 212;
						goto IL_1117;
					case 65206:
						num3 = 212;
						goto IL_1117;
					case 65207:
						num3 = 212;
						goto IL_1117;
					case 65208:
						num3 = 212;
						goto IL_1117;
					case 65209:
						num3 = 213;
						goto IL_1117;
					case 65210:
						num3 = 213;
						goto IL_1117;
					case 65211:
						num3 = 213;
						goto IL_1117;
					case 65212:
						num3 = 213;
						goto IL_1117;
					case 65213:
						num3 = 214;
						goto IL_1117;
					case 65214:
						num3 = 214;
						goto IL_1117;
					case 65215:
						num3 = 214;
						goto IL_1117;
					case 65216:
						num3 = 214;
						goto IL_1117;
					case 65217:
						num3 = 216;
						goto IL_1117;
					case 65218:
						num3 = 216;
						goto IL_1117;
					case 65219:
						num3 = 216;
						goto IL_1117;
					case 65220:
						num3 = 216;
						goto IL_1117;
					case 65221:
						num3 = 217;
						goto IL_1117;
					case 65222:
						num3 = 217;
						goto IL_1117;
					case 65223:
						num3 = 217;
						goto IL_1117;
					case 65224:
						num3 = 217;
						goto IL_1117;
					case 65225:
						num3 = 218;
						goto IL_1117;
					case 65226:
						num3 = 218;
						goto IL_1117;
					case 65227:
						num3 = 218;
						goto IL_1117;
					case 65228:
						num3 = 218;
						goto IL_1117;
					case 65229:
						num3 = 219;
						goto IL_1117;
					case 65230:
						num3 = 219;
						goto IL_1117;
					case 65231:
						num3 = 219;
						goto IL_1117;
					case 65232:
						num3 = 219;
						goto IL_1117;
					case 65233:
						num3 = 221;
						goto IL_1117;
					case 65234:
						num3 = 221;
						goto IL_1117;
					case 65235:
						num3 = 221;
						goto IL_1117;
					case 65236:
						num3 = 221;
						goto IL_1117;
					case 65237:
						num3 = 222;
						goto IL_1117;
					case 65238:
						num3 = 222;
						goto IL_1117;
					case 65239:
						num3 = 222;
						goto IL_1117;
					case 65240:
						num3 = 222;
						goto IL_1117;
					case 65241:
						num3 = 223;
						goto IL_1117;
					case 65242:
						num3 = 223;
						goto IL_1117;
					case 65243:
						num3 = 223;
						goto IL_1117;
					case 65244:
						num3 = 223;
						goto IL_1117;
					case 65245:
						num3 = 225;
						goto IL_1117;
					case 65246:
						num3 = 225;
						goto IL_1117;
					case 65247:
						num3 = 225;
						goto IL_1117;
					case 65248:
						num3 = 225;
						goto IL_1117;
					case 65249:
						num3 = 227;
						goto IL_1117;
					case 65250:
						num3 = 227;
						goto IL_1117;
					case 65251:
						num3 = 227;
						goto IL_1117;
					case 65252:
						num3 = 227;
						goto IL_1117;
					case 65253:
						num3 = 228;
						goto IL_1117;
					case 65254:
						num3 = 228;
						goto IL_1117;
					case 65255:
						num3 = 228;
						goto IL_1117;
					case 65256:
						num3 = 228;
						goto IL_1117;
					case 65257:
						num3 = 229;
						goto IL_1117;
					case 65258:
						num3 = 229;
						goto IL_1117;
					case 65259:
						num3 = 229;
						goto IL_1117;
					case 65260:
						num3 = 229;
						goto IL_1117;
					case 65261:
						num3 = 230;
						goto IL_1117;
					case 65262:
						num3 = 230;
						goto IL_1117;
					case 65263:
						num3 = 236;
						goto IL_1117;
					case 65264:
						num3 = 236;
						goto IL_1117;
					case 65265:
						num3 = 237;
						goto IL_1117;
					case 65266:
						num3 = 237;
						goto IL_1117;
					case 65267:
						num3 = 237;
						goto IL_1117;
					case 65268:
						num3 = 237;
						goto IL_1117;
					}
					goto IL_245;
				}
				IL_1117:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCwindows_1256 : CP1256
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP28596 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'\u0080',
			'\u0081',
			'\u0082',
			'\u0083',
			'\u0084',
			'\u0085',
			'\u0086',
			'\u0087',
			'\u0088',
			'\u0089',
			'\u008a',
			'\u008b',
			'\u008c',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'\u0091',
			'\u0092',
			'\u0093',
			'\u0094',
			'\u0095',
			'\u0096',
			'\u0097',
			'\u0098',
			'\u0099',
			'\u009a',
			'\u009b',
			'\u009c',
			'\u009d',
			'\u009e',
			'\u009f',
			'\u00a0',
			'',
			'',
			'',
			'¤',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'،',
			'­',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'؛',
			'',
			'',
			'',
			'؟',
			'',
			'ء',
			'آ',
			'أ',
			'ؤ',
			'إ',
			'ئ',
			'ا',
			'ب',
			'ة',
			'ت',
			'ث',
			'ج',
			'ح',
			'خ',
			'د',
			'ذ',
			'ر',
			'ز',
			'س',
			'ش',
			'ص',
			'ض',
			'ط',
			'ظ',
			'ع',
			'غ',
			'',
			'',
			'',
			'',
			'',
			'ـ',
			'ف',
			'ق',
			'ك',
			'ل',
			'م',
			'ن',
			'ه',
			'و',
			'ى',
			'ي',
			'ً',
			'ٌ',
			'ٍ',
			'َ',
			'ُ',
			'ِ',
			'ّ',
			'ْ',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			''
		};

		public CP28596() : base(28596, CP28596.ToChars, "Arabic (ISO)", "iso-8859-6", "iso-8859-6", "iso-8859-6", true, true, true, true, 1256)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 161)
				{
					int num4 = num3;
					switch (num4)
					{
					case 161:
						num3 = 33;
						goto IL_15A5;
					case 162:
						num3 = 99;
						goto IL_15A5;
					case 163:
					case 167:
					case 168:
					case 172:
					case 175:
					case 176:
					case 177:
					case 180:
					case 181:
					case 182:
					case 188:
					case 189:
					case 190:
					case 191:
					case 215:
					case 222:
					case 223:
					case 240:
					case 247:
					case 254:
					case 306:
					case 307:
					case 312:
					case 319:
					case 320:
					case 329:
					case 330:
					case 331:
					case 383:
					case 385:
					case 386:
					case 387:
					case 388:
					case 389:
					case 390:
					case 391:
					case 392:
					case 394:
					case 395:
					case 396:
					case 397:
					case 398:
					case 399:
					case 400:
					case 403:
					case 404:
					case 405:
					case 406:
					case 408:
					case 409:
					case 411:
					case 412:
					case 413:
					case 414:
					case 418:
					case 419:
					case 420:
					case 421:
					case 422:
					case 423:
					case 424:
					case 425:
					case 426:
					case 428:
					case 429:
					case 433:
					case 434:
					case 435:
					case 436:
					case 437:
					case 439:
					case 440:
					case 441:
					case 442:
					case 443:
					case 444:
					case 445:
					case 446:
					case 447:
					case 448:
					case 449:
					case 450:
					case 451:
					case 452:
					case 453:
					case 454:
					case 455:
					case 456:
					case 457:
					case 458:
					case 459:
					case 460:
					case 477:
					case 480:
					case 481:
					case 482:
					case 483:
					case 494:
					case 495:
					case 497:
					case 498:
					case 499:
					case 500:
					case 501:
					case 502:
					case 503:
					case 504:
					case 505:
					case 506:
					case 507:
					case 508:
					case 509:
					case 510:
					case 511:
					case 512:
					case 513:
					case 514:
					case 515:
					case 516:
					case 517:
					case 518:
					case 519:
					case 520:
					case 521:
					case 522:
					case 523:
					case 524:
					case 525:
					case 526:
					case 527:
					case 528:
					case 529:
					case 530:
					case 531:
					case 532:
					case 533:
					case 534:
					case 535:
					case 536:
					case 537:
					case 538:
					case 539:
					case 540:
					case 541:
					case 542:
					case 543:
					case 544:
					case 545:
					case 546:
					case 547:
					case 548:
					case 549:
					case 550:
					case 551:
					case 552:
					case 553:
					case 554:
					case 555:
					case 556:
					case 557:
					case 558:
					case 559:
					case 560:
					case 561:
					case 562:
					case 563:
					case 564:
					case 565:
					case 566:
					case 567:
					case 568:
					case 569:
					case 570:
					case 571:
					case 572:
					case 573:
					case 574:
					case 575:
					case 576:
					case 577:
					case 578:
					case 579:
					case 580:
					case 581:
					case 582:
					case 583:
					case 584:
					case 585:
					case 586:
					case 587:
					case 588:
					case 589:
					case 590:
					case 591:
					case 592:
					case 593:
					case 594:
					case 595:
					case 596:
					case 597:
					case 598:
					case 599:
					case 600:
					case 601:
					case 602:
					case 603:
					case 604:
					case 605:
					case 606:
					case 607:
					case 608:
						IL_735:
						switch (num4)
						{
						case 65281:
						case 65282:
						case 65283:
						case 65284:
						case 65285:
						case 65286:
						case 65287:
						case 65288:
						case 65289:
						case 65290:
						case 65291:
						case 65292:
						case 65293:
						case 65294:
						case 65295:
						case 65296:
						case 65297:
						case 65298:
						case 65299:
						case 65300:
						case 65301:
						case 65302:
						case 65303:
						case 65304:
						case 65305:
						case 65306:
						case 65307:
						case 65308:
						case 65309:
						case 65310:
							num3 -= 65248;
							goto IL_15A5;
						case 65311:
							IL_8BA:
							switch (num4)
							{
							case 1548:
								num3 = 172;
								goto IL_15A5;
							case 1549:
							case 1550:
							case 1551:
							case 1552:
							case 1553:
							case 1554:
							case 1555:
							case 1556:
							case 1557:
							case 1558:
							case 1559:
							case 1560:
							case 1561:
							case 1562:
							case 1564:
							case 1565:
							case 1566:
							case 1568:
							case 1595:
							case 1596:
							case 1597:
							case 1598:
							case 1599:
								IL_9E3:
								switch (num4)
								{
								case 63432:
									num3 = 161;
									goto IL_15A5;
								case 63433:
									num3 = 162;
									goto IL_15A5;
								case 63434:
									num3 = 163;
									goto IL_15A5;
								case 63435:
								case 63436:
								case 63437:
								case 63438:
								case 63439:
								case 63440:
								case 63441:
									num3 -= 63270;
									goto IL_15A5;
								case 63442:
								case 63443:
								case 63444:
								case 63445:
								case 63446:
								case 63447:
								case 63448:
								case 63449:
								case 63450:
								case 63451:
								case 63452:
								case 63453:
								case 63454:
									num3 -= 63268;
									goto IL_15A5;
								case 63455:
									num3 = 188;
									goto IL_15A5;
								case 63456:
									num3 = 189;
									goto IL_15A5;
								case 63457:
									num3 = 190;
									goto IL_15A5;
								case 63458:
									num3 = 192;
									goto IL_15A5;
								case 63459:
								case 63460:
								case 63461:
								case 63462:
								case 63463:
									num3 -= 63240;
									goto IL_15A5;
								case 63464:
								case 63465:
								case 63466:
								case 63467:
								case 63468:
								case 63469:
								case 63470:
								case 63471:
								case 63472:
								case 63473:
								case 63474:
								case 63475:
								case 63476:
									num3 -= 63221;
									goto IL_15A5;
								default:
									switch (num4)
									{
									case 8208:
										num3 = 45;
										goto IL_15A5;
									case 8209:
										num3 = 45;
										goto IL_15A5;
									case 8210:
									case 8213:
									case 8214:
									case 8215:
									case 8219:
									case 8223:
									case 8224:
									case 8225:
									case 8227:
									case 8228:
									case 8229:
										IL_B0D:
										switch (num4)
										{
										case 708:
											num3 = 94;
											goto IL_15A5;
										case 709:
										case 711:
										case 713:
										case 714:
										case 716:
											IL_B42:
											switch (num4)
											{
											case 8192:
												num3 = 32;
												goto IL_15A5;
											case 8193:
												num3 = 32;
												goto IL_15A5;
											case 8194:
												num3 = 32;
												goto IL_15A5;
											case 8195:
												num3 = 32;
												goto IL_15A5;
											case 8196:
												num3 = 32;
												goto IL_15A5;
											case 8197:
												num3 = 32;
												goto IL_15A5;
											case 8198:
												num3 = 32;
												goto IL_15A5;
											default:
												switch (num4)
												{
												case 697:
													num3 = 39;
													goto IL_15A5;
												case 698:
													num3 = 34;
													goto IL_15A5;
												case 699:
													IL_B88:
													switch (num4)
													{
													case 768:
														num3 = 96;
														goto IL_15A5;
													case 769:
														IL_BA5:
														switch (num4)
														{
														case 8242:
															num3 = 39;
															goto IL_15A5;
														case 8243:
														case 8244:
															IL_BC2:
															if (num4 == 817)
															{
																num3 = 95;
																goto IL_15A5;
															}
															if (num4 == 818)
															{
																num3 = 95;
																goto IL_15A5;
															}
															if (num4 == 8249)
															{
																num3 = 60;
																goto IL_15A5;
															}
															if (num4 == 8250)
															{
																num3 = 62;
																goto IL_15A5;
															}
															if (num4 == 732)
															{
																num3 = 126;
																goto IL_15A5;
															}
															if (num4 == 782)
															{
																num3 = 34;
																goto IL_15A5;
															}
															if (num4 != 8482)
															{
																base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
																goto IL_15A5;
															}
															num3 = 84;
															goto IL_15A5;
														case 8245:
															num3 = 96;
															goto IL_15A5;
														}
														goto IL_BC2;
													case 770:
														num3 = 94;
														goto IL_15A5;
													case 771:
														num3 = 126;
														goto IL_15A5;
													}
													goto IL_BA5;
												case 700:
													num3 = 39;
													goto IL_15A5;
												}
												goto IL_B88;
											}
											break;
										case 710:
											num3 = 94;
											goto IL_15A5;
										case 712:
											num3 = 39;
											goto IL_15A5;
										case 715:
											num3 = 96;
											goto IL_15A5;
										case 717:
											num3 = 95;
											goto IL_15A5;
										}
										goto IL_B42;
									case 8211:
										num3 = 45;
										goto IL_15A5;
									case 8212:
										num3 = 45;
										goto IL_15A5;
									case 8216:
										num3 = 39;
										goto IL_15A5;
									case 8217:
										num3 = 39;
										goto IL_15A5;
									case 8218:
										num3 = 44;
										goto IL_15A5;
									case 8220:
										num3 = 34;
										goto IL_15A5;
									case 8221:
										num3 = 34;
										goto IL_15A5;
									case 8222:
										num3 = 34;
										goto IL_15A5;
									case 8226:
										num3 = 46;
										goto IL_15A5;
									case 8230:
										num3 = 46;
										goto IL_15A5;
									}
									goto IL_B0D;
								}
								break;
							case 1563:
								num3 = 187;
								goto IL_15A5;
							case 1567:
								num3 = 191;
								goto IL_15A5;
							case 1569:
							case 1570:
							case 1571:
							case 1572:
							case 1573:
							case 1574:
							case 1575:
							case 1576:
							case 1577:
							case 1578:
							case 1579:
							case 1580:
							case 1581:
							case 1582:
							case 1583:
							case 1584:
							case 1585:
							case 1586:
							case 1587:
							case 1588:
							case 1589:
							case 1590:
							case 1591:
							case 1592:
							case 1593:
							case 1594:
								num3 -= 1376;
								goto IL_15A5;
							case 1600:
							case 1601:
							case 1602:
							case 1603:
							case 1604:
							case 1605:
							case 1606:
							case 1607:
							case 1608:
							case 1609:
							case 1610:
							case 1611:
							case 1612:
							case 1613:
							case 1614:
							case 1615:
							case 1616:
							case 1617:
							case 1618:
								num3 -= 1376;
								goto IL_15A5;
							}
							goto IL_9E3;
						case 65312:
						case 65313:
						case 65314:
						case 65315:
						case 65316:
						case 65317:
						case 65318:
						case 65319:
						case 65320:
						case 65321:
						case 65322:
						case 65323:
						case 65324:
						case 65325:
						case 65326:
						case 65327:
						case 65328:
						case 65329:
						case 65330:
						case 65331:
						case 65332:
						case 65333:
						case 65334:
						case 65335:
						case 65336:
						case 65337:
						case 65338:
						case 65339:
						case 65340:
						case 65341:
						case 65342:
						case 65343:
						case 65344:
						case 65345:
						case 65346:
						case 65347:
						case 65348:
						case 65349:
						case 65350:
						case 65351:
						case 65352:
						case 65353:
						case 65354:
						case 65355:
						case 65356:
						case 65357:
						case 65358:
						case 65359:
						case 65360:
						case 65361:
						case 65362:
						case 65363:
						case 65364:
						case 65365:
						case 65366:
						case 65367:
						case 65368:
						case 65369:
						case 65370:
						case 65371:
						case 65372:
						case 65373:
						case 65374:
							num3 -= 65248;
							goto IL_15A5;
						}
						goto IL_8BA;
					case 164:
					case 173:
						goto IL_15A5;
					case 165:
						num3 = 89;
						goto IL_15A5;
					case 166:
						num3 = 124;
						goto IL_15A5;
					case 169:
						num3 = 67;
						goto IL_15A5;
					case 170:
						num3 = 97;
						goto IL_15A5;
					case 171:
						num3 = 60;
						goto IL_15A5;
					case 174:
						num3 = 82;
						goto IL_15A5;
					case 178:
						num3 = 50;
						goto IL_15A5;
					case 179:
						num3 = 51;
						goto IL_15A5;
					case 183:
						num3 = 46;
						goto IL_15A5;
					case 184:
						num3 = 44;
						goto IL_15A5;
					case 185:
						num3 = 49;
						goto IL_15A5;
					case 186:
						num3 = 111;
						goto IL_15A5;
					case 187:
						num3 = 62;
						goto IL_15A5;
					case 192:
						num3 = 65;
						goto IL_15A5;
					case 193:
						num3 = 65;
						goto IL_15A5;
					case 194:
						num3 = 65;
						goto IL_15A5;
					case 195:
						num3 = 65;
						goto IL_15A5;
					case 196:
						num3 = 65;
						goto IL_15A5;
					case 197:
						num3 = 65;
						goto IL_15A5;
					case 198:
						num3 = 65;
						goto IL_15A5;
					case 199:
						num3 = 67;
						goto IL_15A5;
					case 200:
						num3 = 69;
						goto IL_15A5;
					case 201:
						num3 = 69;
						goto IL_15A5;
					case 202:
						num3 = 69;
						goto IL_15A5;
					case 203:
						num3 = 69;
						goto IL_15A5;
					case 204:
						num3 = 73;
						goto IL_15A5;
					case 205:
						num3 = 73;
						goto IL_15A5;
					case 206:
						num3 = 73;
						goto IL_15A5;
					case 207:
						num3 = 73;
						goto IL_15A5;
					case 208:
						num3 = 68;
						goto IL_15A5;
					case 209:
						num3 = 78;
						goto IL_15A5;
					case 210:
						num3 = 79;
						goto IL_15A5;
					case 211:
						num3 = 79;
						goto IL_15A5;
					case 212:
						num3 = 79;
						goto IL_15A5;
					case 213:
						num3 = 79;
						goto IL_15A5;
					case 214:
						num3 = 79;
						goto IL_15A5;
					case 216:
						num3 = 79;
						goto IL_15A5;
					case 217:
						num3 = 85;
						goto IL_15A5;
					case 218:
						num3 = 85;
						goto IL_15A5;
					case 219:
						num3 = 85;
						goto IL_15A5;
					case 220:
						num3 = 85;
						goto IL_15A5;
					case 221:
						num3 = 89;
						goto IL_15A5;
					case 224:
						num3 = 97;
						goto IL_15A5;
					case 225:
						num3 = 97;
						goto IL_15A5;
					case 226:
						num3 = 97;
						goto IL_15A5;
					case 227:
						num3 = 97;
						goto IL_15A5;
					case 228:
						num3 = 97;
						goto IL_15A5;
					case 229:
						num3 = 97;
						goto IL_15A5;
					case 230:
						num3 = 97;
						goto IL_15A5;
					case 231:
						num3 = 99;
						goto IL_15A5;
					case 232:
						num3 = 101;
						goto IL_15A5;
					case 233:
						num3 = 101;
						goto IL_15A5;
					case 234:
						num3 = 101;
						goto IL_15A5;
					case 235:
						num3 = 101;
						goto IL_15A5;
					case 236:
						num3 = 105;
						goto IL_15A5;
					case 237:
						num3 = 105;
						goto IL_15A5;
					case 238:
						num3 = 105;
						goto IL_15A5;
					case 239:
						num3 = 105;
						goto IL_15A5;
					case 241:
						num3 = 110;
						goto IL_15A5;
					case 242:
						num3 = 111;
						goto IL_15A5;
					case 243:
						num3 = 111;
						goto IL_15A5;
					case 244:
						num3 = 111;
						goto IL_15A5;
					case 245:
						num3 = 111;
						goto IL_15A5;
					case 246:
						num3 = 111;
						goto IL_15A5;
					case 248:
						num3 = 111;
						goto IL_15A5;
					case 249:
						num3 = 117;
						goto IL_15A5;
					case 250:
						num3 = 117;
						goto IL_15A5;
					case 251:
						num3 = 117;
						goto IL_15A5;
					case 252:
						num3 = 117;
						goto IL_15A5;
					case 253:
						num3 = 121;
						goto IL_15A5;
					case 255:
						num3 = 121;
						goto IL_15A5;
					case 256:
						num3 = 65;
						goto IL_15A5;
					case 257:
						num3 = 97;
						goto IL_15A5;
					case 258:
						num3 = 65;
						goto IL_15A5;
					case 259:
						num3 = 97;
						goto IL_15A5;
					case 260:
						num3 = 65;
						goto IL_15A5;
					case 261:
						num3 = 97;
						goto IL_15A5;
					case 262:
						num3 = 67;
						goto IL_15A5;
					case 263:
						num3 = 99;
						goto IL_15A5;
					case 264:
						num3 = 67;
						goto IL_15A5;
					case 265:
						num3 = 99;
						goto IL_15A5;
					case 266:
						num3 = 67;
						goto IL_15A5;
					case 267:
						num3 = 99;
						goto IL_15A5;
					case 268:
						num3 = 67;
						goto IL_15A5;
					case 269:
						num3 = 99;
						goto IL_15A5;
					case 270:
						num3 = 68;
						goto IL_15A5;
					case 271:
						num3 = 100;
						goto IL_15A5;
					case 272:
						num3 = 68;
						goto IL_15A5;
					case 273:
						num3 = 100;
						goto IL_15A5;
					case 274:
						num3 = 69;
						goto IL_15A5;
					case 275:
						num3 = 101;
						goto IL_15A5;
					case 276:
						num3 = 69;
						goto IL_15A5;
					case 277:
						num3 = 101;
						goto IL_15A5;
					case 278:
						num3 = 69;
						goto IL_15A5;
					case 279:
						num3 = 101;
						goto IL_15A5;
					case 280:
						num3 = 69;
						goto IL_15A5;
					case 281:
						num3 = 101;
						goto IL_15A5;
					case 282:
						num3 = 69;
						goto IL_15A5;
					case 283:
						num3 = 101;
						goto IL_15A5;
					case 284:
						num3 = 71;
						goto IL_15A5;
					case 285:
						num3 = 103;
						goto IL_15A5;
					case 286:
						num3 = 71;
						goto IL_15A5;
					case 287:
						num3 = 103;
						goto IL_15A5;
					case 288:
						num3 = 71;
						goto IL_15A5;
					case 289:
						num3 = 103;
						goto IL_15A5;
					case 290:
						num3 = 71;
						goto IL_15A5;
					case 291:
						num3 = 103;
						goto IL_15A5;
					case 292:
						num3 = 72;
						goto IL_15A5;
					case 293:
						num3 = 104;
						goto IL_15A5;
					case 294:
						num3 = 72;
						goto IL_15A5;
					case 295:
						num3 = 104;
						goto IL_15A5;
					case 296:
						num3 = 73;
						goto IL_15A5;
					case 297:
						num3 = 105;
						goto IL_15A5;
					case 298:
						num3 = 73;
						goto IL_15A5;
					case 299:
						num3 = 105;
						goto IL_15A5;
					case 300:
						num3 = 73;
						goto IL_15A5;
					case 301:
						num3 = 105;
						goto IL_15A5;
					case 302:
						num3 = 73;
						goto IL_15A5;
					case 303:
						num3 = 105;
						goto IL_15A5;
					case 304:
						num3 = 73;
						goto IL_15A5;
					case 305:
						num3 = 105;
						goto IL_15A5;
					case 308:
						num3 = 74;
						goto IL_15A5;
					case 309:
						num3 = 106;
						goto IL_15A5;
					case 310:
						num3 = 75;
						goto IL_15A5;
					case 311:
						num3 = 107;
						goto IL_15A5;
					case 313:
						num3 = 76;
						goto IL_15A5;
					case 314:
						num3 = 108;
						goto IL_15A5;
					case 315:
						num3 = 76;
						goto IL_15A5;
					case 316:
						num3 = 108;
						goto IL_15A5;
					case 317:
						num3 = 76;
						goto IL_15A5;
					case 318:
						num3 = 108;
						goto IL_15A5;
					case 321:
						num3 = 76;
						goto IL_15A5;
					case 322:
						num3 = 108;
						goto IL_15A5;
					case 323:
						num3 = 78;
						goto IL_15A5;
					case 324:
						num3 = 110;
						goto IL_15A5;
					case 325:
						num3 = 78;
						goto IL_15A5;
					case 326:
						num3 = 110;
						goto IL_15A5;
					case 327:
						num3 = 78;
						goto IL_15A5;
					case 328:
						num3 = 110;
						goto IL_15A5;
					case 332:
						num3 = 79;
						goto IL_15A5;
					case 333:
						num3 = 111;
						goto IL_15A5;
					case 334:
						num3 = 79;
						goto IL_15A5;
					case 335:
						num3 = 111;
						goto IL_15A5;
					case 336:
						num3 = 79;
						goto IL_15A5;
					case 337:
						num3 = 111;
						goto IL_15A5;
					case 338:
						num3 = 79;
						goto IL_15A5;
					case 339:
						num3 = 111;
						goto IL_15A5;
					case 340:
						num3 = 82;
						goto IL_15A5;
					case 341:
						num3 = 114;
						goto IL_15A5;
					case 342:
						num3 = 82;
						goto IL_15A5;
					case 343:
						num3 = 114;
						goto IL_15A5;
					case 344:
						num3 = 82;
						goto IL_15A5;
					case 345:
						num3 = 114;
						goto IL_15A5;
					case 346:
						num3 = 83;
						goto IL_15A5;
					case 347:
						num3 = 115;
						goto IL_15A5;
					case 348:
						num3 = 83;
						goto IL_15A5;
					case 349:
						num3 = 115;
						goto IL_15A5;
					case 350:
						num3 = 83;
						goto IL_15A5;
					case 351:
						num3 = 115;
						goto IL_15A5;
					case 352:
						num3 = 83;
						goto IL_15A5;
					case 353:
						num3 = 115;
						goto IL_15A5;
					case 354:
						num3 = 84;
						goto IL_15A5;
					case 355:
						num3 = 116;
						goto IL_15A5;
					case 356:
						num3 = 84;
						goto IL_15A5;
					case 357:
						num3 = 116;
						goto IL_15A5;
					case 358:
						num3 = 84;
						goto IL_15A5;
					case 359:
						num3 = 116;
						goto IL_15A5;
					case 360:
						num3 = 85;
						goto IL_15A5;
					case 361:
						num3 = 117;
						goto IL_15A5;
					case 362:
						num3 = 85;
						goto IL_15A5;
					case 363:
						num3 = 117;
						goto IL_15A5;
					case 364:
						num3 = 85;
						goto IL_15A5;
					case 365:
						num3 = 117;
						goto IL_15A5;
					case 366:
						num3 = 85;
						goto IL_15A5;
					case 367:
						num3 = 117;
						goto IL_15A5;
					case 368:
						num3 = 85;
						goto IL_15A5;
					case 369:
						num3 = 117;
						goto IL_15A5;
					case 370:
						num3 = 85;
						goto IL_15A5;
					case 371:
						num3 = 117;
						goto IL_15A5;
					case 372:
						num3 = 87;
						goto IL_15A5;
					case 373:
						num3 = 119;
						goto IL_15A5;
					case 374:
						num3 = 89;
						goto IL_15A5;
					case 375:
						num3 = 121;
						goto IL_15A5;
					case 376:
						num3 = 89;
						goto IL_15A5;
					case 377:
						num3 = 90;
						goto IL_15A5;
					case 378:
						num3 = 122;
						goto IL_15A5;
					case 379:
						num3 = 90;
						goto IL_15A5;
					case 380:
						num3 = 122;
						goto IL_15A5;
					case 381:
						num3 = 90;
						goto IL_15A5;
					case 382:
						num3 = 122;
						goto IL_15A5;
					case 384:
						num3 = 98;
						goto IL_15A5;
					case 393:
						num3 = 68;
						goto IL_15A5;
					case 401:
						num3 = 70;
						goto IL_15A5;
					case 402:
						num3 = 102;
						goto IL_15A5;
					case 407:
						num3 = 73;
						goto IL_15A5;
					case 410:
						num3 = 108;
						goto IL_15A5;
					case 415:
						num3 = 79;
						goto IL_15A5;
					case 416:
						num3 = 79;
						goto IL_15A5;
					case 417:
						num3 = 111;
						goto IL_15A5;
					case 427:
						num3 = 116;
						goto IL_15A5;
					case 430:
						num3 = 84;
						goto IL_15A5;
					case 431:
						num3 = 85;
						goto IL_15A5;
					case 432:
						num3 = 117;
						goto IL_15A5;
					case 438:
						num3 = 122;
						goto IL_15A5;
					case 461:
						num3 = 65;
						goto IL_15A5;
					case 462:
						num3 = 97;
						goto IL_15A5;
					case 463:
						num3 = 73;
						goto IL_15A5;
					case 464:
						num3 = 105;
						goto IL_15A5;
					case 465:
						num3 = 79;
						goto IL_15A5;
					case 466:
						num3 = 111;
						goto IL_15A5;
					case 467:
						num3 = 85;
						goto IL_15A5;
					case 468:
						num3 = 117;
						goto IL_15A5;
					case 469:
						num3 = 85;
						goto IL_15A5;
					case 470:
						num3 = 117;
						goto IL_15A5;
					case 471:
						num3 = 85;
						goto IL_15A5;
					case 472:
						num3 = 117;
						goto IL_15A5;
					case 473:
						num3 = 85;
						goto IL_15A5;
					case 474:
						num3 = 117;
						goto IL_15A5;
					case 475:
						num3 = 85;
						goto IL_15A5;
					case 476:
						num3 = 117;
						goto IL_15A5;
					case 478:
						num3 = 65;
						goto IL_15A5;
					case 479:
						num3 = 97;
						goto IL_15A5;
					case 484:
						num3 = 71;
						goto IL_15A5;
					case 485:
						num3 = 103;
						goto IL_15A5;
					case 486:
						num3 = 71;
						goto IL_15A5;
					case 487:
						num3 = 103;
						goto IL_15A5;
					case 488:
						num3 = 75;
						goto IL_15A5;
					case 489:
						num3 = 107;
						goto IL_15A5;
					case 490:
						num3 = 79;
						goto IL_15A5;
					case 491:
						num3 = 111;
						goto IL_15A5;
					case 492:
						num3 = 79;
						goto IL_15A5;
					case 493:
						num3 = 111;
						goto IL_15A5;
					case 496:
						num3 = 106;
						goto IL_15A5;
					case 609:
						num3 = 103;
						goto IL_15A5;
					}
					goto IL_735;
				}
				IL_15A5:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCiso_8859_6 : CP28596
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP28598 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'\u0080',
			'\u0081',
			'\u0082',
			'\u0083',
			'\u0084',
			'\u0085',
			'\u0086',
			'\u0087',
			'\u0088',
			'\u0089',
			'\u008a',
			'\u008b',
			'\u008c',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'\u0091',
			'\u0092',
			'\u0093',
			'\u0094',
			'\u0095',
			'\u0096',
			'\u0097',
			'\u0098',
			'\u0099',
			'\u009a',
			'\u009b',
			'\u009c',
			'\u009d',
			'\u009e',
			'\u009f',
			'\u00a0',
			'?',
			'¢',
			'£',
			'¤',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'×',
			'«',
			'¬',
			'­',
			'®',
			'‾',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'•',
			'¸',
			'¹',
			'÷',
			'»',
			'¼',
			'½',
			'¾',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'‗',
			'א',
			'ב',
			'ג',
			'ד',
			'ה',
			'ו',
			'ז',
			'ח',
			'ט',
			'י',
			'ך',
			'כ',
			'ל',
			'ם',
			'מ',
			'ן',
			'נ',
			'ס',
			'ע',
			'ף',
			'פ',
			'ץ',
			'צ',
			'ק',
			'ר',
			'ש',
			'ת',
			'?',
			'?',
			'?',
			'?',
			'?'
		};

		public CP28598() : base(28598, CP28598.ToChars, "Hebrew (ISO)", "iso-8859-8", "iso-8859-8", "iso-8859-8", true, true, true, true, 1255)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 161)
				{
					int num4 = num3;
					switch (num4)
					{
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 171:
					case 172:
					case 173:
					case 174:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 184:
					case 185:
					case 187:
					case 188:
					case 189:
					case 190:
						goto IL_1E2;
					case 170:
					case 175:
					case 183:
					case 186:
						IL_A5:
						switch (num4)
						{
						case 1488:
						case 1489:
						case 1490:
						case 1491:
						case 1492:
						case 1493:
						case 1494:
						case 1495:
						case 1496:
						case 1497:
						case 1498:
						case 1499:
						case 1500:
						case 1501:
						case 1502:
						case 1503:
						case 1504:
						case 1505:
						case 1506:
						case 1507:
						case 1508:
						case 1509:
						case 1510:
						case 1511:
						case 1512:
						case 1513:
						case 1514:
							num3 -= 1264;
							goto IL_1E2;
						default:
							if (num4 == 215)
							{
								num3 = 170;
								goto IL_1E2;
							}
							if (num4 == 247)
							{
								num3 = 186;
								goto IL_1E2;
							}
							if (num4 == 8215)
							{
								num3 = 223;
								goto IL_1E2;
							}
							if (num4 == 8226)
							{
								num3 = 183;
								goto IL_1E2;
							}
							if (num4 != 8254)
							{
								if (num3 >= 65281 && num3 <= 65374)
								{
									num3 -= 65248;
								}
								else
								{
									base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
								}
								goto IL_1E2;
							}
							num3 = 175;
							goto IL_1E2;
						}
						break;
					}
					goto IL_A5;
				}
				IL_1E2:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCiso_8859_8 : CP28598
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP28599 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'\u0080',
			'\u0081',
			'\u0082',
			'\u0083',
			'\u0084',
			'\u0085',
			'\u0086',
			'\u0087',
			'\u0088',
			'\u0089',
			'\u008a',
			'\u008b',
			'\u008c',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'\u0091',
			'\u0092',
			'\u0093',
			'\u0094',
			'\u0095',
			'\u0096',
			'\u0097',
			'\u0098',
			'\u0099',
			'\u009a',
			'\u009b',
			'\u009c',
			'\u009d',
			'\u009e',
			'\u009f',
			'\u00a0',
			'¡',
			'¢',
			'£',
			'¤',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'ª',
			'«',
			'¬',
			'­',
			'®',
			'¯',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'·',
			'¸',
			'¹',
			'º',
			'»',
			'¼',
			'½',
			'¾',
			'¿',
			'À',
			'Á',
			'Â',
			'Ã',
			'Ä',
			'Å',
			'Æ',
			'Ç',
			'È',
			'É',
			'Ê',
			'Ë',
			'Ì',
			'Í',
			'Î',
			'Ï',
			'Ğ',
			'Ñ',
			'Ò',
			'Ó',
			'Ô',
			'Õ',
			'Ö',
			'×',
			'Ø',
			'Ù',
			'Ú',
			'Û',
			'Ü',
			'İ',
			'Ş',
			'ß',
			'à',
			'á',
			'â',
			'ã',
			'ä',
			'å',
			'æ',
			'ç',
			'è',
			'é',
			'ê',
			'ë',
			'ì',
			'í',
			'î',
			'ï',
			'ğ',
			'ñ',
			'ò',
			'ó',
			'ô',
			'õ',
			'ö',
			'÷',
			'ø',
			'ù',
			'ú',
			'û',
			'ü',
			'ı',
			'ş',
			'ÿ'
		};

		public CP28599() : base(28599, CP28599.ToChars, "Latin 5 (ISO)", "iso-8859-9", "iso-8859-9", "iso-8859-9", true, true, true, true, 1254)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 208)
				{
					int num4 = num3;
					switch (num4)
					{
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 255:
						goto IL_23A;
					case 221:
					case 222:
					case 240:
					case 253:
					case 254:
					case 256:
					case 257:
					case 258:
					case 259:
					case 260:
					case 261:
					case 262:
					case 263:
					case 264:
					case 265:
					case 266:
					case 267:
					case 268:
					case 269:
					case 270:
					case 271:
					case 272:
					case 273:
					case 274:
					case 275:
					case 276:
					case 277:
					case 278:
					case 279:
					case 280:
					case 281:
					case 282:
					case 283:
					case 284:
					case 285:
						IL_16D:
						if (num4 == 304)
						{
							num3 = 221;
							goto IL_23A;
						}
						if (num4 == 305)
						{
							num3 = 253;
							goto IL_23A;
						}
						if (num4 == 350)
						{
							num3 = 222;
							goto IL_23A;
						}
						if (num4 == 351)
						{
							num3 = 254;
							goto IL_23A;
						}
						if (num4 != 8254)
						{
							if (num3 >= 65281 && num3 <= 65374)
							{
								num3 -= 65248;
							}
							else
							{
								base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
							}
							goto IL_23A;
						}
						num3 = 175;
						goto IL_23A;
					case 286:
						num3 = 208;
						goto IL_23A;
					case 287:
						num3 = 240;
						goto IL_23A;
					}
					goto IL_16D;
				}
				IL_23A:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCiso_8859_9 : CP28599
	{
	}
}

// Decompile from assembly: I18N.MidEast.dll

using I18N.Common;
using System;
using System.Text;

namespace I18N.MidEast
{
	[Serializable]
	public class CP38598 : ByteEncoding
	{
		private static readonly char[] ToChars = new char[]
		{
			'\0',
			'\u0001',
			'\u0002',
			'\u0003',
			'\u0004',
			'\u0005',
			'\u0006',
			'\a',
			'\b',
			'\t',
			'\n',
			'\v',
			'\f',
			'\r',
			'\u000e',
			'\u000f',
			'\u0010',
			'\u0011',
			'\u0012',
			'\u0013',
			'\u0014',
			'\u0015',
			'\u0016',
			'\u0017',
			'\u0018',
			'\u0019',
			'\u001a',
			'\u001b',
			'\u001c',
			'\u001d',
			'\u001e',
			'\u001f',
			' ',
			'!',
			'"',
			'#',
			'$',
			'%',
			'&',
			'\'',
			'(',
			')',
			'*',
			'+',
			',',
			'-',
			'.',
			'/',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			':',
			';',
			'<',
			'=',
			'>',
			'?',
			'@',
			'A',
			'B',
			'C',
			'D',
			'E',
			'F',
			'G',
			'H',
			'I',
			'J',
			'K',
			'L',
			'M',
			'N',
			'O',
			'P',
			'Q',
			'R',
			'S',
			'T',
			'U',
			'V',
			'W',
			'X',
			'Y',
			'Z',
			'[',
			'\\',
			']',
			'^',
			'_',
			'`',
			'a',
			'b',
			'c',
			'd',
			'e',
			'f',
			'g',
			'h',
			'i',
			'j',
			'k',
			'l',
			'm',
			'n',
			'o',
			'p',
			'q',
			'r',
			's',
			't',
			'u',
			'v',
			'w',
			'x',
			'y',
			'z',
			'{',
			'|',
			'}',
			'~',
			'\u007f',
			'\u0080',
			'\u0081',
			'\u0082',
			'\u0083',
			'\u0084',
			'\u0085',
			'\u0086',
			'\u0087',
			'\u0088',
			'\u0089',
			'\u008a',
			'\u008b',
			'\u008c',
			'\u008d',
			'\u008e',
			'\u008f',
			'\u0090',
			'\u0091',
			'\u0092',
			'\u0093',
			'\u0094',
			'\u0095',
			'\u0096',
			'\u0097',
			'\u0098',
			'\u0099',
			'\u009a',
			'\u009b',
			'\u009c',
			'\u009d',
			'\u009e',
			'\u009f',
			'\u00a0',
			'?',
			'¢',
			'£',
			'¤',
			'¥',
			'¦',
			'§',
			'¨',
			'©',
			'×',
			'«',
			'¬',
			'­',
			'®',
			'‾',
			'°',
			'±',
			'²',
			'³',
			'´',
			'µ',
			'¶',
			'•',
			'¸',
			'¹',
			'÷',
			'»',
			'¼',
			'½',
			'¾',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'?',
			'‗',
			'א',
			'ב',
			'ג',
			'ד',
			'ה',
			'ו',
			'ז',
			'ח',
			'ט',
			'י',
			'ך',
			'כ',
			'ל',
			'ם',
			'מ',
			'ן',
			'נ',
			'ס',
			'ע',
			'ף',
			'פ',
			'ץ',
			'צ',
			'ק',
			'ר',
			'ש',
			'ת',
			'?',
			'?',
			'?',
			'?',
			'?'
		};

		public CP38598() : base(38598, CP38598.ToChars, "Hebrew (ISO Alternative)", "iso-8859-8", "windows-38598", "windows-38598", true, true, true, true, 1255)
		{
		}

		protected unsafe override void ToBytes(char* chars, int charCount, byte* bytes, int byteCount)
		{
			int num = 0;
			int num2 = 0;
			EncoderFallbackBuffer encoderFallbackBuffer = null;
			while (charCount > 0)
			{
				int num3 = (int)chars[num++];
				if (num3 >= 161)
				{
					int num4 = num3;
					switch (num4)
					{
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 171:
					case 172:
					case 173:
					case 174:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 184:
					case 185:
					case 187:
					case 188:
					case 189:
					case 190:
						goto IL_1E2;
					case 170:
					case 175:
					case 183:
					case 186:
						IL_A5:
						switch (num4)
						{
						case 1488:
						case 1489:
						case 1490:
						case 1491:
						case 1492:
						case 1493:
						case 1494:
						case 1495:
						case 1496:
						case 1497:
						case 1498:
						case 1499:
						case 1500:
						case 1501:
						case 1502:
						case 1503:
						case 1504:
						case 1505:
						case 1506:
						case 1507:
						case 1508:
						case 1509:
						case 1510:
						case 1511:
						case 1512:
						case 1513:
						case 1514:
							num3 -= 1264;
							goto IL_1E2;
						default:
							if (num4 == 215)
							{
								num3 = 170;
								goto IL_1E2;
							}
							if (num4 == 247)
							{
								num3 = 186;
								goto IL_1E2;
							}
							if (num4 == 8215)
							{
								num3 = 223;
								goto IL_1E2;
							}
							if (num4 == 8226)
							{
								num3 = 183;
								goto IL_1E2;
							}
							if (num4 != 8254)
							{
								if (num3 >= 65281 && num3 <= 65374)
								{
									num3 -= 65248;
								}
								else
								{
									base.HandleFallback(ref encoderFallbackBuffer, chars, ref num, ref charCount, bytes, ref num2, ref byteCount);
								}
								goto IL_1E2;
							}
							num3 = 175;
							goto IL_1E2;
						}
						break;
					}
					goto IL_A5;
				}
				IL_1E2:
				bytes[num2++] = (byte)num3;
				charCount--;
				byteCount--;
			}
		}
	}
}

// Decompile from assembly: I18N.MidEast.dll

using System;

namespace I18N.MidEast
{
	[Serializable]
	public class ENCwindows_38598 : CP38598
	{
	}
}

