// Decompile from assembly: GameAnalytics.dll

using System;

internal class <Module>
{
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace Foundation.Tasks
{
	public enum TaskStatus
	{
		Pending,
		Faulted,
		Success
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace Foundation.Tasks
{
	public enum TaskStrategy
	{
		BackgroundThread,
		MainThread,
		CurrentThread,
		Coroutine,
		Custom
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using UnityEngine;

namespace Foundation.Tasks
{
	public class AsyncTask : CustomYieldInstruction, IDisposable
	{
		public static bool DisableMultiThread;

		public static bool LogErrors;

		public TaskStrategy Strategy;

		protected TaskStatus _status;

		protected Action _action;

		protected IEnumerator _routine;

		private List<Delegate> _completeList;

		private static AsyncTask _successTask;

		public Exception Exception
		{
			get;
			set;
		}

		public TaskStatus Status
		{
			get;
			set;
		}

		public override bool keepWaiting
		{
			get
			{
				return !this.IsCompleted;
			}
		}

		public bool IsRunning
		{
			get
			{
				return this.Status == TaskStatus.Pending;
			}
		}

		public bool IsCompleted
		{
			get
			{
				return (this.Status == TaskStatus.Success || this.Status == TaskStatus.Faulted) && !this.HasContinuations;
			}
		}

		public bool IsFaulted
		{
			get
			{
				return this.Status == TaskStatus.Faulted;
			}
		}

		public bool IsSuccess
		{
			get
			{
				return this.Status == TaskStatus.Success;
			}
		}

		public bool HasContinuations
		{
			get;
			protected set;
		}

		static AsyncTask()
		{
			AsyncTask.DisableMultiThread = false;
			AsyncTask.LogErrors = false;
			AsyncTask._successTask = new AsyncTask(TaskStrategy.Custom)
			{
				Status = TaskStatus.Success
			};
			TaskManager.ConfirmInit();
		}

		public AsyncTask()
		{
		}

		public AsyncTask(TaskStrategy mode)
		{
			this.Strategy = mode;
		}

		public AsyncTask(Exception ex)
		{
			this.Exception = ex;
			this.Strategy = TaskStrategy.Custom;
			this.Status = TaskStatus.Faulted;
		}

		public AsyncTask(Action action)
		{
			this._action = action;
			this.Strategy = TaskStrategy.BackgroundThread;
		}

		public AsyncTask(Action action, TaskStrategy mode) : this()
		{
			if (mode == TaskStrategy.Coroutine)
			{
				throw new ArgumentException("Action tasks may not be coroutines");
			}
			this._action = action;
			this.Strategy = mode;
		}

		public AsyncTask(IEnumerator action) : this()
		{
			if (action == null)
			{
				throw new ArgumentNullException("action");
			}
			this._routine = action;
			this.Strategy = TaskStrategy.Coroutine;
		}

		protected virtual void Execute()
		{
			try
			{
				if (this._action != null)
				{
					this._action();
				}
				this.Status = TaskStatus.Success;
				this.OnTaskComplete();
			}
			catch (Exception exception)
			{
				this.Exception = exception;
				this.Status = TaskStatus.Faulted;
				if (AsyncTask.LogErrors)
				{
					UnityEngine.Debug.LogException(exception);
				}
			}
		}

		protected void RunOnBackgroundThread()
		{
			this.Status = TaskStatus.Pending;
			ThreadPool.QueueUserWorkItem(new WaitCallback(this._RunOnBackgroundThread_b__37_0));
		}

		protected void RunOnCurrentThread()
		{
			this.Status = TaskStatus.Pending;
			this.Execute();
		}

		protected void RunOnMainThread()
		{
			this.Status = TaskStatus.Pending;
			TaskManager.RunOnMainThread(new Action(this.Execute));
		}

		protected void RunAsCoroutine()
		{
			this.Status = TaskStatus.Pending;
			TaskManager.StartRoutine(new TaskManager.CoroutineCommand
			{
				Coroutine = this._routine,
				OnComplete = new Action(this.OnRoutineComplete)
			});
		}

		protected virtual void OnTaskComplete()
		{
			if (this._completeList != null)
			{
				foreach (Delegate current in this._completeList)
				{
					if (current != null)
					{
						current.DynamicInvoke(new object[]
						{
							this
						});
					}
				}
				this._completeList = null;
			}
			this.HasContinuations = false;
		}

		protected void OnRoutineComplete()
		{
			if (this.Status == TaskStatus.Pending)
			{
				this.Status = TaskStatus.Success;
				this.OnTaskComplete();
			}
		}

		public virtual void Complete(Exception ex = null)
		{
			if (ex == null)
			{
				this.Exception = null;
				this.Status = TaskStatus.Success;
				this.OnTaskComplete();
				return;
			}
			this.Exception = ex;
			this.Status = TaskStatus.Faulted;
			this.OnTaskComplete();
		}

		public virtual void Start()
		{
			this.Status = TaskStatus.Pending;
			switch (this.Strategy)
			{
			case TaskStrategy.BackgroundThread:
				if (AsyncTask.DisableMultiThread)
				{
					this.RunOnCurrentThread();
					return;
				}
				this.RunOnBackgroundThread();
				return;
			case TaskStrategy.MainThread:
				this.RunOnMainThread();
				break;
			case TaskStrategy.CurrentThread:
				this.RunOnCurrentThread();
				return;
			case TaskStrategy.Coroutine:
				this.RunAsCoroutine();
				return;
			case TaskStrategy.Custom:
				break;
			default:
				return;
			}
		}

		public virtual void Dispose()
		{
			this.Status = TaskStatus.Pending;
			this.Exception = null;
			this._action = null;
			this._routine = null;
			this._completeList = null;
			this.HasContinuations = false;
		}

		public void AddContinue(Delegate action)
		{
			this.HasContinuations = true;
			if (this._completeList == null)
			{
				this._completeList = new List<Delegate>();
			}
			this._completeList.Add(action);
		}

		public static AsyncTask Run(Action action)
		{
			AsyncTask expr_06 = new AsyncTask(action);
			expr_06.Start();
			return expr_06;
		}

		public static AsyncTask RunOnMain(Action action)
		{
			AsyncTask expr_07 = new AsyncTask(action, TaskStrategy.MainThread);
			expr_07.Start();
			return expr_07;
		}

		public static AsyncTask RunOnCurrent(Action action)
		{
			AsyncTask expr_07 = new AsyncTask(action, TaskStrategy.CurrentThread);
			expr_07.Start();
			return expr_07;
		}

		public static AsyncTask RunCoroutine(IEnumerator function)
		{
			AsyncTask expr_06 = new AsyncTask(function);
			expr_06.Start();
			return expr_06;
		}

		public static AsyncTask RunCoroutine(Func<IEnumerator> function)
		{
			AsyncTask expr_0B = new AsyncTask(function());
			expr_0B.Start();
			return expr_0B;
		}

		public static AsyncTask RunCoroutine(Func<AsyncTask, IEnumerator> function)
		{
			AsyncTask asyncTask = new AsyncTask();
			asyncTask.Strategy = TaskStrategy.Coroutine;
			asyncTask._routine = function(asyncTask);
			asyncTask.Start();
			return asyncTask;
		}

		public static AsyncTask<TResult> Run<TResult>(Func<TResult> function)
		{
			AsyncTask<TResult> expr_06 = new AsyncTask<TResult>(function);
			expr_06.Start();
			return expr_06;
		}

		public static AsyncTask<TResult> RunOnMain<TResult>(Func<TResult> function)
		{
			AsyncTask<TResult> expr_07 = new AsyncTask<TResult>(function, TaskStrategy.MainThread);
			expr_07.Start();
			return expr_07;
		}

		public static AsyncTask<TResult> RunOnCurrent<TResult>(Func<TResult> function)
		{
			AsyncTask<TResult> expr_07 = new AsyncTask<TResult>(function, TaskStrategy.CurrentThread);
			expr_07.Start();
			return expr_07;
		}

		public static AsyncTask<TResult> RunCoroutine<TResult>(IEnumerator function)
		{
			AsyncTask<TResult> expr_06 = new AsyncTask<TResult>(function);
			expr_06.Start();
			return expr_06;
		}

		public static AsyncTask<TResult> RunCoroutine<TResult>(Func<AsyncTask<TResult>, IEnumerator> function)
		{
			AsyncTask<TResult> asyncTask = new AsyncTask<TResult>();
			asyncTask.Strategy = TaskStrategy.Coroutine;
			asyncTask._routine = function(asyncTask);
			asyncTask.Start();
			return asyncTask;
		}

		public static AsyncTask<T> SuccessTask<T>(T result)
		{
			return new AsyncTask<T>(TaskStrategy.Custom)
			{
				Status = TaskStatus.Success,
				Result = result
			};
		}

		public static AsyncTask SuccessTask()
		{
			return AsyncTask._successTask;
		}

		public static AsyncTask FailedTask(string exception)
		{
			return AsyncTask.FailedTask(new Exception(exception));
		}

		public static AsyncTask FailedTask(Exception ex)
		{
			return new AsyncTask(TaskStrategy.Custom)
			{
				Status = TaskStatus.Faulted,
				Exception = ex
			};
		}

		public static AsyncTask<T> FailedTask<T>(string exception)
		{
			return AsyncTask.FailedTask<T>(new Exception(exception));
		}

		public static AsyncTask<T> FailedTask<T>(Exception ex)
		{
			return new AsyncTask<T>(TaskStrategy.Custom)
			{
				Status = TaskStatus.Faulted,
				Exception = ex
			};
		}

		private void _RunOnBackgroundThread_b__37_0(object state)
		{
			this.Execute();
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using UnityEngine;

namespace Foundation.Tasks
{
	public static class TaskExtensions
	{
		private sealed class _TimeOutAsync_d__3 : IEnumerator<object>, IDisposable, IEnumerator
		{
			private int __1__state;

			private object __2__current;

			public int seconds;

			public AsyncTask task;

			public Action<AsyncTask> onTimeout;

			object IEnumerator<object>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _TimeOutAsync_d__3(int __1__state)
			{
				this.__1__state = __1__state;
			}

			void IDisposable.Dispose()
			{
			}

			bool IEnumerator.MoveNext()
			{
				int num = this.__1__state;
				if (num == 0)
				{
					this.__1__state = -1;
					this.__2__current = new WaitForSeconds((float)this.seconds);
					this.__1__state = 1;
					return true;
				}
				if (num != 1)
				{
					return false;
				}
				this.__1__state = -1;
				if (this.task.IsRunning)
				{
					if (this.onTimeout != null)
					{
						this.onTimeout(this.task);
					}
					this.task.Complete(new Exception("Timeout"));
				}
				return false;
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}
		}

		public static T ThrowIfFaulted<T>(this T self) where T : AsyncTask
		{
			if (self.IsFaulted)
			{
				throw self.Exception;
			}
			return self;
		}

		public static T ContinueWith<T>(this T self, Action<T> continuation) where T : AsyncTask
		{
			if (self.IsCompleted)
			{
				continuation(self);
			}
			else
			{
				self.AddContinue(continuation);
			}
			return self;
		}

		public static T AddTimeout<T>(this T self, int seconds, Action<AsyncTask> onTimeout = null) where T : AsyncTask
		{
			TaskManager.StartRoutine(TaskExtensions.TimeOutAsync(self, seconds, onTimeout));
			return self;
		}

		private static IEnumerator TimeOutAsync(AsyncTask task, int seconds, Action<AsyncTask> onTimeout = null)
		{
			TaskExtensions._TimeOutAsync_d__3 expr_06 = new TaskExtensions._TimeOutAsync_d__3(0);
			expr_06.task = task;
			expr_06.seconds = seconds;
			expr_06.onTimeout = onTimeout;
			return expr_06;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using UnityEngine;

namespace Foundation.Tasks
{
	[AddComponentMenu("Foundation/TaskManager"), ExecuteInEditMode]
	public class TaskManager : MonoBehaviour
	{
		public struct LogCommand
		{
			public LogType Type;

			public object Message;
		}

		public struct CoroutineCommand
		{
			public IEnumerator Coroutine;

			public Action OnComplete;
		}

		private sealed class _RunCoroutineInfo_d__22 : IEnumerator<object>, IDisposable, IEnumerator
		{
			private int __1__state;

			private object __2__current;

			public TaskManager __4__this;

			public TaskManager.CoroutineCommand info;

			object IEnumerator<object>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _RunCoroutineInfo_d__22(int __1__state)
			{
				this.__1__state = __1__state;
			}

			void IDisposable.Dispose()
			{
			}

			bool IEnumerator.MoveNext()
			{
				int num = this.__1__state;
				if (num == 0)
				{
					this.__1__state = -1;
					this.__2__current = this.__4__this.StartCoroutine(this.info.Coroutine);
					this.__1__state = 1;
					return true;
				}
				if (num != 1)
				{
					return false;
				}
				this.__1__state = -1;
				if (this.info.OnComplete != null)
				{
					this.info.OnComplete();
				}
				return false;
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}
		}

		private sealed class _WaitForSecondsInternal_d__24 : IEnumerator<object>, IDisposable, IEnumerator
		{
			private int __1__state;

			private object __2__current;

			public int seconds;

			private float _delta_5__1;

			object IEnumerator<object>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _WaitForSecondsInternal_d__24(int __1__state)
			{
				this.__1__state = __1__state;
			}

			void IDisposable.Dispose()
			{
			}

			bool IEnumerator.MoveNext()
			{
				int num = this.__1__state;
				if (num != 0)
				{
					if (num != 1)
					{
						return false;
					}
					this.__1__state = -1;
				}
				else
				{
					this.__1__state = -1;
					if (this.seconds <= 0)
					{
						return false;
					}
					this._delta_5__1 = 0f;
				}
				if (this._delta_5__1 >= (float)this.seconds)
				{
					return false;
				}
				this._delta_5__1 += Time.unscaledDeltaTime;
				this.__2__current = 1;
				this.__1__state = 1;
				return true;
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}
		}

		private static TaskManager _instance;

		private static object syncRoot = new object();

		protected static readonly List<TaskManager.CoroutineCommand> PendingCoroutineInfo = new List<TaskManager.CoroutineCommand>();

		protected static readonly List<IEnumerator> PendingAdd = new List<IEnumerator>();

		protected static readonly List<IEnumerator> PendingRemove = new List<IEnumerator>();

		protected static readonly List<Action> PendingActions = new List<Action>();

		protected static readonly List<TaskManager.LogCommand> PendingLogs = new List<TaskManager.LogCommand>();

		protected static bool IsApplicationQuit;

		public static TaskManager Instance
		{
			get
			{
				TaskManager.ConfirmInit();
				return TaskManager._instance;
			}
		}

		public static bool IsMainThread
		{
			get
			{
				return Thread.CurrentThread == TaskManager.MainThread;
			}
		}

		public static Thread MainThread
		{
			get;
			protected set;
		}

		public static Thread CurrentThread
		{
			get
			{
				return Thread.CurrentThread;
			}
		}

		public static void ConfirmInit()
		{
			if (TaskManager._instance == null)
			{
				TaskManager[] array = Object.FindObjectsOfType<TaskManager>();
				for (int i = 0; i < array.Length; i++)
				{
					TaskManager taskManager = array[i];
					if (Application.isEditor)
					{
						Object.DestroyImmediate(taskManager.gameObject);
					}
					else
					{
						Object.Destroy(taskManager.gameObject);
					}
				}
				GameObject expr_4E = new GameObject("_TaskManager");
				Object.DontDestroyOnLoad(expr_4E);
				TaskManager._instance = expr_4E.AddComponent<TaskManager>();
				TaskManager.MainThread = TaskManager.CurrentThread;
			}
		}

		public static Coroutine WaitForSeconds(int seconds)
		{
			return TaskManager.Instance.StartCoroutine(TaskManager.Instance.WaitForSecondsInternal(seconds));
		}

		public static Coroutine StartRoutine(IEnumerator coroutine)
		{
			if (TaskManager.IsApplicationQuit)
			{
				return null;
			}
			if (!TaskManager.IsMainThread)
			{
				object obj = TaskManager.syncRoot;
				lock (obj)
				{
					TaskManager.PendingAdd.Add(coroutine);
					return null;
				}
			}
			return TaskManager.Instance.StartCoroutine(coroutine);
		}

		public static void StartRoutine(TaskManager.CoroutineCommand info)
		{
			if (TaskManager.IsApplicationQuit)
			{
				return;
			}
			if (!TaskManager.IsMainThread)
			{
				object obj = TaskManager.syncRoot;
				lock (obj)
				{
					TaskManager.PendingCoroutineInfo.Add(info);
					return;
				}
			}
			TaskManager.Instance.StartCoroutine(TaskManager.Instance.RunCoroutineInfo(info));
		}

		public static void StopRoutine(IEnumerator coroutine)
		{
			if (TaskManager.IsApplicationQuit)
			{
				return;
			}
			if (!TaskManager.IsMainThread)
			{
				object obj = TaskManager.syncRoot;
				lock (obj)
				{
					TaskManager.PendingRemove.Add(coroutine);
					return;
				}
			}
			TaskManager.Instance.StopCoroutine(coroutine);
		}

		public static void RunOnMainThread(Action action)
		{
			if (TaskManager.IsApplicationQuit)
			{
				return;
			}
			if (!TaskManager.IsMainThread)
			{
				object obj = TaskManager.syncRoot;
				lock (obj)
				{
					TaskManager.PendingActions.Add(action);
					return;
				}
			}
			action();
		}

		public static void Log(TaskManager.LogCommand m)
		{
			if (!TaskManager.IsMainThread)
			{
				object obj = TaskManager.syncRoot;
				lock (obj)
				{
					TaskManager.PendingLogs.Add(m);
					return;
				}
			}
			TaskManager.Write(m);
		}

		private static void Write(TaskManager.LogCommand m)
		{
			switch (m.Type)
			{
			case LogType.Error:
			case LogType.Exception:
				UnityEngine.Debug.LogError(m.Message);
				return;
			case LogType.Assert:
			case LogType.Log:
				UnityEngine.Debug.Log(m.Message);
				return;
			case LogType.Warning:
				UnityEngine.Debug.LogWarning(m.Message);
				return;
			default:
				return;
			}
		}

		protected void Awake()
		{
			if (TaskManager._instance == null)
			{
				TaskManager._instance = this;
			}
		}

		protected void Update()
		{
			if (TaskManager.IsApplicationQuit)
			{
				return;
			}
			if (TaskManager.PendingAdd.Count == 0 && TaskManager.PendingRemove.Count == 0 && TaskManager.PendingActions.Count == 0 && TaskManager.PendingLogs.Count == 0 && TaskManager.PendingCoroutineInfo.Count == 0)
			{
				return;
			}
			object obj = TaskManager.syncRoot;
			lock (obj)
			{
				for (int i = 0; i < TaskManager.PendingLogs.Count; i++)
				{
					TaskManager.Write(TaskManager.PendingLogs[i]);
				}
				for (int j = 0; j < TaskManager.PendingAdd.Count; j++)
				{
					base.StartCoroutine(TaskManager.PendingAdd[j]);
				}
				for (int k = 0; k < TaskManager.PendingRemove.Count; k++)
				{
					base.StopCoroutine(TaskManager.PendingRemove[k]);
				}
				for (int l = 0; l < TaskManager.PendingCoroutineInfo.Count; l++)
				{
					base.StartCoroutine(this.RunCoroutineInfo(TaskManager.PendingCoroutineInfo[l]));
				}
				for (int m = 0; m < TaskManager.PendingActions.Count; m++)
				{
					TaskManager.PendingActions[m]();
				}
				TaskManager.PendingAdd.Clear();
				TaskManager.PendingRemove.Clear();
				TaskManager.PendingActions.Clear();
				TaskManager.PendingLogs.Clear();
				TaskManager.PendingCoroutineInfo.Clear();
			}
		}

		private IEnumerator RunCoroutineInfo(TaskManager.CoroutineCommand info)
		{
			TaskManager._RunCoroutineInfo_d__22 expr_06 = new TaskManager._RunCoroutineInfo_d__22(0);
			expr_06.__4__this = this;
			expr_06.info = info;
			return expr_06;
		}

		protected void OnApplicationQuit()
		{
			TaskManager.IsApplicationQuit = true;
		}

		private IEnumerator WaitForSecondsInternal(int seconds)
		{
			TaskManager._WaitForSecondsInternal_d__24 expr_06 = new TaskManager._WaitForSecondsInternal_d__24(0);
			expr_06.seconds = seconds;
			return expr_06;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using UnityEngine;

namespace Foundation.Tasks
{
	public class AsyncTask<TResult> : AsyncTask
	{
		public TResult Result;

		private Func<TResult> _function;

		public AsyncTask()
		{
		}

		public AsyncTask(TResult result) : this()
		{
			base.Status = TaskStatus.Success;
			this.Strategy = TaskStrategy.Custom;
			this.Result = result;
		}

		public AsyncTask(Func<TResult> function) : this()
		{
			if (function == null)
			{
				throw new ArgumentNullException("function");
			}
			this._function = function;
		}

		public AsyncTask(Func<TResult> function, TaskStrategy mode) : this()
		{
			if (function == null)
			{
				throw new ArgumentNullException("function");
			}
			if (mode == TaskStrategy.Coroutine)
			{
				throw new ArgumentException("Mode can not be coroutine");
			}
			this._function = function;
			this.Strategy = mode;
		}

		public AsyncTask(IEnumerator routine)
		{
			if (routine == null)
			{
				throw new ArgumentNullException("routine");
			}
			this._routine = routine;
			this.Strategy = TaskStrategy.Coroutine;
		}

		public AsyncTask(Exception ex)
		{
			base.Exception = ex;
			this.Strategy = TaskStrategy.Custom;
			base.Status = TaskStatus.Faulted;
		}

		public AsyncTask(TaskStrategy mode) : this()
		{
			this.Strategy = mode;
		}

		public override void Complete(Exception ex = null)
		{
			this.Result = default(TResult);
			base.Complete(ex);
		}

		public void Complete(TResult result)
		{
			this.Result = result;
			base.Complete(null);
		}

		public override void Start()
		{
			this.Result = default(TResult);
			base.Start();
		}

		protected override void Execute()
		{
			try
			{
				if (this._function != null)
				{
					this.Result = this._function();
				}
				base.Status = TaskStatus.Success;
				this.OnTaskComplete();
			}
			catch (Exception exception)
			{
				base.Exception = exception;
				base.Status = TaskStatus.Faulted;
				if (AsyncTask.LogErrors)
				{
					UnityEngine.Debug.LogException(exception);
				}
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public enum EGAErrorSeverity
	{
		Undefined,
		Debug,
		Info,
		Warning,
		Error,
		Critical
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public enum EGAGender
	{
		Undefined,
		Male,
		Female
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public enum EGALoggerMessageType
	{
		Error,
		Warning,
		Info,
		Debug
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public enum EGAProgressionStatus
	{
		Undefined,
		Start,
		Complete,
		Fail
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public enum EGAResourceFlowType
	{
		Undefined,
		Source,
		Sink
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Device;
using GameAnalyticsSDK.Net.Events;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.State;
using GameAnalyticsSDK.Net.Store;
using GameAnalyticsSDK.Net.Threading;
using GameAnalyticsSDK.Net.Validators;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace GameAnalyticsSDK.Net
{
	public static class GameAnalytics
	{
		private sealed class __c__DisplayClass2_0
		{
			public string[] customDimensions;

			internal void _ConfigureAvailableCustomDimensions01_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Available custom dimensions must be set before SDK is initialized");
					return;
				}
				GAState.AvailableCustomDimensions01 = this.customDimensions;
			}
		}

		private sealed class __c__DisplayClass3_0
		{
			public string[] customDimensions;

			internal void _ConfigureAvailableCustomDimensions02_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Available custom dimensions must be set before SDK is initialized");
					return;
				}
				GAState.AvailableCustomDimensions02 = this.customDimensions;
			}
		}

		private sealed class __c__DisplayClass4_0
		{
			public string[] customDimensions;

			internal void _ConfigureAvailableCustomDimensions03_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Available custom dimensions must be set before SDK is initialized");
					return;
				}
				GAState.AvailableCustomDimensions03 = this.customDimensions;
			}
		}

		private sealed class __c__DisplayClass5_0
		{
			public string[] resourceCurrencies;

			internal void _ConfigureAvailableResourceCurrencies_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Available resource currencies must be set before SDK is initialized");
					return;
				}
				GAState.AvailableResourceCurrencies = this.resourceCurrencies;
			}
		}

		private sealed class __c__DisplayClass6_0
		{
			public string[] resourceItemTypes;

			internal void _ConfigureAvailableResourceItemTypes_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Available resource item types must be set before SDK is initialized");
					return;
				}
				GAState.AvailableResourceItemTypes = this.resourceItemTypes;
			}
		}

		private sealed class __c__DisplayClass7_0
		{
			public string build;

			internal void _ConfigureBuild_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("Build version must be set before SDK is initialized.");
					return;
				}
				if (!GAValidator.ValidateBuild(this.build))
				{
					GALogger.I("Validation fail - configure build: Cannot be null, empty or above 32 length. String: " + this.build);
					return;
				}
				GAState.Build = this.build;
			}
		}

		private sealed class __c__DisplayClass8_0
		{
			public string sdkGameEngineVersion;

			internal void _ConfigureSdkGameEngineVersion_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					return;
				}
				if (!GAValidator.ValidateSdkWrapperVersion(this.sdkGameEngineVersion))
				{
					GALogger.I("Validation fail - configure sdk version: Sdk version not supported. String: " + this.sdkGameEngineVersion);
					return;
				}
				GADevice.SdkGameEngineVersion = this.sdkGameEngineVersion;
			}
		}

		private sealed class __c__DisplayClass9_0
		{
			public string gameEngineVersion;

			internal void _ConfigureGameEngineVersion_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					return;
				}
				if (!GAValidator.ValidateEngineVersion(this.gameEngineVersion))
				{
					GALogger.I("Validation fail - configure sdk version: Sdk version not supported. String: " + this.gameEngineVersion);
					return;
				}
				GADevice.GameEngineVersion = this.gameEngineVersion;
			}
		}

		private sealed class __c__DisplayClass10_0
		{
			public string uId;

			internal void _ConfigureUserId_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("A custom user id must be set before SDK is initialized.");
					return;
				}
				if (!GAValidator.ValidateUserId(this.uId))
				{
					GALogger.I("Validation fail - configure user_id: Cannot be null, empty or above 64 length. Will use default user_id method. Used string: " + this.uId);
					return;
				}
				GAState.UserId = this.uId;
			}
		}

		private sealed class __c__DisplayClass11_0
		{
			public string gameKey;

			public string gameSecret;

			internal void _Initialize_b__0()
			{
				if (GameAnalytics.IsSdkReady(true, false))
				{
					GALogger.W("SDK already initialized. Can only be called once.");
					return;
				}
				if (!GAValidator.ValidateKeys(this.gameKey, this.gameSecret))
				{
					GALogger.W("SDK failed initialize. Game key or secret key is invalid. Can only contain characters A-z 0-9, gameKey is 32 length, gameSecret is 40 length. Failed keys - gameKey: " + this.gameKey + ", secretKey: " + this.gameSecret);
					return;
				}
				GAState.SetKeys(this.gameKey, this.gameSecret);
				if (!GAStore.EnsureDatabase(false, this.gameKey))
				{
					GALogger.W("Could not ensure/validate local event database: " + GADevice.WritablePath);
				}
				GAState.InternalInitialize();
			}
		}

		private sealed class __c__DisplayClass12_0
		{
			public string currency;

			public int amount;

			public string itemType;

			public string itemId;

			public string cartType;

			internal void _AddBusinessEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add business event"))
				{
					return;
				}
				GAEvents.AddBusinessEvent(this.currency, this.amount, this.itemType, this.itemId, this.cartType, null);
			}
		}

		private sealed class __c__DisplayClass13_0
		{
			public EGAResourceFlowType flowType;

			public string currency;

			public float amount;

			public string itemType;

			public string itemId;

			internal void _AddResourceEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add resource event"))
				{
					return;
				}
				GAEvents.AddResourceEvent(this.flowType, this.currency, (double)this.amount, this.itemType, this.itemId, null);
			}
		}

		private sealed class __c__DisplayClass18_0
		{
			public EGAProgressionStatus progressionStatus;

			public string progression01;

			public string progression02;

			public string progression03;

			internal void _AddProgressionEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add progression event"))
				{
					return;
				}
				GAEvents.AddProgressionEvent(this.progressionStatus, this.progression01, this.progression02, this.progression03, 0.0, false, null);
			}
		}

		private sealed class __c__DisplayClass19_0
		{
			public EGAProgressionStatus progressionStatus;

			public string progression01;

			public string progression02;

			public string progression03;

			public double score;

			internal void _AddProgressionEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add progression event"))
				{
					return;
				}
				GAEvents.AddProgressionEvent(this.progressionStatus, this.progression01, this.progression02, this.progression03, this.score, true, null);
			}
		}

		private sealed class __c__DisplayClass20_0
		{
			public string eventId;

			public IDictionary<string, object> fields;

			internal void _AddDesignEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add design event"))
				{
					return;
				}
				GAEvents.AddDesignEvent(this.eventId, 0.0, false, this.fields);
			}
		}

		private sealed class __c__DisplayClass21_0
		{
			public string eventId;

			public double value;

			internal void _AddDesignEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add design event"))
				{
					return;
				}
				GAEvents.AddDesignEvent(this.eventId, this.value, true, null);
			}
		}

		private sealed class __c__DisplayClass22_0
		{
			public EGAErrorSeverity severity;

			public string message;

			internal void _AddErrorEvent_b__0()
			{
				if (!GameAnalytics.IsSdkReady(true, true, "Could not add error event"))
				{
					return;
				}
				GAEvents.AddErrorEvent(this.severity, this.message, null);
			}
		}

		private sealed class __c__DisplayClass23_0
		{
			public bool flag;

			internal void _SetEnabledInfoLog_b__0()
			{
				if (this.flag)
				{
					GALogger.InfoLog = this.flag;
					GALogger.I("Info logging enabled");
					return;
				}
				GALogger.I("Info logging disabled");
				GALogger.InfoLog = this.flag;
			}
		}

		private sealed class __c__DisplayClass24_0
		{
			public bool flag;

			internal void _SetEnabledVerboseLog_b__0()
			{
				if (this.flag)
				{
					GALogger.VerboseLog = this.flag;
					GALogger.I("Verbose logging enabled");
					return;
				}
				GALogger.I("Verbose logging disabled");
				GALogger.VerboseLog = this.flag;
			}
		}

		private sealed class __c__DisplayClass25_0
		{
			public bool flag;

			internal void _SetEnabledManualSessionHandling_b__0()
			{
				GAState.SetManualSessionHandling(this.flag);
			}
		}

		private sealed class __c__DisplayClass26_0
		{
			public bool flag;

			internal void _SetEnabledEventSubmission_b__0()
			{
				if (this.flag)
				{
					GAState.SetEnabledEventSubmission(this.flag);
					GALogger.I("Event submission enabled");
					return;
				}
				GALogger.I("Event submission disabled");
				GAState.SetEnabledEventSubmission(this.flag);
			}
		}

		private sealed class __c__DisplayClass27_0
		{
			public string dimension;

			internal void _SetCustomDimension01_b__0()
			{
				if (!GAValidator.ValidateDimension01(this.dimension))
				{
					GALogger.W("Could not set custom01 dimension value to '" + this.dimension + "'. Value not found in available custom01 dimension values");
					return;
				}
				GAState.SetCustomDimension01(this.dimension);
			}
		}

		private sealed class __c__DisplayClass28_0
		{
			public string dimension;

			internal void _SetCustomDimension02_b__0()
			{
				if (!GAValidator.ValidateDimension02(this.dimension))
				{
					GALogger.W("Could not set custom02 dimension value to '" + this.dimension + "'. Value not found in available custom02 dimension values");
					return;
				}
				GAState.SetCustomDimension02(this.dimension);
			}
		}

		private sealed class __c__DisplayClass29_0
		{
			public string dimension;

			internal void _SetCustomDimension03_b__0()
			{
				if (!GAValidator.ValidateDimension03(this.dimension))
				{
					GALogger.W("Could not set custom03 dimension value to '" + this.dimension + "'. Value not found in available custom03 dimension values");
					return;
				}
				GAState.SetCustomDimension03(this.dimension);
			}
		}

		private sealed class __c__DisplayClass30_0
		{
			public string facebookId;

			internal void _SetFacebookId_b__0()
			{
				if (GAValidator.ValidateFacebookId(this.facebookId))
				{
					GAState.SetFacebookId(this.facebookId);
				}
			}
		}

		private sealed class __c__DisplayClass31_0
		{
			public EGAGender gender;

			internal void _SetGender_b__0()
			{
				if (GAValidator.ValidateGender(this.gender))
				{
					GAState.SetGender(this.gender);
				}
			}
		}

		private sealed class __c__DisplayClass32_0
		{
			public int birthYear;

			internal void _SetBirthYear_b__0()
			{
				if (GAValidator.ValidateBirthyear((long)this.birthYear))
				{
					GAState.SetBirthYear(this.birthYear);
				}
			}
		}

		[Serializable]
		private sealed class __c
		{
			public static readonly GameAnalytics.__c __9 = new GameAnalytics.__c();

			public static Action __9__33_0;

			public static Action __9__35_0;

			public static Action __9__36_0;

			public static Action __9__37_0;

			internal void _StartSession_b__33_0()
			{
				if (!GAState.Initialized)
				{
					return;
				}
				if (GAState.IsEnabled() && GAState.SessionIsStarted())
				{
					GAState.EndSessionAndStopQueue(false);
				}
				GAState.ResumeSessionAndStartQueue();
			}

			internal void _OnResume_b__35_0()
			{
				GAState.ResumeSessionAndStartQueue();
			}

			internal void _OnSuspend_b__36_0()
			{
				try
				{
					GAState.EndSessionAndStopQueue(false);
				}
				catch (Exception)
				{
				}
			}

			internal void _OnQuit_b__37_0()
			{
				try
				{
					GameAnalytics._endThread = true;
					GAState.EndSessionAndStopQueue(true);
				}
				catch (Exception)
				{
				}
			}
		}

		private static bool _endThread;

		static GameAnalytics()
		{
			GameAnalytics._endThread = false;
			GADevice.Touch();
		}

		public static void ConfigureAvailableCustomDimensions01(params string[] customDimensions)
		{
			GameAnalytics.__c__DisplayClass2_0 __c__DisplayClass2_ = new GameAnalytics.__c__DisplayClass2_0();
			__c__DisplayClass2_.customDimensions = customDimensions;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureAvailableCustomDimensions01", new Action(__c__DisplayClass2_._ConfigureAvailableCustomDimensions01_b__0));
		}

		public static void ConfigureAvailableCustomDimensions02(params string[] customDimensions)
		{
			GameAnalytics.__c__DisplayClass3_0 __c__DisplayClass3_ = new GameAnalytics.__c__DisplayClass3_0();
			__c__DisplayClass3_.customDimensions = customDimensions;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureAvailableCustomDimensions02", new Action(__c__DisplayClass3_._ConfigureAvailableCustomDimensions02_b__0));
		}

		public static void ConfigureAvailableCustomDimensions03(params string[] customDimensions)
		{
			GameAnalytics.__c__DisplayClass4_0 __c__DisplayClass4_ = new GameAnalytics.__c__DisplayClass4_0();
			__c__DisplayClass4_.customDimensions = customDimensions;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureAvailableCustomDimensions03", new Action(__c__DisplayClass4_._ConfigureAvailableCustomDimensions03_b__0));
		}

		public static void ConfigureAvailableResourceCurrencies(params string[] resourceCurrencies)
		{
			GameAnalytics.__c__DisplayClass5_0 __c__DisplayClass5_ = new GameAnalytics.__c__DisplayClass5_0();
			__c__DisplayClass5_.resourceCurrencies = resourceCurrencies;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureAvailableResourceCurrencies", new Action(__c__DisplayClass5_._ConfigureAvailableResourceCurrencies_b__0));
		}

		public static void ConfigureAvailableResourceItemTypes(params string[] resourceItemTypes)
		{
			GameAnalytics.__c__DisplayClass6_0 __c__DisplayClass6_ = new GameAnalytics.__c__DisplayClass6_0();
			__c__DisplayClass6_.resourceItemTypes = resourceItemTypes;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureAvailableResourceItemTypes", new Action(__c__DisplayClass6_._ConfigureAvailableResourceItemTypes_b__0));
		}

		public static void ConfigureBuild(string build)
		{
			GameAnalytics.__c__DisplayClass7_0 __c__DisplayClass7_ = new GameAnalytics.__c__DisplayClass7_0();
			__c__DisplayClass7_.build = build;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureBuild", new Action(__c__DisplayClass7_._ConfigureBuild_b__0));
		}

		public static void ConfigureSdkGameEngineVersion(string sdkGameEngineVersion)
		{
			GameAnalytics.__c__DisplayClass8_0 __c__DisplayClass8_ = new GameAnalytics.__c__DisplayClass8_0();
			__c__DisplayClass8_.sdkGameEngineVersion = sdkGameEngineVersion;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureSdkGameEngineVersion", new Action(__c__DisplayClass8_._ConfigureSdkGameEngineVersion_b__0));
		}

		public static void ConfigureGameEngineVersion(string gameEngineVersion)
		{
			GameAnalytics.__c__DisplayClass9_0 __c__DisplayClass9_ = new GameAnalytics.__c__DisplayClass9_0();
			__c__DisplayClass9_.gameEngineVersion = gameEngineVersion;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureGameEngineVersion", new Action(__c__DisplayClass9_._ConfigureGameEngineVersion_b__0));
		}

		public static void ConfigureUserId(string uId)
		{
			GameAnalytics.__c__DisplayClass10_0 __c__DisplayClass10_ = new GameAnalytics.__c__DisplayClass10_0();
			__c__DisplayClass10_.uId = uId;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("configureUserId", new Action(__c__DisplayClass10_._ConfigureUserId_b__0));
		}

		public static void Initialize(string gameKey, string gameSecret)
		{
			GameAnalytics.__c__DisplayClass11_0 __c__DisplayClass11_ = new GameAnalytics.__c__DisplayClass11_0();
			__c__DisplayClass11_.gameKey = gameKey;
			__c__DisplayClass11_.gameSecret = gameSecret;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("initialize", new Action(__c__DisplayClass11_._Initialize_b__0));
		}

		public static void AddBusinessEvent(string currency, int amount, string itemType, string itemId, string cartType)
		{
			GameAnalytics.__c__DisplayClass12_0 __c__DisplayClass12_ = new GameAnalytics.__c__DisplayClass12_0();
			__c__DisplayClass12_.currency = currency;
			__c__DisplayClass12_.amount = amount;
			__c__DisplayClass12_.itemType = itemType;
			__c__DisplayClass12_.itemId = itemId;
			__c__DisplayClass12_.cartType = cartType;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addBusinessEvent", new Action(__c__DisplayClass12_._AddBusinessEvent_b__0));
		}

		public static void AddResourceEvent(EGAResourceFlowType flowType, string currency, float amount, string itemType, string itemId)
		{
			GameAnalytics.__c__DisplayClass13_0 __c__DisplayClass13_ = new GameAnalytics.__c__DisplayClass13_0();
			__c__DisplayClass13_.flowType = flowType;
			__c__DisplayClass13_.currency = currency;
			__c__DisplayClass13_.amount = amount;
			__c__DisplayClass13_.itemType = itemType;
			__c__DisplayClass13_.itemId = itemId;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addResourceEvent", new Action(__c__DisplayClass13_._AddResourceEvent_b__0));
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01)
		{
			GameAnalytics.AddProgressionEvent(progressionStatus, progression01, "", "");
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, double score)
		{
			GameAnalytics.AddProgressionEvent(progressionStatus, progression01, "", "", score);
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02)
		{
			GameAnalytics.AddProgressionEvent(progressionStatus, progression01, progression02, "");
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, double score)
		{
			GameAnalytics.AddProgressionEvent(progressionStatus, progression01, progression02, "", score);
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03)
		{
			GameAnalytics.__c__DisplayClass18_0 __c__DisplayClass18_ = new GameAnalytics.__c__DisplayClass18_0();
			__c__DisplayClass18_.progressionStatus = progressionStatus;
			__c__DisplayClass18_.progression01 = progression01;
			__c__DisplayClass18_.progression02 = progression02;
			__c__DisplayClass18_.progression03 = progression03;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addProgressionEvent", new Action(__c__DisplayClass18_._AddProgressionEvent_b__0));
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03, double score)
		{
			GameAnalytics.__c__DisplayClass19_0 __c__DisplayClass19_ = new GameAnalytics.__c__DisplayClass19_0();
			__c__DisplayClass19_.progressionStatus = progressionStatus;
			__c__DisplayClass19_.progression01 = progression01;
			__c__DisplayClass19_.progression02 = progression02;
			__c__DisplayClass19_.progression03 = progression03;
			__c__DisplayClass19_.score = score;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addProgressionEvent", new Action(__c__DisplayClass19_._AddProgressionEvent_b__0));
		}

		public static void AddDesignEvent(string eventId, IDictionary<string, object> fields = null)
		{
			GameAnalytics.__c__DisplayClass20_0 __c__DisplayClass20_ = new GameAnalytics.__c__DisplayClass20_0();
			__c__DisplayClass20_.eventId = eventId;
			__c__DisplayClass20_.fields = fields;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addDesignEvent", new Action(__c__DisplayClass20_._AddDesignEvent_b__0));
		}

		public static void AddDesignEvent(string eventId, double value)
		{
			GameAnalytics.__c__DisplayClass21_0 __c__DisplayClass21_ = new GameAnalytics.__c__DisplayClass21_0();
			__c__DisplayClass21_.eventId = eventId;
			__c__DisplayClass21_.value = value;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addDesignEvent", new Action(__c__DisplayClass21_._AddDesignEvent_b__0));
		}

		public static void AddErrorEvent(EGAErrorSeverity severity, string message)
		{
			GameAnalytics.__c__DisplayClass22_0 __c__DisplayClass22_ = new GameAnalytics.__c__DisplayClass22_0();
			__c__DisplayClass22_.severity = severity;
			__c__DisplayClass22_.message = message;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GADevice.UpdateConnectionType();
			GAThreading.PerformTaskOnGAThread("addErrorEvent", new Action(__c__DisplayClass22_._AddErrorEvent_b__0));
		}

		public static void SetEnabledInfoLog(bool flag)
		{
			GameAnalytics.__c__DisplayClass23_0 __c__DisplayClass23_ = new GameAnalytics.__c__DisplayClass23_0();
			__c__DisplayClass23_.flag = flag;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setEnabledInfoLog", new Action(__c__DisplayClass23_._SetEnabledInfoLog_b__0));
		}

		public static void SetEnabledVerboseLog(bool flag)
		{
			GameAnalytics.__c__DisplayClass24_0 __c__DisplayClass24_ = new GameAnalytics.__c__DisplayClass24_0();
			__c__DisplayClass24_.flag = flag;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setEnabledVerboseLog", new Action(__c__DisplayClass24_._SetEnabledVerboseLog_b__0));
		}

		public static void SetEnabledManualSessionHandling(bool flag)
		{
			GameAnalytics.__c__DisplayClass25_0 __c__DisplayClass25_ = new GameAnalytics.__c__DisplayClass25_0();
			__c__DisplayClass25_.flag = flag;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setEnabledManualSessionHandling", new Action(__c__DisplayClass25_._SetEnabledManualSessionHandling_b__0));
		}

		public static void SetEnabledEventSubmission(bool flag)
		{
			GameAnalytics.__c__DisplayClass26_0 __c__DisplayClass26_ = new GameAnalytics.__c__DisplayClass26_0();
			__c__DisplayClass26_.flag = flag;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setEnabledEventSubmission", new Action(__c__DisplayClass26_._SetEnabledEventSubmission_b__0));
		}

		public static void SetCustomDimension01(string dimension)
		{
			GameAnalytics.__c__DisplayClass27_0 __c__DisplayClass27_ = new GameAnalytics.__c__DisplayClass27_0();
			__c__DisplayClass27_.dimension = dimension;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setCustomDimension01", new Action(__c__DisplayClass27_._SetCustomDimension01_b__0));
		}

		public static void SetCustomDimension02(string dimension)
		{
			GameAnalytics.__c__DisplayClass28_0 __c__DisplayClass28_ = new GameAnalytics.__c__DisplayClass28_0();
			__c__DisplayClass28_.dimension = dimension;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setCustomDimension02", new Action(__c__DisplayClass28_._SetCustomDimension02_b__0));
		}

		public static void SetCustomDimension03(string dimension)
		{
			GameAnalytics.__c__DisplayClass29_0 __c__DisplayClass29_ = new GameAnalytics.__c__DisplayClass29_0();
			__c__DisplayClass29_.dimension = dimension;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setCustomDimension03", new Action(__c__DisplayClass29_._SetCustomDimension03_b__0));
		}

		public static void SetFacebookId(string facebookId)
		{
			GameAnalytics.__c__DisplayClass30_0 __c__DisplayClass30_ = new GameAnalytics.__c__DisplayClass30_0();
			__c__DisplayClass30_.facebookId = facebookId;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setFacebookId", new Action(__c__DisplayClass30_._SetFacebookId_b__0));
		}

		public static void SetGender(EGAGender gender)
		{
			GameAnalytics.__c__DisplayClass31_0 __c__DisplayClass31_ = new GameAnalytics.__c__DisplayClass31_0();
			__c__DisplayClass31_.gender = gender;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setGender", new Action(__c__DisplayClass31_._SetGender_b__0));
		}

		public static void SetBirthYear(int birthYear)
		{
			GameAnalytics.__c__DisplayClass32_0 __c__DisplayClass32_ = new GameAnalytics.__c__DisplayClass32_0();
			__c__DisplayClass32_.birthYear = birthYear;
			if (GameAnalytics._endThread)
			{
				return;
			}
			GAThreading.PerformTaskOnGAThread("setBirthYear", new Action(__c__DisplayClass32_._SetBirthYear_b__0));
		}

		public static void StartSession()
		{
			if (GameAnalytics._endThread)
			{
				return;
			}
			string arg_2C_0 = "startSession";
			Action arg_2C_1;
			if ((arg_2C_1 = GameAnalytics.__c.__9__33_0) == null)
			{
				arg_2C_1 = (GameAnalytics.__c.__9__33_0 = new Action(GameAnalytics.__c.__9._StartSession_b__33_0));
			}
			GAThreading.PerformTaskOnGAThread(arg_2C_0, arg_2C_1);
		}

		public static void EndSession()
		{
			GameAnalytics.OnSuspend();
		}

		public static void OnResume()
		{
			if (GameAnalytics._endThread)
			{
				return;
			}
			GALogger.D("OnResume() called");
			string arg_36_0 = "onResume";
			Action arg_36_1;
			if ((arg_36_1 = GameAnalytics.__c.__9__35_0) == null)
			{
				arg_36_1 = (GameAnalytics.__c.__9__35_0 = new Action(GameAnalytics.__c.__9._OnResume_b__35_0));
			}
			GAThreading.PerformTaskOnGAThread(arg_36_0, arg_36_1);
		}

		public static void OnSuspend()
		{
			if (GameAnalytics._endThread)
			{
				return;
			}
			GALogger.D("OnSuspend() called");
			string arg_36_0 = "onSuspend";
			Action arg_36_1;
			if ((arg_36_1 = GameAnalytics.__c.__9__36_0) == null)
			{
				arg_36_1 = (GameAnalytics.__c.__9__36_0 = new Action(GameAnalytics.__c.__9._OnSuspend_b__36_0));
			}
			GAThreading.PerformTaskOnGAThread(arg_36_0, arg_36_1);
		}

		public static void OnQuit()
		{
			if (GameAnalytics._endThread)
			{
				return;
			}
			GALogger.D("OnQuit() called");
			string arg_36_0 = "onQuit";
			Action arg_36_1;
			if ((arg_36_1 = GameAnalytics.__c.__9__37_0) == null)
			{
				arg_36_1 = (GameAnalytics.__c.__9__37_0 = new Action(GameAnalytics.__c.__9._OnQuit_b__37_0));
			}
			GAThreading.PerformTaskOnGAThread(arg_36_0, arg_36_1);
		}

		public static string GetCommandCenterValueAsString(string key, string defaultValue = null)
		{
			return GAState.GetConfigurationStringValue(key, defaultValue);
		}

		public static bool IsCommandCenterReady()
		{
			return GAState.IsCommandCenterReady();
		}

		public static void AddCommandCenterListener(ICommandCenterListener listener)
		{
			GAState.AddCommandCenterListener(listener);
		}

		public static void RemoveCommandCenterListener(ICommandCenterListener listener)
		{
			GAState.RemoveCommandCenterListener(listener);
		}

		public static string GetConfigurationsAsString()
		{
			return GAState.GetConfigurationsAsString();
		}

		private static bool IsSdkReady(bool needsInitialized)
		{
			return GameAnalytics.IsSdkReady(needsInitialized, true);
		}

		private static bool IsSdkReady(bool needsInitialized, bool warn)
		{
			return GameAnalytics.IsSdkReady(needsInitialized, warn, "");
		}

		private static bool IsSdkReady(bool needsInitialized, bool warn, string message)
		{
			if (!string.IsNullOrEmpty(message))
			{
				message += ": ";
			}
			if (!GAStore.IsTableReady)
			{
				if (warn)
				{
					GALogger.W(message + "Datastore not initialized");
				}
				return false;
			}
			if (needsInitialized && !GAState.Initialized)
			{
				if (warn)
				{
					GALogger.W(message + "SDK is not initialized");
				}
				return false;
			}
			if (needsInitialized && !GAState.IsEnabled())
			{
				if (warn)
				{
					GALogger.W(message + "SDK is disabled");
				}
				return false;
			}
			if (needsInitialized && !GAState.SessionIsStarted())
			{
				if (warn)
				{
					GALogger.W(message + "Session has not started yet");
				}
				return false;
			}
			return true;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	public interface ICommandCenterListener
	{
		void OnCommandCenterUpdated();
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net
{
	internal class TimedBlock : IComparable<TimedBlock>
	{
		public readonly DateTime deadline;

		public readonly Action block;

		public readonly string blockName;

		public TimedBlock(DateTime deadline, Action block, string blockName)
		{
			this.deadline = deadline;
			this.block = block;
			this.blockName = blockName;
		}

		public int CompareTo(TimedBlock other)
		{
			return this.deadline.CompareTo(other.deadline);
		}

		public override string ToString()
		{
			return string.Concat(new object[]
			{
				"{TimedBlock: deadLine=",
				this.deadline.Ticks,
				", block=",
				this.blockName,
				"}"
			});
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Http;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.State;
using GameAnalyticsSDK.Net.Utilities;
using System;

namespace GameAnalyticsSDK.Net.Validators
{
	internal static class GAValidator
	{
		public static bool ValidateBusinessEvent(string currency, long amount, string cartType, string itemType, string itemId)
		{
			if (!GAValidator.ValidateCurrency(currency))
			{
				GALogger.W("Validation fail - business event - currency: Cannot be (null) and need to be A-Z, 3 characters and in the standard at openexchangerates.org. Failed currency: " + currency);
				return false;
			}
			if (amount < 0L)
			{
				GALogger.W("Validation fail - business event - amount. Cannot be less than 0. Failed amount: " + amount);
				return false;
			}
			if (!GAValidator.ValidateShortString(cartType, true))
			{
				GALogger.W("Validation fail - business event - cartType. Cannot be above 32 length. String: " + cartType);
				return false;
			}
			if (!GAValidator.ValidateEventPartLength(itemType, false))
			{
				GALogger.W("Validation fail - business event - itemType: Cannot be (null), empty or above 64 characters. String: " + itemType);
				return false;
			}
			if (!GAValidator.ValidateEventPartCharacters(itemType))
			{
				GALogger.W("Validation fail - business event - itemType: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + itemType);
				return false;
			}
			if (!GAValidator.ValidateEventPartLength(itemId, false))
			{
				GALogger.W("Validation fail - business event - itemId. Cannot be (null), empty or above 64 characters. String: " + itemId);
				return false;
			}
			if (!GAValidator.ValidateEventPartCharacters(itemId))
			{
				GALogger.W("Validation fail - business event - itemId: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + itemId);
				return false;
			}
			return true;
		}

		public static bool ValidateResourceEvent(EGAResourceFlowType flowType, string currency, long amount, string itemType, string itemId)
		{
			if (flowType == EGAResourceFlowType.Undefined)
			{
				GALogger.W("Validation fail - resource event - flowType: Invalid flow type.");
				return false;
			}
			if (string.IsNullOrEmpty(currency))
			{
				GALogger.W("Validation fail - resource event - currency: Cannot be (null)");
				return false;
			}
			if (!GAState.HasAvailableResourceCurrency(currency))
			{
				GALogger.W("Validation fail - resource event - currency: Not found in list of pre-defined available resource currencies. String: " + currency);
				return false;
			}
			if (amount <= 0L)
			{
				GALogger.W("Validation fail - resource event - amount: Float amount cannot be 0 or negative. Value: " + amount);
				return false;
			}
			if (string.IsNullOrEmpty(itemType))
			{
				GALogger.W("Validation fail - resource event - itemType: Cannot be (null)");
				return false;
			}
			if (!GAValidator.ValidateEventPartLength(itemType, false))
			{
				GALogger.W("Validation fail - resource event - itemType: Cannot be (null), empty or above 64 characters. String: " + itemType);
				return false;
			}
			if (!GAValidator.ValidateEventPartCharacters(itemType))
			{
				GALogger.W("Validation fail - resource event - itemType: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + itemType);
				return false;
			}
			if (!GAState.HasAvailableResourceItemType(itemType))
			{
				GALogger.W("Validation fail - resource event - itemType: Not found in list of pre-defined available resource itemTypes. String: " + itemType);
				return false;
			}
			if (!GAValidator.ValidateEventPartLength(itemId, false))
			{
				GALogger.W("Validation fail - resource event - itemId: Cannot be (null), empty or above 64 characters. String: " + itemId);
				return false;
			}
			if (!GAValidator.ValidateEventPartCharacters(itemId))
			{
				GALogger.W("Validation fail - resource event - itemId: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + itemId);
				return false;
			}
			return true;
		}

		public static bool ValidateProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03)
		{
			if (progressionStatus == EGAProgressionStatus.Undefined)
			{
				GALogger.W("Validation fail - progression event: Invalid progression status.");
				return false;
			}
			if (!string.IsNullOrEmpty(progression03) && string.IsNullOrEmpty(progression02) && !string.IsNullOrEmpty(progression01))
			{
				GALogger.W("Validation fail - progression event: 03 found but 01+02 are invalid. Progression must be set as either 01, 01+02 or 01+02+03.");
				return false;
			}
			if (!string.IsNullOrEmpty(progression02) && string.IsNullOrEmpty(progression01))
			{
				GALogger.W("Validation fail - progression event: 02 found but not 01. Progression must be set as either 01, 01+02 or 01+02+03");
				return false;
			}
			if (string.IsNullOrEmpty(progression01))
			{
				GALogger.W("Validation fail - progression event: progression01 not valid. Progressions must be set as either 01, 01+02 or 01+02+03");
				return false;
			}
			if (!GAValidator.ValidateEventPartLength(progression01, false))
			{
				GALogger.W("Validation fail - progression event - progression01: Cannot be (null), empty or above 64 characters. String: " + progression01);
				return false;
			}
			if (!GAValidator.ValidateEventPartCharacters(progression01))
			{
				GALogger.W("Validation fail - progression event - progression01: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + progression01);
				return false;
			}
			if (!string.IsNullOrEmpty(progression02))
			{
				if (!GAValidator.ValidateEventPartLength(progression02, true))
				{
					GALogger.W("Validation fail - progression event - progression02: Cannot be empty or above 64 characters. String: " + progression02);
					return false;
				}
				if (!GAValidator.ValidateEventPartCharacters(progression02))
				{
					GALogger.W("Validation fail - progression event - progression02: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + progression02);
					return false;
				}
			}
			if (!string.IsNullOrEmpty(progression03))
			{
				if (!GAValidator.ValidateEventPartLength(progression03, true))
				{
					GALogger.W("Validation fail - progression event - progression03: Cannot be empty or above 64 characters. String: " + progression03);
					return false;
				}
				if (!GAValidator.ValidateEventPartCharacters(progression03))
				{
					GALogger.W("Validation fail - progression event - progression03: Cannot contain other characters than A-z, 0-9, -_., ()!?. String: " + progression03);
					return false;
				}
			}
			return true;
		}

		public static bool ValidateDesignEvent(string eventId, double value)
		{
			if (!GAValidator.ValidateEventIdLength(eventId))
			{
				GALogger.W("Validation fail - design event - eventId: Cannot be (null) or empty. Only 5 event parts allowed seperated by :. Each part need to be 32 characters or less. String: " + eventId);
				return false;
			}
			if (!GAValidator.ValidateEventIdCharacters(eventId))
			{
				GALogger.W("Validation fail - design event - eventId: Non valid characters. Only allowed A-z, 0-9, -_., ()!?. String: " + eventId);
				return false;
			}
			return true;
		}

		public static bool ValidateErrorEvent(EGAErrorSeverity severity, string message)
		{
			if (severity == EGAErrorSeverity.Undefined)
			{
				GALogger.W("Validation fail - error event - severity: Severity was unsupported value.");
				return false;
			}
			if (!GAValidator.ValidateLongString(message, true))
			{
				GALogger.W("Validation fail - error event - message: Message cannot be above 8192 characters.");
				return false;
			}
			return true;
		}

		public static bool ValidateSdkErrorEvent(string gameKey, string gameSecret, EGASdkErrorType type)
		{
			if (!GAValidator.ValidateKeys(gameKey, gameSecret))
			{
				return false;
			}
			if (type == EGASdkErrorType.Undefined)
			{
				GALogger.W("Validation fail - sdk error event - type: Type was unsupported value.");
				return false;
			}
			return true;
		}

		public static bool ValidateKeys(string gameKey, string gameSecret)
		{
			return GAUtilities.StringMatch(gameKey, "^[A-z0-9]{32}$") && GAUtilities.StringMatch(gameSecret, "^[A-z0-9]{40}$");
		}

		public static bool ValidateCurrency(string currency)
		{
			return !string.IsNullOrEmpty(currency) && GAUtilities.StringMatch(currency, "^[A-Z]{3}$");
		}

		public static bool ValidateEventPartLength(string eventPart, bool allowNull)
		{
			return (allowNull && string.IsNullOrEmpty(eventPart)) || (!string.IsNullOrEmpty(eventPart) && eventPart.Length <= 64);
		}

		public static bool ValidateEventPartCharacters(string eventPart)
		{
			return GAUtilities.StringMatch(eventPart, "^[A-Za-z0-9\\s\\-_\\.\\(\\)\\!\\?]{1,64}$");
		}

		public static bool ValidateEventIdLength(string eventId)
		{
			return !string.IsNullOrEmpty(eventId) && GAUtilities.StringMatch(eventId, "^[^:]{1,64}(?::[^:]{1,64}){0,4}$");
		}

		public static bool ValidateEventIdCharacters(string eventId)
		{
			return !string.IsNullOrEmpty(eventId) && GAUtilities.StringMatch(eventId, "^[A-Za-z0-9\\s\\-_\\.\\(\\)\\!\\?]{1,64}(:[A-Za-z0-9\\s\\-_\\.\\(\\)\\!\\?]{1,64}){0,4}$");
		}

		public static JSONObject ValidateAndCleanInitRequestResponse(JSONNode initResponse)
		{
			if (initResponse == null)
			{
				GALogger.W("validateInitRequestResponse failed - no response dictionary.");
				return null;
			}
			JSONObject jSONObject = new JSONObject();
			try
			{
				jSONObject.Add("enabled", new JSONBool(!initResponse["enabled"].IsBoolean || initResponse["enabled"].AsBool));
			}
			catch (Exception)
			{
				GALogger.W("validateInitRequestResponse failed - invalid type in 'enabled' field.");
				JSONObject result = null;
				return result;
			}
			try
			{
				long num = initResponse["server_ts"].IsNumber ? initResponse["server_ts"].AsLong : (-1L);
				if (num > 0L)
				{
					jSONObject.Add("server_ts", new JSONNumber((double)num));
				}
			}
			catch (Exception ex)
			{
				GALogger.W(string.Concat(new object[]
				{
					"validateInitRequestResponse failed - invalid type in 'server_ts' field. type=",
					initResponse["server_ts"].GetType(),
					", value=",
					initResponse["server_ts"],
					", ",
					ex
				}));
				JSONObject result = null;
				return result;
			}
			try
			{
				jSONObject.Add("configurations", initResponse["configurations"].IsArray ? initResponse["configurations"].AsArray : new JSONArray());
			}
			catch (Exception ex2)
			{
				GALogger.W(string.Concat(new object[]
				{
					"validateInitRequestResponse failed - invalid type in 'configurations' field. type=",
					initResponse["configurations"].GetType(),
					", value=",
					initResponse["configurations"],
					", ",
					ex2
				}));
				JSONObject result = null;
				return result;
			}
			return jSONObject;
		}

		public static bool ValidateBuild(string build)
		{
			return GAValidator.ValidateShortString(build, false);
		}

		public static bool ValidateSdkWrapperVersion(string wrapperVersion)
		{
			return GAUtilities.StringMatch(wrapperVersion, "^(unity) [0-9]{0,5}(\\.[0-9]{0,5}){0,2}$");
		}

		public static bool ValidateEngineVersion(string engineVersion)
		{
			return engineVersion != null && GAUtilities.StringMatch(engineVersion, "^(unity) [0-9]{0,5}(\\.[0-9]{0,5}){0,2}$");
		}

		public static bool ValidateUserId(string uId)
		{
			if (!GAValidator.ValidateString(uId, false))
			{
				GALogger.W("Validation fail - user id: id cannot be (null), empty or above 64 characters.");
				return false;
			}
			return true;
		}

		public static bool ValidateShortString(string shortString, bool canBeEmpty)
		{
			return (canBeEmpty && string.IsNullOrEmpty(shortString)) || (!string.IsNullOrEmpty(shortString) && shortString.Length <= 32);
		}

		public static bool ValidateString(string s, bool canBeEmpty)
		{
			return (canBeEmpty && string.IsNullOrEmpty(s)) || (!string.IsNullOrEmpty(s) && s.Length <= 64);
		}

		public static bool ValidateLongString(string longString, bool canBeEmpty)
		{
			return (canBeEmpty && string.IsNullOrEmpty(longString)) || (!string.IsNullOrEmpty(longString) && longString.Length <= 8192);
		}

		public static bool ValidateConnectionType(string connectionType)
		{
			return GAUtilities.StringMatch(connectionType, "^(wwan|wifi|lan|offline)$");
		}

		public static bool ValidateCustomDimensions(params string[] customDimensions)
		{
			return GAValidator.ValidateArrayOfStrings(20L, 32L, false, "custom dimensions", customDimensions);
		}

		public static bool ValidateResourceCurrencies(params string[] resourceCurrencies)
		{
			if (!GAValidator.ValidateArrayOfStrings(20L, 64L, false, "resource currencies", resourceCurrencies))
			{
				return false;
			}
			for (int i = 0; i < resourceCurrencies.Length; i++)
			{
				string text = resourceCurrencies[i];
				if (!GAUtilities.StringMatch(text, "^[A-Za-z]+$"))
				{
					GALogger.W("resource currencies validation failed: a resource currency can only be A-Z, a-z. String was: " + text);
					return false;
				}
			}
			return true;
		}

		public static bool ValidateResourceItemTypes(params string[] resourceItemTypes)
		{
			if (!GAValidator.ValidateArrayOfStrings(20L, 32L, false, "resource item types", resourceItemTypes))
			{
				return false;
			}
			for (int i = 0; i < resourceItemTypes.Length; i++)
			{
				string text = resourceItemTypes[i];
				if (!GAValidator.ValidateEventPartCharacters(text))
				{
					GALogger.W("resource item types validation failed: a resource item type cannot contain other characters than A-z, 0-9, -_., ()!?. String was: " + text);
					return false;
				}
			}
			return true;
		}

		public static bool ValidateDimension01(string dimension01)
		{
			return string.IsNullOrEmpty(dimension01) || GAState.HasAvailableCustomDimensions01(dimension01);
		}

		public static bool ValidateDimension02(string dimension02)
		{
			return string.IsNullOrEmpty(dimension02) || GAState.HasAvailableCustomDimensions02(dimension02);
		}

		public static bool ValidateDimension03(string dimension03)
		{
			return string.IsNullOrEmpty(dimension03) || GAState.HasAvailableCustomDimensions03(dimension03);
		}

		public static bool ValidateArrayOfStrings(long maxCount, long maxStringLength, bool allowNoValues, string logTag, params string[] arrayOfStrings)
		{
			string text = logTag;
			if (string.IsNullOrEmpty(text))
			{
				text = "Array";
			}
			if (arrayOfStrings == null)
			{
				GALogger.W(text + " validation failed: array cannot be null. ");
				return false;
			}
			if (!allowNoValues && arrayOfStrings.Length == 0)
			{
				GALogger.W(text + " validation failed: array cannot be empty. ");
				return false;
			}
			if (maxCount > 0L && (long)arrayOfStrings.Length > maxCount)
			{
				GALogger.W(string.Concat(new object[]
				{
					text,
					" validation failed: array cannot exceed ",
					maxCount,
					" values. It has ",
					arrayOfStrings.Length,
					" values."
				}));
				return false;
			}
			for (int i = 0; i < arrayOfStrings.Length; i++)
			{
				string text2 = arrayOfStrings[i];
				int num = (text2 == null) ? 0 : text2.Length;
				if (num == 0)
				{
					GALogger.W(text + " validation failed: contained an empty string.");
					return false;
				}
				if (maxStringLength > 0L && (long)num > maxStringLength)
				{
					GALogger.W(string.Concat(new object[]
					{
						text,
						" validation failed: a string exceeded max allowed length (which is: ",
						maxStringLength,
						"). String was: ",
						text2
					}));
					return false;
				}
			}
			return true;
		}

		public static bool ValidateFacebookId(string facebookId)
		{
			if (!GAValidator.ValidateString(facebookId, false))
			{
				GALogger.W("Validation fail - facebook id: id cannot be (null), empty or above 64 characters.");
				return false;
			}
			return true;
		}

		public static bool ValidateGender(EGAGender gender)
		{
			if (gender == EGAGender.Undefined || (gender != EGAGender.Male && gender != EGAGender.Female))
			{
				GALogger.W("Validation fail - gender: Has to be 'male' or 'female'.");
				return false;
			}
			return true;
		}

		public static bool ValidateBirthyear(long birthYear)
		{
			if (birthYear < 0L || birthYear > 9999L)
			{
				GALogger.W("Validation fail - birthYear: Cannot be (null) or invalid range.");
				return false;
			}
			return true;
		}

		public static bool ValidateClientTs(long clientTs)
		{
			return clientTs >= -9223372036854775807L && clientTs <= 9223372036854775806L;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Utilities.Zip.GZip;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace GameAnalyticsSDK.Net.Utilities
{
	internal static class GAUtilities
	{
		private static readonly DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);

		public static byte[] GzipCompress(string data)
		{
			if (string.IsNullOrEmpty(data))
			{
				return new byte[0];
			}
			byte[] result;
			using (MemoryStream memoryStream = new MemoryStream())
			{
				using (GZipOutputStream gZipOutputStream = new GZipOutputStream(memoryStream))
				{
					using (MemoryStream memoryStream2 = new MemoryStream(Encoding.UTF8.GetBytes(data)))
					{
						memoryStream2.CopyTo(gZipOutputStream);
					}
				}
				result = memoryStream.ToArray();
			}
			return result;
		}

		public static string HmacWithKey(string key, byte[] data)
		{
			string result;
			using (HMACSHA256 hMACSHA = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
			{
				result = Convert.ToBase64String(hMACSHA.ComputeHash(data));
			}
			return result;
		}

		public static bool StringMatch(string s, string pattern)
		{
			return s != null && pattern != null && Regex.IsMatch(s, pattern);
		}

		public static string JoinStringArray(string[] v, string delimiter)
		{
			StringBuilder stringBuilder = new StringBuilder();
			int i = 0;
			int num = v.Length;
			while (i < num)
			{
				if (i > 0)
				{
					stringBuilder.Append(delimiter);
				}
				stringBuilder.Append(v[i]);
				i++;
			}
			return stringBuilder.ToString();
		}

		public static bool StringArrayContainsString(string[] array, string search)
		{
			if (array.Length == 0)
			{
				return false;
			}
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i].Equals(search))
				{
					return true;
				}
			}
			return false;
		}

		public static long TimeIntervalSince1970()
		{
			return (long)(DateTime.Now.ToUniversalTime() - GAUtilities.origin).TotalSeconds;
		}

		public static string ArrayOfObjectsToJsonString(List<JSONNode> arr)
		{
			JSONArray jSONArray = new JSONArray();
			foreach (JSONNode current in arr)
			{
				jSONArray.Add(current);
			}
			return jSONArray.ToString();
		}

		public static void CopyTo(this Stream input, Stream output)
		{
			byte[] array = new byte[16384];
			int count;
			while ((count = input.Read(array, 0, array.Length)) > 0)
			{
				output.Write(array, 0, count);
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities
{
	public enum JSONNodeType
	{
		Array = 1,
		Object,
		String,
		Number,
		NullValue,
		Boolean,
		None,
		Custom = 255
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities
{
	public enum JSONTextMode
	{
		Compact,
		Indent
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace GameAnalyticsSDK.Net.Utilities
{
	public abstract class JSONNode
	{
		public struct Enumerator
		{
			private enum Type
			{
				None,
				Array,
				Object
			}

			private JSONNode.Enumerator.Type type;

			private Dictionary<string, JSONNode>.Enumerator m_Object;

			private List<JSONNode>.Enumerator m_Array;

			public bool IsValid
			{
				get
				{
					return this.type > JSONNode.Enumerator.Type.None;
				}
			}

			public KeyValuePair<string, JSONNode> Current
			{
				get
				{
					if (this.type == JSONNode.Enumerator.Type.Array)
					{
						return new KeyValuePair<string, JSONNode>(string.Empty, this.m_Array.Current);
					}
					if (this.type == JSONNode.Enumerator.Type.Object)
					{
						return this.m_Object.Current;
					}
					return new KeyValuePair<string, JSONNode>(string.Empty, null);
				}
			}

			public Enumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
				this.type = JSONNode.Enumerator.Type.Array;
				this.m_Object = default(Dictionary<string, JSONNode>.Enumerator);
				this.m_Array = aArrayEnum;
			}

			public Enumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
				this.type = JSONNode.Enumerator.Type.Object;
				this.m_Object = aDictEnum;
				this.m_Array = default(List<JSONNode>.Enumerator);
			}

			public bool MoveNext()
			{
				if (this.type == JSONNode.Enumerator.Type.Array)
				{
					return this.m_Array.MoveNext();
				}
				return this.type == JSONNode.Enumerator.Type.Object && this.m_Object.MoveNext();
			}
		}

		public struct ValueEnumerator
		{
			private JSONNode.Enumerator m_Enumerator;

			public JSONNode Current
			{
				get
				{
					KeyValuePair<string, JSONNode> current = this.m_Enumerator.Current;
					return current.Value;
				}
			}

			public ValueEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
				this = new JSONNode.ValueEnumerator(new JSONNode.Enumerator(aArrayEnum));
			}

			public ValueEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
				this = new JSONNode.ValueEnumerator(new JSONNode.Enumerator(aDictEnum));
			}

			public ValueEnumerator(JSONNode.Enumerator aEnumerator)
			{
				this.m_Enumerator = aEnumerator;
			}

			public bool MoveNext()
			{
				return this.m_Enumerator.MoveNext();
			}

			public JSONNode.ValueEnumerator GetEnumerator()
			{
				return this;
			}
		}

		public struct KeyEnumerator
		{
			private JSONNode.Enumerator m_Enumerator;

			public string Current
			{
				get
				{
					KeyValuePair<string, JSONNode> current = this.m_Enumerator.Current;
					return current.Key;
				}
			}

			public KeyEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
				this = new JSONNode.KeyEnumerator(new JSONNode.Enumerator(aArrayEnum));
			}

			public KeyEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
				this = new JSONNode.KeyEnumerator(new JSONNode.Enumerator(aDictEnum));
			}

			public KeyEnumerator(JSONNode.Enumerator aEnumerator)
			{
				this.m_Enumerator = aEnumerator;
			}

			public bool MoveNext()
			{
				return this.m_Enumerator.MoveNext();
			}

			public JSONNode.KeyEnumerator GetEnumerator()
			{
				return this;
			}
		}

		public class LinqEnumerator : IEnumerator<KeyValuePair<string, JSONNode>>, IDisposable, IEnumerator, IEnumerable<KeyValuePair<string, JSONNode>>, IEnumerable
		{
			private JSONNode m_Node;

			private JSONNode.Enumerator m_Enumerator;

			public KeyValuePair<string, JSONNode> Current
			{
				get
				{
					return this.m_Enumerator.Current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.m_Enumerator.Current;
				}
			}

			internal LinqEnumerator(JSONNode aNode)
			{
				this.m_Node = aNode;
				if (this.m_Node != null)
				{
					this.m_Enumerator = this.m_Node.GetEnumerator();
				}
			}

			public bool MoveNext()
			{
				return this.m_Enumerator.MoveNext();
			}

			public void Dispose()
			{
				this.m_Node = null;
				this.m_Enumerator = default(JSONNode.Enumerator);
			}

			public IEnumerator<KeyValuePair<string, JSONNode>> GetEnumerator()
			{
				return new JSONNode.LinqEnumerator(this.m_Node);
			}

			public void Reset()
			{
				if (this.m_Node != null)
				{
					this.m_Enumerator = this.m_Node.GetEnumerator();
				}
			}

			IEnumerator IEnumerable.GetEnumerator()
			{
				return new JSONNode.LinqEnumerator(this.m_Node);
			}
		}

		private sealed class _get_Children_d__40 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IDisposable, IEnumerator
		{
			private int __1__state;

			private JSONNode __2__current;

			private int __l__initialThreadId;

			JSONNode IEnumerator<JSONNode>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _get_Children_d__40(int __1__state)
			{
				this.__1__state = __1__state;
				this.__l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
			}

			void IDisposable.Dispose()
			{
			}

			bool IEnumerator.MoveNext()
			{
				int num = this.__1__state;
				if (num != 0)
				{
					return false;
				}
				this.__1__state = -1;
				return false;
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}

			IEnumerator<JSONNode> IEnumerable<JSONNode>.GetEnumerator()
			{
				JSONNode._get_Children_d__40 result;
				if (this.__1__state == -2 && this.__l__initialThreadId == Thread.CurrentThread.ManagedThreadId)
				{
					this.__1__state = 0;
					result = this;
				}
				else
				{
					result = new JSONNode._get_Children_d__40(0);
				}
				return result;
			}

			IEnumerator IEnumerable.GetEnumerator()
			{
				return this.System.Collections.Generic.IEnumerable<GameAnalyticsSDK.Net.Utilities.JSONNode>.GetEnumerator();
			}
		}

		private sealed class _get_DeepChildren_d__42 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IDisposable, IEnumerator
		{
			private int __1__state;

			private JSONNode __2__current;

			private int __l__initialThreadId;

			public JSONNode __4__this;

			private IEnumerator<JSONNode> __7__wrap1;

			private IEnumerator<JSONNode> __7__wrap2;

			JSONNode IEnumerator<JSONNode>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _get_DeepChildren_d__42(int __1__state)
			{
				this.__1__state = __1__state;
				this.__l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
			}

			void IDisposable.Dispose()
			{
				int num = this.__1__state;
				if (num == -4 || num == -3 || num == 1)
				{
					try
					{
						if (num == -4 || num == 1)
						{
							try
							{
							}
							finally
							{
								this.__m__Finally2();
							}
						}
					}
					finally
					{
						this.__m__Finally1();
					}
				}
			}

			bool IEnumerator.MoveNext()
			{
				bool result;
				try
				{
					int num = this.__1__state;
					if (num == 0)
					{
						this.__1__state = -1;
						this.__7__wrap1 = this.__4__this.Children.GetEnumerator();
						this.__1__state = -3;
						goto IL_A3;
					}
					if (num != 1)
					{
						result = false;
						return result;
					}
					this.__1__state = -4;
					IL_89:
					if (this.__7__wrap2.MoveNext())
					{
						JSONNode current = this.__7__wrap2.Current;
						this.__2__current = current;
						this.__1__state = 1;
						result = true;
						return result;
					}
					this.__m__Finally2();
					this.__7__wrap2 = null;
					IL_A3:
					if (this.__7__wrap1.MoveNext())
					{
						JSONNode current2 = this.__7__wrap1.Current;
						this.__7__wrap2 = current2.DeepChildren.GetEnumerator();
						this.__1__state = -4;
						goto IL_89;
					}
					this.__m__Finally1();
					this.__7__wrap1 = null;
					result = false;
				}
				catch
				{
					this.System.IDisposable.Dispose();
					throw;
				}
				return result;
			}

			private void __m__Finally1()
			{
				this.__1__state = -1;
				if (this.__7__wrap1 != null)
				{
					this.__7__wrap1.Dispose();
				}
			}

			private void __m__Finally2()
			{
				this.__1__state = -3;
				if (this.__7__wrap2 != null)
				{
					this.__7__wrap2.Dispose();
				}
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}

			IEnumerator<JSONNode> IEnumerable<JSONNode>.GetEnumerator()
			{
				JSONNode._get_DeepChildren_d__42 _get_DeepChildren_d__;
				if (this.__1__state == -2 && this.__l__initialThreadId == Thread.CurrentThread.ManagedThreadId)
				{
					this.__1__state = 0;
					_get_DeepChildren_d__ = this;
				}
				else
				{
					_get_DeepChildren_d__ = new JSONNode._get_DeepChildren_d__42(0);
					_get_DeepChildren_d__.__4__this = this.__4__this;
				}
				return _get_DeepChildren_d__;
			}

			IEnumerator IEnumerable.GetEnumerator()
			{
				return this.System.Collections.Generic.IEnumerable<GameAnalyticsSDK.Net.Utilities.JSONNode>.GetEnumerator();
			}
		}

		public static bool forceASCII;

		public static bool longAsString;

		[ThreadStatic]
		private static StringBuilder m_EscapeBuilder;

		public abstract JSONNodeType Tag
		{
			get;
		}

		public virtual JSONNode this[int aIndex]
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		public virtual JSONNode this[string aKey]
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		public virtual string Value
		{
			get
			{
				return "";
			}
			set
			{
			}
		}

		public virtual int Count
		{
			get
			{
				return 0;
			}
		}

		public virtual bool IsNumber
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsString
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsBoolean
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsNull
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsArray
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsObject
		{
			get
			{
				return false;
			}
		}

		public virtual bool Inline
		{
			get
			{
				return false;
			}
			set
			{
			}
		}

		public virtual IEnumerable<JSONNode> Children
		{
			get
			{
				return new JSONNode._get_Children_d__40(-2);
			}
		}

		public IEnumerable<JSONNode> DeepChildren
		{
			get
			{
				JSONNode._get_DeepChildren_d__42 expr_07 = new JSONNode._get_DeepChildren_d__42(-2);
				expr_07.__4__this = this;
				return expr_07;
			}
		}

		public IEnumerable<KeyValuePair<string, JSONNode>> Linq
		{
			get
			{
				return new JSONNode.LinqEnumerator(this);
			}
		}

		public JSONNode.KeyEnumerator Keys
		{
			get
			{
				return new JSONNode.KeyEnumerator(this.GetEnumerator());
			}
		}

		public JSONNode.ValueEnumerator Values
		{
			get
			{
				return new JSONNode.ValueEnumerator(this.GetEnumerator());
			}
		}

		public virtual double AsDouble
		{
			get
			{
				double result = 0.0;
				if (double.TryParse(this.Value, NumberStyles.Float, CultureInfo.InvariantCulture, out result))
				{
					return result;
				}
				return 0.0;
			}
			set
			{
				this.Value = value.ToString(CultureInfo.InvariantCulture);
			}
		}

		public virtual int AsInt
		{
			get
			{
				return (int)this.AsDouble;
			}
			set
			{
				this.AsDouble = (double)value;
			}
		}

		public virtual float AsFloat
		{
			get
			{
				return (float)this.AsDouble;
			}
			set
			{
				this.AsDouble = (double)value;
			}
		}

		public virtual bool AsBool
		{
			get
			{
				bool result = false;
				if (bool.TryParse(this.Value, out result))
				{
					return result;
				}
				return !string.IsNullOrEmpty(this.Value);
			}
			set
			{
				this.Value = (value ? "true" : "false");
			}
		}

		public virtual long AsLong
		{
			get
			{
				long result = 0L;
				if (long.TryParse(this.Value, out result))
				{
					return result;
				}
				return 0L;
			}
			set
			{
				this.Value = value.ToString();
			}
		}

		public virtual JSONArray AsArray
		{
			get
			{
				return this as JSONArray;
			}
		}

		public virtual JSONObject AsObject
		{
			get
			{
				return this as JSONObject;
			}
		}

		internal static StringBuilder EscapeBuilder
		{
			get
			{
				if (JSONNode.m_EscapeBuilder == null)
				{
					JSONNode.m_EscapeBuilder = new StringBuilder();
				}
				return JSONNode.m_EscapeBuilder;
			}
		}

		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		public virtual void Add(JSONNode aItem)
		{
			this.Add("", aItem);
		}

		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		public virtual JSONNode Remove(JSONNode aNode)
		{
			return aNode;
		}

		public override string ToString()
		{
			StringBuilder stringBuilder = new StringBuilder();
			this.WriteToStringBuilder(stringBuilder, 0, 0, JSONTextMode.Compact);
			return stringBuilder.ToString();
		}

		public virtual string ToString(int aIndent)
		{
			StringBuilder stringBuilder = new StringBuilder();
			this.WriteToStringBuilder(stringBuilder, 0, aIndent, JSONTextMode.Indent);
			return stringBuilder.ToString();
		}

		internal abstract void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);

		public abstract JSONNode.Enumerator GetEnumerator();

		public static implicit operator JSONNode(string s)
		{
			return new JSONString(s);
		}

		public static implicit operator string(JSONNode d)
		{
			if (!(d == null))
			{
				return d.Value;
			}
			return null;
		}

		public static implicit operator JSONNode(double n)
		{
			return new JSONNumber(n);
		}

		public static implicit operator double(JSONNode d)
		{
			if (!(d == null))
			{
				return d.AsDouble;
			}
			return 0.0;
		}

		public static implicit operator JSONNode(float n)
		{
			return new JSONNumber((double)n);
		}

		public static implicit operator float(JSONNode d)
		{
			if (!(d == null))
			{
				return d.AsFloat;
			}
			return 0f;
		}

		public static implicit operator JSONNode(int n)
		{
			return new JSONNumber((double)n);
		}

		public static implicit operator int(JSONNode d)
		{
			if (!(d == null))
			{
				return d.AsInt;
			}
			return 0;
		}

		public static implicit operator JSONNode(long n)
		{
			if (JSONNode.longAsString)
			{
				return new JSONString(n.ToString());
			}
			return new JSONNumber((double)n);
		}

		public static implicit operator long(JSONNode d)
		{
			if (!(d == null))
			{
				return d.AsLong;
			}
			return 0L;
		}

		public static implicit operator JSONNode(bool b)
		{
			return new JSONBool(b);
		}

		public static implicit operator bool(JSONNode d)
		{
			return !(d == null) && d.AsBool;
		}

		public static implicit operator JSONNode(KeyValuePair<string, JSONNode> aKeyValue)
		{
			return aKeyValue.Value;
		}

		public static bool operator ==(JSONNode a, object b)
		{
			if (a == b)
			{
				return true;
			}
			bool flag = a is JSONNull || a == null || a is JSONLazyCreator;
			bool flag2 = b is JSONNull || b == null || b is JSONLazyCreator;
			return (flag & flag2) || (!flag && a.Equals(b));
		}

		public static bool operator !=(JSONNode a, object b)
		{
			return !(a == b);
		}

		public override bool Equals(object obj)
		{
			return this == obj;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		internal static string Escape(string aText)
		{
			StringBuilder escapeBuilder = JSONNode.EscapeBuilder;
			escapeBuilder.Length = 0;
			if (escapeBuilder.Capacity < aText.Length + aText.Length / 10)
			{
				escapeBuilder.Capacity = aText.Length + aText.Length / 10;
			}
			int i = 0;
			while (i < aText.Length)
			{
				char c = aText[i];
				switch (c)
				{
				case '\b':
					escapeBuilder.Append("\\b");
					break;
				case '\t':
					escapeBuilder.Append("\\t");
					break;
				case '\n':
					escapeBuilder.Append("\\n");
					break;
				case '\v':
					goto IL_E2;
				case '\f':
					escapeBuilder.Append("\\f");
					break;
				case '\r':
					escapeBuilder.Append("\\r");
					break;
				default:
					if (c != '"')
					{
						if (c != '\\')
						{
							goto IL_E2;
						}
						escapeBuilder.Append("\\\\");
					}
					else
					{
						escapeBuilder.Append("\\\"");
					}
					break;
				}
				IL_121:
				i++;
				continue;
				IL_E2:
				if (c < ' ' || (JSONNode.forceASCII && c > '\u007f'))
				{
					ushort num = (ushort)c;
					escapeBuilder.Append("\\u").Append(num.ToString("X4"));
					goto IL_121;
				}
				escapeBuilder.Append(c);
				goto IL_121;
			}
			string result = escapeBuilder.ToString();
			escapeBuilder.Length = 0;
			return result;
		}

		private static JSONNode ParseElement(string token, bool quoted)
		{
			if (quoted)
			{
				return token;
			}
			string a = token.ToLower();
			if (a == "false" || a == "true")
			{
				return a == "true";
			}
			if (a == "null")
			{
				return JSONNull.CreateOrGet();
			}
			double n;
			if (double.TryParse(token, NumberStyles.Float, CultureInfo.InvariantCulture, out n))
			{
				return n;
			}
			return token;
		}

		public static JSONNode Parse(string aJSON)
		{
			Stack<JSONNode> stack = new Stack<JSONNode>();
			JSONNode jSONNode = null;
			int i = 0;
			StringBuilder stringBuilder = new StringBuilder();
			string aKey = "";
			bool flag = false;
			bool flag2 = false;
			while (i < aJSON.Length)
			{
				char c = aJSON[i];
				if (c <= ',')
				{
					if (c <= ' ')
					{
						switch (c)
						{
						case '\t':
							break;
						case '\n':
						case '\r':
							goto IL_348;
						case '\v':
						case '\f':
							goto IL_33A;
						default:
							if (c != ' ')
							{
								goto IL_33A;
							}
							break;
						}
						if (flag)
						{
							stringBuilder.Append(aJSON[i]);
						}
					}
					else if (c != '"')
					{
						if (c != ',')
						{
							goto IL_33A;
						}
						if (flag)
						{
							stringBuilder.Append(aJSON[i]);
						}
						else
						{
							if (stringBuilder.Length > 0 | flag2)
							{
								jSONNode.Add(aKey, JSONNode.ParseElement(stringBuilder.ToString(), flag2));
							}
							aKey = "";
							stringBuilder.Length = 0;
							flag2 = false;
						}
					}
					else
					{
						flag = !flag;
						flag2 |= flag;
					}
				}
				else
				{
					if (c <= ']')
					{
						if (c != ':')
						{
							switch (c)
							{
							case '[':
								if (flag)
								{
									stringBuilder.Append(aJSON[i]);
									goto IL_348;
								}
								stack.Push(new JSONArray());
								if (jSONNode != null)
								{
									jSONNode.Add(aKey, stack.Peek());
								}
								aKey = "";
								stringBuilder.Length = 0;
								jSONNode = stack.Peek();
								goto IL_348;
							case '\\':
								i++;
								if (flag)
								{
									char c2 = aJSON[i];
									if (c2 <= 'f')
									{
										if (c2 == 'b')
										{
											stringBuilder.Append('\b');
											goto IL_348;
										}
										if (c2 == 'f')
										{
											stringBuilder.Append('\f');
											goto IL_348;
										}
									}
									else
									{
										if (c2 == 'n')
										{
											stringBuilder.Append('\n');
											goto IL_348;
										}
										switch (c2)
										{
										case 'r':
											stringBuilder.Append('\r');
											goto IL_348;
										case 't':
											stringBuilder.Append('\t');
											goto IL_348;
										case 'u':
										{
											string s = aJSON.Substring(i + 1, 4);
											stringBuilder.Append((char)int.Parse(s, NumberStyles.AllowHexSpecifier));
											i += 4;
											goto IL_348;
										}
										}
									}
									stringBuilder.Append(c2);
									goto IL_348;
								}
								goto IL_348;
							case ']':
								break;
							default:
								goto IL_33A;
							}
						}
						else
						{
							if (flag)
							{
								stringBuilder.Append(aJSON[i]);
								goto IL_348;
							}
							aKey = stringBuilder.ToString();
							stringBuilder.Length = 0;
							flag2 = false;
							goto IL_348;
						}
					}
					else if (c != '{')
					{
						if (c != '}')
						{
							goto IL_33A;
						}
					}
					else
					{
						if (flag)
						{
							stringBuilder.Append(aJSON[i]);
							goto IL_348;
						}
						stack.Push(new JSONObject());
						if (jSONNode != null)
						{
							jSONNode.Add(aKey, stack.Peek());
						}
						aKey = "";
						stringBuilder.Length = 0;
						jSONNode = stack.Peek();
						goto IL_348;
					}
					if (flag)
					{
						stringBuilder.Append(aJSON[i]);
					}
					else
					{
						if (stack.Count == 0)
						{
							throw new Exception("JSON Parse: Too many closing brackets");
						}
						stack.Pop();
						if (stringBuilder.Length > 0 | flag2)
						{
							jSONNode.Add(aKey, JSONNode.ParseElement(stringBuilder.ToString(), flag2));
						}
						flag2 = false;
						aKey = "";
						stringBuilder.Length = 0;
						if (stack.Count > 0)
						{
							jSONNode = stack.Peek();
						}
					}
				}
				IL_348:
				i++;
				continue;
				IL_33A:
				stringBuilder.Append(aJSON[i]);
				goto IL_348;
			}
			if (flag)
			{
				throw new Exception("JSON Parse: Quotation marks seems to be messed up.");
			}
			if (jSONNode == null)
			{
				return JSONNode.ParseElement(stringBuilder.ToString(), flag2);
			}
			return jSONNode;
		}

		public abstract void SerializeBinary(BinaryWriter aWriter);

		public void SaveToBinaryStream(Stream aData)
		{
			BinaryWriter aWriter = new BinaryWriter(aData);
			this.SerializeBinary(aWriter);
		}

		public void SaveToCompressedStream(Stream aData)
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public void SaveToCompressedFile(string aFileName)
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public string SaveToCompressedBase64()
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public string SaveToBinaryBase64()
		{
			string result;
			using (MemoryStream memoryStream = new MemoryStream())
			{
				this.SaveToBinaryStream(memoryStream);
				memoryStream.Position = 0L;
				result = Convert.ToBase64String(memoryStream.ToArray());
			}
			return result;
		}

		public static JSONNode DeserializeBinary(BinaryReader aReader)
		{
			JSONNodeType jSONNodeType = (JSONNodeType)aReader.ReadByte();
			switch (jSONNodeType)
			{
			case JSONNodeType.Array:
			{
				int num = aReader.ReadInt32();
				JSONArray jSONArray = new JSONArray();
				for (int i = 0; i < num; i++)
				{
					jSONArray.Add(JSONNode.DeserializeBinary(aReader));
				}
				return jSONArray;
			}
			case JSONNodeType.Object:
			{
				int num2 = aReader.ReadInt32();
				JSONObject jSONObject = new JSONObject();
				for (int j = 0; j < num2; j++)
				{
					string aKey = aReader.ReadString();
					JSONNode aItem = JSONNode.DeserializeBinary(aReader);
					jSONObject.Add(aKey, aItem);
				}
				return jSONObject;
			}
			case JSONNodeType.String:
				return new JSONString(aReader.ReadString());
			case JSONNodeType.Number:
				return new JSONNumber(aReader.ReadDouble());
			case JSONNodeType.NullValue:
				return JSONNull.CreateOrGet();
			case JSONNodeType.Boolean:
				return new JSONBool(aReader.ReadBoolean());
			default:
				throw new Exception("Error deserializing JSON. Unknown tag: " + jSONNodeType);
			}
		}

		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			throw new Exception("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");
		}

		public static JSONNode LoadFromBinaryStream(Stream aData)
		{
			JSONNode result;
			using (BinaryReader binaryReader = new BinaryReader(aData))
			{
				result = JSONNode.DeserializeBinary(binaryReader);
			}
			return result;
		}

		public static JSONNode LoadFromBinaryBase64(string aBase64)
		{
			return JSONNode.LoadFromBinaryStream(new MemoryStream(Convert.FromBase64String(aBase64))
			{
				Position = 0L
			});
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONArray : JSONNode
	{
		private sealed class _get_Children_d__22 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IDisposable, IEnumerator
		{
			private int __1__state;

			private JSONNode __2__current;

			private int __l__initialThreadId;

			public JSONArray __4__this;

			private List<JSONNode>.Enumerator __7__wrap1;

			JSONNode IEnumerator<JSONNode>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _get_Children_d__22(int __1__state)
			{
				this.__1__state = __1__state;
				this.__l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
			}

			void IDisposable.Dispose()
			{
				int num = this.__1__state;
				if (num == -3 || num == 1)
				{
					try
					{
					}
					finally
					{
						this.__m__Finally1();
					}
				}
			}

			bool IEnumerator.MoveNext()
			{
				bool result;
				try
				{
					int num = this.__1__state;
					if (num != 0)
					{
						if (num != 1)
						{
							result = false;
							return result;
						}
						this.__1__state = -3;
					}
					else
					{
						this.__1__state = -1;
						this.__7__wrap1 = this.__4__this.m_List.GetEnumerator();
						this.__1__state = -3;
					}
					if (!this.__7__wrap1.MoveNext())
					{
						this.__m__Finally1();
						this.__7__wrap1 = default(List<JSONNode>.Enumerator);
						result = false;
					}
					else
					{
						JSONNode current = this.__7__wrap1.Current;
						this.__2__current = current;
						this.__1__state = 1;
						result = true;
					}
				}
				catch
				{
					this.System.IDisposable.Dispose();
					throw;
				}
				return result;
			}

			private void __m__Finally1()
			{
				this.__1__state = -1;
				((IDisposable)this.__7__wrap1).Dispose();
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}

			IEnumerator<JSONNode> IEnumerable<JSONNode>.GetEnumerator()
			{
				JSONArray._get_Children_d__22 _get_Children_d__;
				if (this.__1__state == -2 && this.__l__initialThreadId == Thread.CurrentThread.ManagedThreadId)
				{
					this.__1__state = 0;
					_get_Children_d__ = this;
				}
				else
				{
					_get_Children_d__ = new JSONArray._get_Children_d__22(0);
					_get_Children_d__.__4__this = this.__4__this;
				}
				return _get_Children_d__;
			}

			IEnumerator IEnumerable.GetEnumerator()
			{
				return this.System.Collections.Generic.IEnumerable<GameAnalyticsSDK.Net.Utilities.JSONNode>.GetEnumerator();
			}
		}

		private List<JSONNode> m_List = new List<JSONNode>();

		private bool inline;

		public override bool Inline
		{
			get
			{
				return this.inline;
			}
			set
			{
				this.inline = value;
			}
		}

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.Array;
			}
		}

		public override bool IsArray
		{
			get
			{
				return true;
			}
		}

		public override JSONNode this[int aIndex]
		{
			get
			{
				if (aIndex < 0 || aIndex >= this.m_List.Count)
				{
					return new JSONLazyCreator(this);
				}
				return this.m_List[aIndex];
			}
			set
			{
				if (value == null)
				{
					value = JSONNull.CreateOrGet();
				}
				if (aIndex < 0 || aIndex >= this.m_List.Count)
				{
					this.m_List.Add(value);
					return;
				}
				this.m_List[aIndex] = value;
			}
		}

		public override JSONNode this[string aKey]
		{
			get
			{
				return new JSONLazyCreator(this);
			}
			set
			{
				if (value == null)
				{
					value = JSONNull.CreateOrGet();
				}
				this.m_List.Add(value);
			}
		}

		public override int Count
		{
			get
			{
				return this.m_List.Count;
			}
		}

		public override IEnumerable<JSONNode> Children
		{
			get
			{
				JSONArray._get_Children_d__22 expr_07 = new JSONArray._get_Children_d__22(-2);
				expr_07.__4__this = this;
				return expr_07;
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return new JSONNode.Enumerator(this.m_List.GetEnumerator());
		}

		public override void Add(string aKey, JSONNode aItem)
		{
			if (aItem == null)
			{
				aItem = JSONNull.CreateOrGet();
			}
			this.m_List.Add(aItem);
		}

		public override JSONNode Remove(int aIndex)
		{
			if (aIndex < 0 || aIndex >= this.m_List.Count)
			{
				return null;
			}
			JSONNode arg_2C_0 = this.m_List[aIndex];
			this.m_List.RemoveAt(aIndex);
			return arg_2C_0;
		}

		public override JSONNode Remove(JSONNode aNode)
		{
			this.m_List.Remove(aNode);
			return aNode;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append('[');
			int count = this.m_List.Count;
			if (this.inline)
			{
				aMode = JSONTextMode.Compact;
			}
			for (int i = 0; i < count; i++)
			{
				if (i > 0)
				{
					aSB.Append(',');
				}
				if (aMode == JSONTextMode.Indent)
				{
					aSB.AppendLine();
				}
				if (aMode == JSONTextMode.Indent)
				{
					aSB.Append(' ', aIndent + aIndentInc);
				}
				this.m_List[i].WriteToStringBuilder(aSB, aIndent + aIndentInc, aIndentInc, aMode);
			}
			if (aMode == JSONTextMode.Indent)
			{
				aSB.AppendLine().Append(' ', aIndent);
			}
			aSB.Append(']');
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(1);
			aWriter.Write(this.m_List.Count);
			for (int i = 0; i < this.m_List.Count; i++)
			{
				this.m_List[i].SerializeBinary(aWriter);
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONObject : JSONNode
	{
		private sealed class __c__DisplayClass21_0
		{
			public JSONNode aNode;

			internal bool _Remove_b__0(KeyValuePair<string, JSONNode> k)
			{
				return k.Value == this.aNode;
			}
		}

		private sealed class _get_Children_d__23 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IDisposable, IEnumerator
		{
			private int __1__state;

			private JSONNode __2__current;

			private int __l__initialThreadId;

			public JSONObject __4__this;

			private Dictionary<string, JSONNode>.Enumerator __7__wrap1;

			JSONNode IEnumerator<JSONNode>.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			object IEnumerator.Current
			{
				get
				{
					return this.__2__current;
				}
			}

			public _get_Children_d__23(int __1__state)
			{
				this.__1__state = __1__state;
				this.__l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
			}

			void IDisposable.Dispose()
			{
				int num = this.__1__state;
				if (num == -3 || num == 1)
				{
					try
					{
					}
					finally
					{
						this.__m__Finally1();
					}
				}
			}

			bool IEnumerator.MoveNext()
			{
				bool result;
				try
				{
					int num = this.__1__state;
					if (num != 0)
					{
						if (num != 1)
						{
							result = false;
							return result;
						}
						this.__1__state = -3;
					}
					else
					{
						this.__1__state = -1;
						this.__7__wrap1 = this.__4__this.m_Dict.GetEnumerator();
						this.__1__state = -3;
					}
					if (!this.__7__wrap1.MoveNext())
					{
						this.__m__Finally1();
						this.__7__wrap1 = default(Dictionary<string, JSONNode>.Enumerator);
						result = false;
					}
					else
					{
						KeyValuePair<string, JSONNode> current = this.__7__wrap1.Current;
						this.__2__current = current.Value;
						this.__1__state = 1;
						result = true;
					}
				}
				catch
				{
					this.System.IDisposable.Dispose();
					throw;
				}
				return result;
			}

			private void __m__Finally1()
			{
				this.__1__state = -1;
				((IDisposable)this.__7__wrap1).Dispose();
			}

			void IEnumerator.Reset()
			{
				throw new NotSupportedException();
			}

			IEnumerator<JSONNode> IEnumerable<JSONNode>.GetEnumerator()
			{
				JSONObject._get_Children_d__23 _get_Children_d__;
				if (this.__1__state == -2 && this.__l__initialThreadId == Thread.CurrentThread.ManagedThreadId)
				{
					this.__1__state = 0;
					_get_Children_d__ = this;
				}
				else
				{
					_get_Children_d__ = new JSONObject._get_Children_d__23(0);
					_get_Children_d__.__4__this = this.__4__this;
				}
				return _get_Children_d__;
			}

			IEnumerator IEnumerable.GetEnumerator()
			{
				return this.System.Collections.Generic.IEnumerable<GameAnalyticsSDK.Net.Utilities.JSONNode>.GetEnumerator();
			}
		}

		private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

		private bool inline;

		public override bool Inline
		{
			get
			{
				return this.inline;
			}
			set
			{
				this.inline = value;
			}
		}

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.Object;
			}
		}

		public override bool IsObject
		{
			get
			{
				return true;
			}
		}

		public override JSONNode this[string aKey]
		{
			get
			{
				if (this.m_Dict.ContainsKey(aKey))
				{
					return this.m_Dict[aKey];
				}
				return new JSONLazyCreator(this, aKey);
			}
			set
			{
				if (value == null)
				{
					value = JSONNull.CreateOrGet();
				}
				if (this.m_Dict.ContainsKey(aKey))
				{
					this.m_Dict[aKey] = value;
					return;
				}
				this.m_Dict.Add(aKey, value);
			}
		}

		public override JSONNode this[int aIndex]
		{
			get
			{
				if (aIndex < 0 || aIndex >= this.m_Dict.Count)
				{
					return null;
				}
				return this.m_Dict.ElementAt(aIndex).Value;
			}
			set
			{
				if (value == null)
				{
					value = JSONNull.CreateOrGet();
				}
				if (aIndex < 0 || aIndex >= this.m_Dict.Count)
				{
					return;
				}
				string key = this.m_Dict.ElementAt(aIndex).Key;
				this.m_Dict[key] = value;
			}
		}

		public override int Count
		{
			get
			{
				return this.m_Dict.Count;
			}
		}

		public override IEnumerable<JSONNode> Children
		{
			get
			{
				JSONObject._get_Children_d__23 expr_07 = new JSONObject._get_Children_d__23(-2);
				expr_07.__4__this = this;
				return expr_07;
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return new JSONNode.Enumerator(this.m_Dict.GetEnumerator());
		}

		public override void Add(string aKey, JSONNode aItem)
		{
			if (aItem == null)
			{
				aItem = JSONNull.CreateOrGet();
			}
			if (string.IsNullOrEmpty(aKey))
			{
				this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
				return;
			}
			if (this.m_Dict.ContainsKey(aKey))
			{
				this.m_Dict[aKey] = aItem;
				return;
			}
			this.m_Dict.Add(aKey, aItem);
		}

		public override JSONNode Remove(string aKey)
		{
			if (!this.m_Dict.ContainsKey(aKey))
			{
				return null;
			}
			JSONNode arg_29_0 = this.m_Dict[aKey];
			this.m_Dict.Remove(aKey);
			return arg_29_0;
		}

		public override JSONNode Remove(int aIndex)
		{
			if (aIndex < 0 || aIndex >= this.m_Dict.Count)
			{
				return null;
			}
			KeyValuePair<string, JSONNode> keyValuePair = this.m_Dict.ElementAt(aIndex);
			this.m_Dict.Remove(keyValuePair.Key);
			return keyValuePair.Value;
		}

		public override JSONNode Remove(JSONNode aNode)
		{
			JSONObject.__c__DisplayClass21_0 __c__DisplayClass21_ = new JSONObject.__c__DisplayClass21_0();
			__c__DisplayClass21_.aNode = aNode;
			JSONNode result;
			try
			{
				KeyValuePair<string, JSONNode> keyValuePair = this.m_Dict.Where(new Func<KeyValuePair<string, JSONNode>, bool>(__c__DisplayClass21_._Remove_b__0)).First<KeyValuePair<string, JSONNode>>();
				this.m_Dict.Remove(keyValuePair.Key);
				result = __c__DisplayClass21_.aNode;
			}
			catch
			{
				result = null;
			}
			return result;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append('{');
			bool flag = true;
			if (this.inline)
			{
				aMode = JSONTextMode.Compact;
			}
			foreach (KeyValuePair<string, JSONNode> current in this.m_Dict)
			{
				if (!flag)
				{
					aSB.Append(',');
				}
				flag = false;
				if (aMode == JSONTextMode.Indent)
				{
					aSB.AppendLine();
				}
				if (aMode == JSONTextMode.Indent)
				{
					aSB.Append(' ', aIndent + aIndentInc);
				}
				aSB.Append('"').Append(JSONNode.Escape(current.Key)).Append('"');
				if (aMode == JSONTextMode.Compact)
				{
					aSB.Append(':');
				}
				else
				{
					aSB.Append(" : ");
				}
				current.Value.WriteToStringBuilder(aSB, aIndent + aIndentInc, aIndentInc, aMode);
			}
			if (aMode == JSONTextMode.Indent)
			{
				aSB.AppendLine().Append(' ', aIndent);
			}
			aSB.Append('}');
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(2);
			aWriter.Write(this.m_Dict.Count);
			foreach (string current in this.m_Dict.Keys)
			{
				aWriter.Write(current);
				this.m_Dict[current].SerializeBinary(aWriter);
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.IO;
using System.Text;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONString : JSONNode
	{
		private string m_Data;

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.String;
			}
		}

		public override bool IsString
		{
			get
			{
				return true;
			}
		}

		public override string Value
		{
			get
			{
				return this.m_Data;
			}
			set
			{
				this.m_Data = value;
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return default(JSONNode.Enumerator);
		}

		public JSONString(string aData)
		{
			this.m_Data = aData;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append('"').Append(JSONNode.Escape(this.m_Data)).Append('"');
		}

		public override bool Equals(object obj)
		{
			if (base.Equals(obj))
			{
				return true;
			}
			string text = obj as string;
			if (text != null)
			{
				return this.m_Data == text;
			}
			JSONString jSONString = obj as JSONString;
			return jSONString != null && this.m_Data == jSONString.m_Data;
		}

		public override int GetHashCode()
		{
			return this.m_Data.GetHashCode();
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(3);
			aWriter.Write(this.m_Data);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Globalization;
using System.IO;
using System.Text;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONNumber : JSONNode
	{
		private double m_Data;

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.Number;
			}
		}

		public override bool IsNumber
		{
			get
			{
				return true;
			}
		}

		public override string Value
		{
			get
			{
				return this.m_Data.ToString(CultureInfo.InvariantCulture);
			}
			set
			{
				double data;
				if (double.TryParse(value, NumberStyles.Float, CultureInfo.InvariantCulture, out data))
				{
					this.m_Data = data;
				}
			}
		}

		public override double AsDouble
		{
			get
			{
				return this.m_Data;
			}
			set
			{
				this.m_Data = value;
			}
		}

		public override long AsLong
		{
			get
			{
				return (long)this.m_Data;
			}
			set
			{
				this.m_Data = (double)value;
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return default(JSONNode.Enumerator);
		}

		public JSONNumber(double aData)
		{
			this.m_Data = aData;
		}

		public JSONNumber(string aData)
		{
			this.Value = aData;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append(this.Value);
		}

		private static bool IsNumeric(object value)
		{
			return value is int || value is uint || value is float || value is double || value is decimal || value is long || value is ulong || value is short || value is ushort || value is sbyte || value is byte;
		}

		public override bool Equals(object obj)
		{
			if (obj == null)
			{
				return false;
			}
			if (base.Equals(obj))
			{
				return true;
			}
			JSONNumber jSONNumber = obj as JSONNumber;
			if (jSONNumber != null)
			{
				return this.m_Data == jSONNumber.m_Data;
			}
			return JSONNumber.IsNumeric(obj) && Convert.ToDouble(obj) == this.m_Data;
		}

		public override int GetHashCode()
		{
			return this.m_Data.GetHashCode();
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(4);
			aWriter.Write(this.m_Data);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.IO;
using System.Text;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONBool : JSONNode
	{
		private bool m_Data;

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.Boolean;
			}
		}

		public override bool IsBoolean
		{
			get
			{
				return true;
			}
		}

		public override string Value
		{
			get
			{
				return this.m_Data.ToString();
			}
			set
			{
				bool data;
				if (bool.TryParse(value, out data))
				{
					this.m_Data = data;
				}
			}
		}

		public override bool AsBool
		{
			get
			{
				return this.m_Data;
			}
			set
			{
				this.m_Data = value;
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return default(JSONNode.Enumerator);
		}

		public JSONBool(bool aData)
		{
			this.m_Data = aData;
		}

		public JSONBool(string aData)
		{
			this.Value = aData;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append(this.m_Data ? "true" : "false");
		}

		public override bool Equals(object obj)
		{
			return obj != null && obj is bool && this.m_Data == (bool)obj;
		}

		public override int GetHashCode()
		{
			return this.m_Data.GetHashCode();
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(6);
			aWriter.Write(this.m_Data);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.IO;
using System.Text;

namespace GameAnalyticsSDK.Net.Utilities
{
	public class JSONNull : JSONNode
	{
		private static JSONNull m_StaticInstance = new JSONNull();

		public static bool reuseSameInstance = true;

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.NullValue;
			}
		}

		public override bool IsNull
		{
			get
			{
				return true;
			}
		}

		public override string Value
		{
			get
			{
				return "null";
			}
			set
			{
			}
		}

		public override bool AsBool
		{
			get
			{
				return false;
			}
			set
			{
			}
		}

		public static JSONNull CreateOrGet()
		{
			if (JSONNull.reuseSameInstance)
			{
				return JSONNull.m_StaticInstance;
			}
			return new JSONNull();
		}

		private JSONNull()
		{
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return default(JSONNode.Enumerator);
		}

		public override bool Equals(object obj)
		{
			return this == obj || obj is JSONNull;
		}

		public override int GetHashCode()
		{
			return 0;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append("null");
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
			aWriter.Write(5);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.IO;
using System.Text;

namespace GameAnalyticsSDK.Net.Utilities
{
	internal class JSONLazyCreator : JSONNode
	{
		private JSONNode m_Node;

		private string m_Key;

		public override JSONNodeType Tag
		{
			get
			{
				return JSONNodeType.None;
			}
		}

		public override JSONNode this[int aIndex]
		{
			get
			{
				return new JSONLazyCreator(this);
			}
			set
			{
				this.Set<JSONArray>(new JSONArray()).Add(value);
			}
		}

		public override JSONNode this[string aKey]
		{
			get
			{
				return new JSONLazyCreator(this, aKey);
			}
			set
			{
				this.Set<JSONObject>(new JSONObject()).Add(aKey, value);
			}
		}

		public override int AsInt
		{
			get
			{
				this.Set<JSONNumber>(new JSONNumber(0.0));
				return 0;
			}
			set
			{
				this.Set<JSONNumber>(new JSONNumber((double)value));
			}
		}

		public override float AsFloat
		{
			get
			{
				this.Set<JSONNumber>(new JSONNumber(0.0));
				return 0f;
			}
			set
			{
				this.Set<JSONNumber>(new JSONNumber((double)value));
			}
		}

		public override double AsDouble
		{
			get
			{
				this.Set<JSONNumber>(new JSONNumber(0.0));
				return 0.0;
			}
			set
			{
				this.Set<JSONNumber>(new JSONNumber(value));
			}
		}

		public override long AsLong
		{
			get
			{
				if (JSONNode.longAsString)
				{
					this.Set<JSONString>(new JSONString("0"));
				}
				else
				{
					this.Set<JSONNumber>(new JSONNumber(0.0));
				}
				return 0L;
			}
			set
			{
				if (JSONNode.longAsString)
				{
					this.Set<JSONString>(new JSONString(value.ToString()));
					return;
				}
				this.Set<JSONNumber>(new JSONNumber((double)value));
			}
		}

		public override bool AsBool
		{
			get
			{
				this.Set<JSONBool>(new JSONBool(false));
				return false;
			}
			set
			{
				this.Set<JSONBool>(new JSONBool(value));
			}
		}

		public override JSONArray AsArray
		{
			get
			{
				return this.Set<JSONArray>(new JSONArray());
			}
		}

		public override JSONObject AsObject
		{
			get
			{
				return this.Set<JSONObject>(new JSONObject());
			}
		}

		public override JSONNode.Enumerator GetEnumerator()
		{
			return default(JSONNode.Enumerator);
		}

		public JSONLazyCreator(JSONNode aNode)
		{
			this.m_Node = aNode;
			this.m_Key = null;
		}

		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
			this.m_Node = aNode;
			this.m_Key = aKey;
		}

		private T Set<T>(T aVal) where T : JSONNode
		{
			if (this.m_Key == null)
			{
				this.m_Node.Add(aVal);
			}
			else
			{
				this.m_Node.Add(this.m_Key, aVal);
			}
			this.m_Node = null;
			return aVal;
		}

		public override void Add(JSONNode aItem)
		{
			this.Set<JSONArray>(new JSONArray()).Add(aItem);
		}

		public override void Add(string aKey, JSONNode aItem)
		{
			this.Set<JSONObject>(new JSONObject()).Add(aKey, aItem);
		}

		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return b == null || a == b;
		}

		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return !(a == b);
		}

		public override bool Equals(object obj)
		{
			return obj == null || this == obj;
		}

		public override int GetHashCode()
		{
			return 0;
		}

		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
			aSB.Append("null");
		}

		public override void SerializeBinary(BinaryWriter aWriter)
		{
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities
{
	public static class JSON
	{
		public static JSONNode Parse(string aJSON)
		{
			return JSONNode.Parse(aJSON);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip
{
	public class SharpZipBaseException : Exception
	{
		public SharpZipBaseException()
		{
		}

		public SharpZipBaseException(string msg) : base(msg)
		{
		}

		public SharpZipBaseException(string message, Exception innerException) : base(message, innerException)
		{
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.GZip
{
	public class GZipConstants
	{
		public static readonly int GZIP_MAGIC = 8075;

		public const int FTEXT = 1;

		public const int FHCRC = 2;

		public const int FEXTRA = 4;

		public const int FNAME = 8;

		public const int FCOMMENT = 16;

		private GZipConstants()
		{
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Utilities.Zip.Checksums;
using GameAnalyticsSDK.Net.Utilities.Zip.Compression;
using GameAnalyticsSDK.Net.Utilities.Zip.Compression.Streams;
using System;
using System.IO;

namespace GameAnalyticsSDK.Net.Utilities.Zip.GZip
{
	public class GZipOutputStream : DeflaterOutputStream
	{
		protected Crc32 crc = new Crc32();

		public GZipOutputStream(Stream baseOutputStream) : this(baseOutputStream, 4096)
		{
		}

		public GZipOutputStream(Stream baseOutputStream, int size) : base(baseOutputStream, new Deflater(Deflater.DEFAULT_COMPRESSION, true), size)
		{
			this.WriteHeader();
		}

		private void WriteHeader()
		{
			int num = (int)(DateTime.Now.Ticks / 10000L);
			byte[] array = new byte[]
			{
				(byte)(GZipConstants.GZIP_MAGIC >> 8),
				(byte)GZipConstants.GZIP_MAGIC,
				(byte)Deflater.DEFLATED,
				0,
				(byte)num,
				(byte)(num >> 8),
				(byte)(num >> 16),
				(byte)(num >> 24),
				0,
				255
			};
			this.baseOutputStream.Write(array, 0, array.Length);
		}

		public override void Write(byte[] buf, int off, int len)
		{
			this.crc.Update(buf, off, len);
			base.Write(buf, off, len);
		}

		public override void Close()
		{
			this.Finish();
			if (base.IsStreamOwner)
			{
				this.baseOutputStream.Close();
			}
		}

		public void SetLevel(int level)
		{
			if (level < Deflater.BEST_SPEED)
			{
				throw new ArgumentOutOfRangeException("level");
			}
			this.def.SetLevel(level);
		}

		public int GetLevel()
		{
			return this.def.GetLevel();
		}

		public override void Finish()
		{
			base.Finish();
			int totalIn = this.def.TotalIn;
			int num = (int)(this.crc.Value & (long)((ulong)(-1)));
			byte[] array = new byte[]
			{
				(byte)num,
				(byte)(num >> 8),
				(byte)(num >> 16),
				(byte)(num >> 24),
				(byte)totalIn,
				(byte)(totalIn >> 8),
				(byte)(totalIn >> 16),
				(byte)(totalIn >> 24)
			};
			this.baseOutputStream.Write(array, 0, array.Length);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class Deflater
	{
		public static int BEST_COMPRESSION = 9;

		public static int BEST_SPEED = 1;

		public static int DEFAULT_COMPRESSION = -1;

		public static int NO_COMPRESSION = 0;

		public static int DEFLATED = 8;

		private static int IS_SETDICT = 1;

		private static int IS_FLUSHING = 4;

		private static int IS_FINISHING = 8;

		private static int INIT_STATE = 0;

		private static int SETDICT_STATE = 1;

		private static int BUSY_STATE = 16;

		private static int FLUSHING_STATE = 20;

		private static int FINISHING_STATE = 28;

		private static int FINISHED_STATE = 30;

		private static int CLOSED_STATE = 127;

		private int level;

		private bool noZlibHeaderOrFooter;

		private int state;

		private long totalOut;

		private DeflaterPending pending;

		private DeflaterEngine engine;

		public int Adler
		{
			get
			{
				return this.engine.Adler;
			}
		}

		public int TotalIn
		{
			get
			{
				return this.engine.TotalIn;
			}
		}

		public long TotalOut
		{
			get
			{
				return this.totalOut;
			}
		}

		public bool IsFinished
		{
			get
			{
				return this.state == Deflater.FINISHED_STATE && this.pending.IsFlushed;
			}
		}

		public bool IsNeedingInput
		{
			get
			{
				return this.engine.NeedsInput();
			}
		}

		public Deflater() : this(Deflater.DEFAULT_COMPRESSION, false)
		{
		}

		public Deflater(int lvl) : this(lvl, false)
		{
		}

		public Deflater(int level, bool noZlibHeaderOrFooter)
		{
			if (level == Deflater.DEFAULT_COMPRESSION)
			{
				level = 6;
			}
			else if (level < Deflater.NO_COMPRESSION || level > Deflater.BEST_COMPRESSION)
			{
				throw new ArgumentOutOfRangeException("level");
			}
			this.pending = new DeflaterPending();
			this.engine = new DeflaterEngine(this.pending);
			this.noZlibHeaderOrFooter = noZlibHeaderOrFooter;
			this.SetStrategy(DeflateStrategy.Default);
			this.SetLevel(level);
			this.Reset();
		}

		public void Reset()
		{
			this.state = (this.noZlibHeaderOrFooter ? Deflater.BUSY_STATE : Deflater.INIT_STATE);
			this.totalOut = 0L;
			this.pending.Reset();
			this.engine.Reset();
		}

		public void Flush()
		{
			this.state |= Deflater.IS_FLUSHING;
		}

		public void Finish()
		{
			this.state |= (Deflater.IS_FLUSHING | Deflater.IS_FINISHING);
		}

		public void SetInput(byte[] input)
		{
			this.SetInput(input, 0, input.Length);
		}

		public void SetInput(byte[] input, int off, int len)
		{
			if ((this.state & Deflater.IS_FINISHING) != 0)
			{
				throw new InvalidOperationException("finish()/end() already called");
			}
			this.engine.SetInput(input, off, len);
		}

		public void SetLevel(int lvl)
		{
			if (lvl == Deflater.DEFAULT_COMPRESSION)
			{
				lvl = 6;
			}
			else if (lvl < Deflater.NO_COMPRESSION || lvl > Deflater.BEST_COMPRESSION)
			{
				throw new ArgumentOutOfRangeException("lvl");
			}
			if (this.level != lvl)
			{
				this.level = lvl;
				this.engine.SetLevel(lvl);
			}
		}

		public int GetLevel()
		{
			return this.level;
		}

		public void SetStrategy(DeflateStrategy strategy)
		{
			this.engine.Strategy = strategy;
		}

		public int Deflate(byte[] output)
		{
			return this.Deflate(output, 0, output.Length);
		}

		public int Deflate(byte[] output, int offset, int length)
		{
			int num = length;
			if (this.state == Deflater.CLOSED_STATE)
			{
				throw new InvalidOperationException("Deflater closed");
			}
			if (this.state < Deflater.BUSY_STATE)
			{
				int num2 = Deflater.DEFLATED + 112 << 8;
				int num3 = this.level - 1 >> 1;
				if (num3 < 0 || num3 > 3)
				{
					num3 = 3;
				}
				num2 |= num3 << 6;
				if ((this.state & Deflater.IS_SETDICT) != 0)
				{
					num2 |= 32;
				}
				num2 += 31 - num2 % 31;
				this.pending.WriteShortMSB(num2);
				if ((this.state & Deflater.IS_SETDICT) != 0)
				{
					int adler = this.engine.Adler;
					this.engine.ResetAdler();
					this.pending.WriteShortMSB(adler >> 16);
					this.pending.WriteShortMSB(adler & 65535);
				}
				this.state = (Deflater.BUSY_STATE | (this.state & (Deflater.IS_FLUSHING | Deflater.IS_FINISHING)));
			}
			while (true)
			{
				int num4 = this.pending.Flush(output, offset, length);
				offset += num4;
				this.totalOut += (long)num4;
				length -= num4;
				if (length == 0 || this.state == Deflater.FINISHED_STATE)
				{
					goto IL_216;
				}
				if (!this.engine.Deflate((this.state & Deflater.IS_FLUSHING) != 0, (this.state & Deflater.IS_FINISHING) != 0))
				{
					if (this.state == Deflater.BUSY_STATE)
					{
						break;
					}
					if (this.state == Deflater.FLUSHING_STATE)
					{
						if (this.level != Deflater.NO_COMPRESSION)
						{
							for (int i = 8 + (-this.pending.BitCount & 7); i > 0; i -= 10)
							{
								this.pending.WriteBits(2, 10);
							}
						}
						this.state = Deflater.BUSY_STATE;
					}
					else if (this.state == Deflater.FINISHING_STATE)
					{
						this.pending.AlignToByte();
						if (!this.noZlibHeaderOrFooter)
						{
							int adler2 = this.engine.Adler;
							this.pending.WriteShortMSB(adler2 >> 16);
							this.pending.WriteShortMSB(adler2 & 65535);
						}
						this.state = Deflater.FINISHED_STATE;
					}
				}
			}
			return num - length;
			IL_216:
			return num - length;
		}

		public void SetDictionary(byte[] dict)
		{
			this.SetDictionary(dict, 0, dict.Length);
		}

		public void SetDictionary(byte[] dict, int offset, int length)
		{
			if (this.state != Deflater.INIT_STATE)
			{
				throw new InvalidOperationException();
			}
			this.state = Deflater.SETDICT_STATE;
			this.engine.SetDictionary(dict, offset, length);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class DeflaterConstants
	{
		public static bool DEBUGGING = false;

		public const int STORED_BLOCK = 0;

		public const int STATIC_TREES = 1;

		public const int DYN_TREES = 2;

		public const int PRESET_DICT = 32;

		public const int DEFAULT_MEM_LEVEL = 8;

		public const int MAX_MATCH = 258;

		public const int MIN_MATCH = 3;

		public const int MAX_WBITS = 15;

		public const int WSIZE = 32768;

		public const int WMASK = 32767;

		public const int HASH_BITS = 15;

		public const int HASH_SIZE = 32768;

		public const int HASH_MASK = 32767;

		public const int HASH_SHIFT = 5;

		public const int MIN_LOOKAHEAD = 262;

		public const int MAX_DIST = 32506;

		public const int PENDING_BUF_SIZE = 65536;

		public static int MAX_BLOCK_SIZE = Math.Min(65535, 65531);

		public const int DEFLATE_STORED = 0;

		public const int DEFLATE_FAST = 1;

		public const int DEFLATE_SLOW = 2;

		public static int[] GOOD_LENGTH = new int[]
		{
			0,
			4,
			4,
			4,
			4,
			8,
			8,
			8,
			32,
			32
		};

		public static int[] MAX_LAZY = new int[]
		{
			0,
			4,
			5,
			6,
			4,
			16,
			16,
			32,
			128,
			258
		};

		public static int[] NICE_LENGTH = new int[]
		{
			0,
			8,
			16,
			32,
			16,
			32,
			128,
			128,
			258,
			258
		};

		public static int[] MAX_CHAIN = new int[]
		{
			0,
			4,
			8,
			32,
			16,
			32,
			128,
			256,
			1024,
			4096
		};

		public static int[] COMPR_FUNC = new int[]
		{
			0,
			1,
			1,
			1,
			1,
			2,
			2,
			2,
			2,
			2
		};
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public enum DeflateStrategy
	{
		Default,
		Filtered,
		HuffmanOnly
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Utilities.Zip.Checksums;
using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class DeflaterEngine : DeflaterConstants
	{
		private static int TOO_FAR = 4096;

		private int ins_h;

		private short[] head;

		private short[] prev;

		private int matchStart;

		private int matchLen;

		private bool prevAvailable;

		private int blockStart;

		private int strstart;

		private int lookahead;

		private byte[] window;

		private DeflateStrategy strategy;

		private int max_chain;

		private int max_lazy;

		private int niceLength;

		private int goodLength;

		private int comprFunc;

		private byte[] inputBuf;

		private int totalIn;

		private int inputOff;

		private int inputEnd;

		private DeflaterPending pending;

		private DeflaterHuffman huffman;

		private Adler32 adler;

		public int Adler
		{
			get
			{
				return (int)this.adler.Value;
			}
		}

		public int TotalIn
		{
			get
			{
				return this.totalIn;
			}
		}

		public DeflateStrategy Strategy
		{
			get
			{
				return this.strategy;
			}
			set
			{
				this.strategy = value;
			}
		}

		public DeflaterEngine(DeflaterPending pending)
		{
			this.pending = pending;
			this.huffman = new DeflaterHuffman(pending);
			this.adler = new Adler32();
			this.window = new byte[65536];
			this.head = new short[32768];
			this.prev = new short[32768];
			this.blockStart = (this.strstart = 1);
		}

		public void Reset()
		{
			this.huffman.Reset();
			this.adler.Reset();
			this.blockStart = (this.strstart = 1);
			this.lookahead = 0;
			this.totalIn = 0;
			this.prevAvailable = false;
			this.matchLen = 2;
			for (int i = 0; i < 32768; i++)
			{
				this.head[i] = 0;
			}
			for (int j = 0; j < 32768; j++)
			{
				this.prev[j] = 0;
			}
		}

		public void ResetAdler()
		{
			this.adler.Reset();
		}

		public void SetLevel(int lvl)
		{
			this.goodLength = DeflaterConstants.GOOD_LENGTH[lvl];
			this.max_lazy = DeflaterConstants.MAX_LAZY[lvl];
			this.niceLength = DeflaterConstants.NICE_LENGTH[lvl];
			this.max_chain = DeflaterConstants.MAX_CHAIN[lvl];
			if (DeflaterConstants.COMPR_FUNC[lvl] != this.comprFunc)
			{
				switch (this.comprFunc)
				{
				case 0:
					if (this.strstart > this.blockStart)
					{
						this.huffman.FlushStoredBlock(this.window, this.blockStart, this.strstart - this.blockStart, false);
						this.blockStart = this.strstart;
					}
					this.UpdateHash();
					break;
				case 1:
					if (this.strstart > this.blockStart)
					{
						this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, false);
						this.blockStart = this.strstart;
					}
					break;
				case 2:
					if (this.prevAvailable)
					{
						this.huffman.TallyLit((int)(this.window[this.strstart - 1] & 255));
					}
					if (this.strstart > this.blockStart)
					{
						this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, false);
						this.blockStart = this.strstart;
					}
					this.prevAvailable = false;
					this.matchLen = 2;
					break;
				}
				this.comprFunc = DeflaterConstants.COMPR_FUNC[lvl];
			}
		}

		private void UpdateHash()
		{
			this.ins_h = ((int)this.window[this.strstart] << 5 ^ (int)this.window[this.strstart + 1]);
		}

		private int InsertString()
		{
			int num = (this.ins_h << 5 ^ (int)this.window[this.strstart + 2]) & 32767;
			short num2 = this.prev[this.strstart & 32767] = this.head[num];
			this.head[num] = (short)this.strstart;
			this.ins_h = num;
			return (int)num2 & 65535;
		}

		private void SlideWindow()
		{
			Array.Copy(this.window, 32768, this.window, 0, 32768);
			this.matchStart -= 32768;
			this.strstart -= 32768;
			this.blockStart -= 32768;
			for (int i = 0; i < 32768; i++)
			{
				int num = (int)this.head[i] & 65535;
				this.head[i] = (short)((num >= 32768) ? (num - 32768) : 0);
			}
			for (int j = 0; j < 32768; j++)
			{
				int num2 = (int)this.prev[j] & 65535;
				this.prev[j] = (short)((num2 >= 32768) ? (num2 - 32768) : 0);
			}
		}

		public void FillWindow()
		{
			if (this.strstart >= 65274)
			{
				this.SlideWindow();
			}
			while (this.lookahead < 262 && this.inputOff < this.inputEnd)
			{
				int num = 65536 - this.lookahead - this.strstart;
				if (num > this.inputEnd - this.inputOff)
				{
					num = this.inputEnd - this.inputOff;
				}
				Array.Copy(this.inputBuf, this.inputOff, this.window, this.strstart + this.lookahead, num);
				this.adler.Update(this.inputBuf, this.inputOff, num);
				this.inputOff += num;
				this.totalIn += num;
				this.lookahead += num;
			}
			if (this.lookahead >= 3)
			{
				this.UpdateHash();
			}
		}

		private bool FindLongestMatch(int curMatch)
		{
			int num = this.max_chain;
			int num2 = this.niceLength;
			short[] array = this.prev;
			int num3 = this.strstart;
			int num4 = this.strstart + this.matchLen;
			int num5 = Math.Max(this.matchLen, 2);
			int num6 = Math.Max(this.strstart - 32506, 0);
			int num7 = this.strstart + 258 - 1;
			byte b = this.window[num4 - 1];
			byte b2 = this.window[num4];
			if (num5 >= this.goodLength)
			{
				num >>= 2;
			}
			if (num2 > this.lookahead)
			{
				num2 = this.lookahead;
			}
			do
			{
				if (this.window[curMatch + num5] == b2 && this.window[curMatch + num5 - 1] == b && this.window[curMatch] == this.window[num3] && this.window[curMatch + 1] == this.window[num3 + 1])
				{
					int num8 = curMatch + 2;
					num3 += 2;
					while (this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && this.window[++num3] == this.window[++num8] && num3 < num7)
					{
					}
					if (num3 > num4)
					{
						this.matchStart = curMatch;
						num4 = num3;
						num5 = num3 - this.strstart;
						if (num5 >= num2)
						{
							break;
						}
						b = this.window[num4 - 1];
						b2 = this.window[num4];
					}
					num3 = this.strstart;
				}
			}
			while ((curMatch = ((int)array[curMatch & 32767] & 65535)) > num6 && --num != 0);
			this.matchLen = Math.Min(num5, this.lookahead);
			return this.matchLen >= 3;
		}

		public void SetDictionary(byte[] buffer, int offset, int length)
		{
			this.adler.Update(buffer, offset, length);
			if (length < 3)
			{
				return;
			}
			if (length > 32506)
			{
				offset += length - 32506;
				length = 32506;
			}
			Array.Copy(buffer, offset, this.window, this.strstart, length);
			this.UpdateHash();
			length--;
			while (--length > 0)
			{
				this.InsertString();
				this.strstart++;
			}
			this.strstart += 2;
			this.blockStart = this.strstart;
		}

		private bool DeflateStored(bool flush, bool finish)
		{
			if (!flush && this.lookahead == 0)
			{
				return false;
			}
			this.strstart += this.lookahead;
			this.lookahead = 0;
			int num = this.strstart - this.blockStart;
			if ((num >= DeflaterConstants.MAX_BLOCK_SIZE || (this.blockStart < 32768 && num >= 32506)) | flush)
			{
				bool flag = finish;
				if (num > DeflaterConstants.MAX_BLOCK_SIZE)
				{
					num = DeflaterConstants.MAX_BLOCK_SIZE;
					flag = false;
				}
				this.huffman.FlushStoredBlock(this.window, this.blockStart, num, flag);
				this.blockStart += num;
				return !flag;
			}
			return true;
		}

		private bool DeflateFast(bool flush, bool finish)
		{
			if (this.lookahead < 262 && !flush)
			{
				return false;
			}
			while (this.lookahead >= 262 | flush)
			{
				if (this.lookahead == 0)
				{
					this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, finish);
					this.blockStart = this.strstart;
					return false;
				}
				if (this.strstart > 65274)
				{
					this.SlideWindow();
				}
				int num;
				if (this.lookahead >= 3 && (num = this.InsertString()) != 0 && this.strategy != DeflateStrategy.HuffmanOnly && this.strstart - num <= 32506 && this.FindLongestMatch(num))
				{
					if (this.huffman.TallyDist(this.strstart - this.matchStart, this.matchLen))
					{
						bool lastBlock = finish && this.lookahead == 0;
						this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, lastBlock);
						this.blockStart = this.strstart;
					}
					this.lookahead -= this.matchLen;
					if (this.matchLen <= this.max_lazy && this.lookahead >= 3)
					{
						while (true)
						{
							int num2 = this.matchLen - 1;
							this.matchLen = num2;
							if (num2 <= 0)
							{
								break;
							}
							this.strstart++;
							this.InsertString();
						}
						this.strstart++;
					}
					else
					{
						this.strstart += this.matchLen;
						if (this.lookahead >= 2)
						{
							this.UpdateHash();
						}
					}
					this.matchLen = 2;
				}
				else
				{
					this.huffman.TallyLit((int)(this.window[this.strstart] & 255));
					this.strstart++;
					this.lookahead--;
					if (this.huffman.IsFull())
					{
						bool flag = finish && this.lookahead == 0;
						this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, flag);
						this.blockStart = this.strstart;
						return !flag;
					}
				}
			}
			return true;
		}

		private bool DeflateSlow(bool flush, bool finish)
		{
			if (this.lookahead < 262 && !flush)
			{
				return false;
			}
			while (this.lookahead >= 262 | flush)
			{
				if (this.lookahead == 0)
				{
					if (this.prevAvailable)
					{
						this.huffman.TallyLit((int)(this.window[this.strstart - 1] & 255));
					}
					this.prevAvailable = false;
					this.huffman.FlushBlock(this.window, this.blockStart, this.strstart - this.blockStart, finish);
					this.blockStart = this.strstart;
					return false;
				}
				if (this.strstart >= 65274)
				{
					this.SlideWindow();
				}
				int num = this.matchStart;
				int num2 = this.matchLen;
				if (this.lookahead >= 3)
				{
					int num3 = this.InsertString();
					if (this.strategy != DeflateStrategy.HuffmanOnly && num3 != 0 && this.strstart - num3 <= 32506 && this.FindLongestMatch(num3) && this.matchLen <= 5 && (this.strategy == DeflateStrategy.Filtered || (this.matchLen == 3 && this.strstart - this.matchStart > DeflaterEngine.TOO_FAR)))
					{
						this.matchLen = 2;
					}
				}
				if (num2 >= 3 && this.matchLen <= num2)
				{
					this.huffman.TallyDist(this.strstart - 1 - num, num2);
					num2 -= 2;
					do
					{
						this.strstart++;
						this.lookahead--;
						if (this.lookahead >= 3)
						{
							this.InsertString();
						}
					}
					while (--num2 > 0);
					this.strstart++;
					this.lookahead--;
					this.prevAvailable = false;
					this.matchLen = 2;
				}
				else
				{
					if (this.prevAvailable)
					{
						this.huffman.TallyLit((int)(this.window[this.strstart - 1] & 255));
					}
					this.prevAvailable = true;
					this.strstart++;
					this.lookahead--;
				}
				if (this.huffman.IsFull())
				{
					int num4 = this.strstart - this.blockStart;
					if (this.prevAvailable)
					{
						num4--;
					}
					bool flag = finish && this.lookahead == 0 && !this.prevAvailable;
					this.huffman.FlushBlock(this.window, this.blockStart, num4, flag);
					this.blockStart += num4;
					return !flag;
				}
			}
			return true;
		}

		public bool Deflate(bool flush, bool finish)
		{
			while (true)
			{
				this.FillWindow();
				bool flush2 = flush && this.inputOff == this.inputEnd;
				bool flag;
				switch (this.comprFunc)
				{
				case 0:
					flag = this.DeflateStored(flush2, finish);
					goto IL_62;
				case 1:
					flag = this.DeflateFast(flush2, finish);
					goto IL_62;
				case 2:
					flag = this.DeflateSlow(flush2, finish);
					goto IL_62;
				}
				break;
				IL_62:
				if (!(this.pending.IsFlushed & flag))
				{
					return flag;
				}
			}
			throw new InvalidOperationException("unknown comprFunc");
		}

		public void SetInput(byte[] buf, int off, int len)
		{
			if (this.inputOff < this.inputEnd)
			{
				throw new InvalidOperationException("Old input was not completely processed");
			}
			int num = off + len;
			if (0 > off || off > num || num > buf.Length)
			{
				throw new ArgumentOutOfRangeException();
			}
			this.inputBuf = buf;
			this.inputOff = off;
			this.inputEnd = num;
		}

		public bool NeedsInput()
		{
			return this.inputEnd == this.inputOff;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class DeflaterHuffman
	{
		public class Tree
		{
			public short[] freqs;

			public byte[] length;

			public int minNumCodes;

			public int numCodes;

			private short[] codes;

			private int[] bl_counts;

			private int maxLength;

			private DeflaterHuffman dh;

			public Tree(DeflaterHuffman dh, int elems, int minCodes, int maxLength)
			{
				this.dh = dh;
				this.minNumCodes = minCodes;
				this.maxLength = maxLength;
				this.freqs = new short[elems];
				this.bl_counts = new int[maxLength];
			}

			public void Reset()
			{
				for (int i = 0; i < this.freqs.Length; i++)
				{
					this.freqs[i] = 0;
				}
				this.codes = null;
				this.length = null;
			}

			public void WriteSymbol(int code)
			{
				this.dh.pending.WriteBits((int)this.codes[code] & 65535, (int)this.length[code]);
			}

			public void CheckEmpty()
			{
				bool flag = true;
				for (int i = 0; i < this.freqs.Length; i++)
				{
					if (this.freqs[i] != 0)
					{
						flag = false;
					}
				}
				if (!flag)
				{
					throw new SharpZipBaseException("!Empty");
				}
			}

			public void SetStaticCodes(short[] stCodes, byte[] stLength)
			{
				this.codes = stCodes;
				this.length = stLength;
			}

			public void BuildCodes()
			{
				int arg_08_0 = this.freqs.Length;
				int[] array = new int[this.maxLength];
				int num = 0;
				this.codes = new short[this.freqs.Length];
				for (int i = 0; i < this.maxLength; i++)
				{
					array[i] = num;
					num += this.bl_counts[i] << 15 - i;
				}
				if (DeflaterConstants.DEBUGGING && num != 65536)
				{
					throw new SharpZipBaseException("Inconsistent bl_counts!");
				}
				for (int j = 0; j < this.numCodes; j++)
				{
					int num2 = (int)this.length[j];
					if (num2 > 0)
					{
						this.codes[j] = DeflaterHuffman.BitReverse(array[num2 - 1]);
						array[num2 - 1] += 1 << 16 - num2;
					}
				}
			}

			private void BuildLength(int[] childs)
			{
				this.length = new byte[this.freqs.Length];
				int num = childs.Length / 2;
				int num2 = (num + 1) / 2;
				int num3 = 0;
				for (int i = 0; i < this.maxLength; i++)
				{
					this.bl_counts[i] = 0;
				}
				int[] array = new int[num];
				array[num - 1] = 0;
				for (int j = num - 1; j >= 0; j--)
				{
					if (childs[2 * j + 1] != -1)
					{
						int num4 = array[j] + 1;
						if (num4 > this.maxLength)
						{
							num4 = this.maxLength;
							num3++;
						}
						array[childs[2 * j]] = (array[childs[2 * j + 1]] = num4);
					}
					else
					{
						int num5 = array[j];
						this.bl_counts[num5 - 1]++;
						this.length[childs[2 * j]] = (byte)array[j];
					}
				}
				if (num3 == 0)
				{
					return;
				}
				int num6 = this.maxLength - 1;
				while (true)
				{
					if (this.bl_counts[--num6] != 0)
					{
						do
						{
							this.bl_counts[num6]--;
							this.bl_counts[++num6]++;
							num3 -= 1 << this.maxLength - 1 - num6;
						}
						while (num3 > 0 && num6 < this.maxLength - 1);
						if (num3 <= 0)
						{
							break;
						}
					}
				}
				this.bl_counts[this.maxLength - 1] += num3;
				this.bl_counts[this.maxLength - 2] -= num3;
				int num7 = 2 * num2;
				for (int num8 = this.maxLength; num8 != 0; num8--)
				{
					int k = this.bl_counts[num8 - 1];
					while (k > 0)
					{
						int num9 = 2 * childs[num7++];
						if (childs[num9 + 1] == -1)
						{
							this.length[childs[num9]] = (byte)num8;
							k--;
						}
					}
				}
			}

			public void BuildTree()
			{
				int num = this.freqs.Length;
				int[] array = new int[num];
				int i = 0;
				int num2 = 0;
				for (int j = 0; j < num; j++)
				{
					int num3 = (int)this.freqs[j];
					if (num3 != 0)
					{
						int num4 = i++;
						int num5;
						while (num4 > 0 && (int)this.freqs[array[num5 = (num4 - 1) / 2]] > num3)
						{
							array[num4] = array[num5];
							num4 = num5;
						}
						array[num4] = j;
						num2 = j;
					}
				}
				while (i < 2)
				{
					int num6 = (num2 < 2) ? (++num2) : 0;
					array[i++] = num6;
				}
				this.numCodes = Math.Max(num2 + 1, this.minNumCodes);
				int arg_B6_0 = i;
				int[] array2 = new int[4 * i - 2];
				int[] array3 = new int[2 * i - 1];
				int num7 = arg_B6_0;
				for (int k = 0; k < i; k++)
				{
					int num8 = array[k];
					array2[2 * k] = num8;
					array2[2 * k + 1] = -1;
					array3[k] = (int)this.freqs[num8] << 8;
					array[k] = k;
				}
				do
				{
					int num9 = array[0];
					int num10 = array[--i];
					int num11 = 0;
					int l;
					for (l = 1; l < i; l = l * 2 + 1)
					{
						if (l + 1 < i && array3[array[l]] > array3[array[l + 1]])
						{
							l++;
						}
						array[num11] = array[l];
						num11 = l;
					}
					int num12 = array3[num10];
					while ((l = num11) > 0 && array3[array[num11 = (l - 1) / 2]] > num12)
					{
						array[l] = array[num11];
					}
					array[l] = num10;
					int num13 = array[0];
					num10 = num7++;
					array2[2 * num10] = num9;
					array2[2 * num10 + 1] = num13;
					int num14 = Math.Min(array3[num9] & 255, array3[num13] & 255);
					num12 = (array3[num10] = array3[num9] + array3[num13] - num14 + 1);
					num11 = 0;
					for (l = 1; l < i; l = num11 * 2 + 1)
					{
						if (l + 1 < i && array3[array[l]] > array3[array[l + 1]])
						{
							l++;
						}
						array[num11] = array[l];
						num11 = l;
					}
					while ((l = num11) > 0 && array3[array[num11 = (l - 1) / 2]] > num12)
					{
						array[l] = array[num11];
					}
					array[l] = num10;
				}
				while (i > 1);
				if (array[0] != array2.Length / 2 - 1)
				{
					throw new SharpZipBaseException("Heap invariant violated");
				}
				this.BuildLength(array2);
			}

			public int GetEncodedLength()
			{
				int num = 0;
				for (int i = 0; i < this.freqs.Length; i++)
				{
					num += (int)(this.freqs[i] * (short)this.length[i]);
				}
				return num;
			}

			public void CalcBLFreq(DeflaterHuffman.Tree blTree)
			{
				int num = -1;
				int i = 0;
				while (i < this.numCodes)
				{
					int num2 = 1;
					int num3 = (int)this.length[i];
					int num4;
					int num5;
					if (num3 == 0)
					{
						num4 = 138;
						num5 = 3;
					}
					else
					{
						num4 = 6;
						num5 = 3;
						if (num != num3)
						{
							short[] expr_3B_cp_0 = blTree.freqs;
							int expr_3B_cp_1 = num3;
							expr_3B_cp_0[expr_3B_cp_1] += 1;
							num2 = 0;
						}
					}
					num = num3;
					i++;
					while (i < this.numCodes && num == (int)this.length[i])
					{
						i++;
						if (++num2 >= num4)
						{
							break;
						}
					}
					if (num2 < num5)
					{
						short[] expr_82_cp_0 = blTree.freqs;
						int expr_82_cp_1 = num;
						expr_82_cp_0[expr_82_cp_1] += (short)num2;
					}
					else if (num != 0)
					{
						short[] expr_9E_cp_0 = blTree.freqs;
						int expr_9E_cp_1 = DeflaterHuffman.REP_3_6;
						expr_9E_cp_0[expr_9E_cp_1] += 1;
					}
					else if (num2 <= 10)
					{
						short[] expr_BB_cp_0 = blTree.freqs;
						int expr_BB_cp_1 = DeflaterHuffman.REP_3_10;
						expr_BB_cp_0[expr_BB_cp_1] += 1;
					}
					else
					{
						short[] expr_D3_cp_0 = blTree.freqs;
						int expr_D3_cp_1 = DeflaterHuffman.REP_11_138;
						expr_D3_cp_0[expr_D3_cp_1] += 1;
					}
				}
			}

			public void WriteTree(DeflaterHuffman.Tree blTree)
			{
				int num = -1;
				int i = 0;
				while (i < this.numCodes)
				{
					int num2 = 1;
					int num3 = (int)this.length[i];
					int num4;
					int num5;
					if (num3 == 0)
					{
						num4 = 138;
						num5 = 3;
					}
					else
					{
						num4 = 6;
						num5 = 3;
						if (num != num3)
						{
							blTree.WriteSymbol(num3);
							num2 = 0;
						}
					}
					num = num3;
					i++;
					while (i < this.numCodes && num == (int)this.length[i])
					{
						i++;
						if (++num2 >= num4)
						{
							break;
						}
					}
					if (num2 < num5)
					{
						while (num2-- > 0)
						{
							blTree.WriteSymbol(num);
						}
					}
					else if (num != 0)
					{
						blTree.WriteSymbol(DeflaterHuffman.REP_3_6);
						this.dh.pending.WriteBits(num2 - 3, 2);
					}
					else if (num2 <= 10)
					{
						blTree.WriteSymbol(DeflaterHuffman.REP_3_10);
						this.dh.pending.WriteBits(num2 - 3, 3);
					}
					else
					{
						blTree.WriteSymbol(DeflaterHuffman.REP_11_138);
						this.dh.pending.WriteBits(num2 - 11, 7);
					}
				}
			}
		}

		private static int BUFSIZE;

		private static int LITERAL_NUM;

		private static int DIST_NUM;

		private static int BITLEN_NUM;

		private static int REP_3_6;

		private static int REP_3_10;

		private static int REP_11_138;

		private static int EOF_SYMBOL;

		private static int[] BL_ORDER;

		private static byte[] bit4Reverse;

		public DeflaterPending pending;

		private DeflaterHuffman.Tree literalTree;

		private DeflaterHuffman.Tree distTree;

		private DeflaterHuffman.Tree blTree;

		private short[] d_buf;

		private byte[] l_buf;

		private int last_lit;

		private int extra_bits;

		private static short[] staticLCodes;

		private static byte[] staticLLength;

		private static short[] staticDCodes;

		private static byte[] staticDLength;

		public static short BitReverse(int toReverse)
		{
			return (short)((int)DeflaterHuffman.bit4Reverse[toReverse & 15] << 12 | (int)DeflaterHuffman.bit4Reverse[toReverse >> 4 & 15] << 8 | (int)DeflaterHuffman.bit4Reverse[toReverse >> 8 & 15] << 4 | (int)DeflaterHuffman.bit4Reverse[toReverse >> 12]);
		}

		static DeflaterHuffman()
		{
			DeflaterHuffman.BUFSIZE = 16384;
			DeflaterHuffman.LITERAL_NUM = 286;
			DeflaterHuffman.DIST_NUM = 30;
			DeflaterHuffman.BITLEN_NUM = 19;
			DeflaterHuffman.REP_3_6 = 16;
			DeflaterHuffman.REP_3_10 = 17;
			DeflaterHuffman.REP_11_138 = 18;
			DeflaterHuffman.EOF_SYMBOL = 256;
			DeflaterHuffman.BL_ORDER = new int[]
			{
				16,
				17,
				18,
				0,
				8,
				7,
				9,
				6,
				10,
				5,
				11,
				4,
				12,
				3,
				13,
				2,
				14,
				1,
				15
			};
			DeflaterHuffman.bit4Reverse = new byte[]
			{
				0,
				8,
				4,
				12,
				2,
				10,
				6,
				14,
				1,
				9,
				5,
				13,
				3,
				11,
				7,
				15
			};
			DeflaterHuffman.staticLCodes = new short[DeflaterHuffman.LITERAL_NUM];
			DeflaterHuffman.staticLLength = new byte[DeflaterHuffman.LITERAL_NUM];
			int i = 0;
			while (i < 144)
			{
				DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.BitReverse(48 + i << 8);
				DeflaterHuffman.staticLLength[i++] = 8;
			}
			while (i < 256)
			{
				DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.BitReverse(256 + i << 7);
				DeflaterHuffman.staticLLength[i++] = 9;
			}
			while (i < 280)
			{
				DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.BitReverse(-256 + i << 9);
				DeflaterHuffman.staticLLength[i++] = 7;
			}
			while (i < DeflaterHuffman.LITERAL_NUM)
			{
				DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.BitReverse(-88 + i << 8);
				DeflaterHuffman.staticLLength[i++] = 8;
			}
			DeflaterHuffman.staticDCodes = new short[DeflaterHuffman.DIST_NUM];
			DeflaterHuffman.staticDLength = new byte[DeflaterHuffman.DIST_NUM];
			for (i = 0; i < DeflaterHuffman.DIST_NUM; i++)
			{
				DeflaterHuffman.staticDCodes[i] = DeflaterHuffman.BitReverse(i << 11);
				DeflaterHuffman.staticDLength[i] = 5;
			}
		}

		public DeflaterHuffman(DeflaterPending pending)
		{
			this.pending = pending;
			this.literalTree = new DeflaterHuffman.Tree(this, DeflaterHuffman.LITERAL_NUM, 257, 15);
			this.distTree = new DeflaterHuffman.Tree(this, DeflaterHuffman.DIST_NUM, 1, 15);
			this.blTree = new DeflaterHuffman.Tree(this, DeflaterHuffman.BITLEN_NUM, 4, 7);
			this.d_buf = new short[DeflaterHuffman.BUFSIZE];
			this.l_buf = new byte[DeflaterHuffman.BUFSIZE];
		}

		public void Reset()
		{
			this.last_lit = 0;
			this.extra_bits = 0;
			this.literalTree.Reset();
			this.distTree.Reset();
			this.blTree.Reset();
		}

		private int Lcode(int len)
		{
			if (len == 255)
			{
				return 285;
			}
			int num = 257;
			while (len >= 8)
			{
				num += 4;
				len >>= 1;
			}
			return num + len;
		}

		private int Dcode(int distance)
		{
			int num = 0;
			while (distance >= 4)
			{
				num += 2;
				distance >>= 1;
			}
			return num + distance;
		}

		public void SendAllTrees(int blTreeCodes)
		{
			this.blTree.BuildCodes();
			this.literalTree.BuildCodes();
			this.distTree.BuildCodes();
			this.pending.WriteBits(this.literalTree.numCodes - 257, 5);
			this.pending.WriteBits(this.distTree.numCodes - 1, 5);
			this.pending.WriteBits(blTreeCodes - 4, 4);
			for (int i = 0; i < blTreeCodes; i++)
			{
				this.pending.WriteBits((int)this.blTree.length[DeflaterHuffman.BL_ORDER[i]], 3);
			}
			this.literalTree.WriteTree(this.blTree);
			this.distTree.WriteTree(this.blTree);
		}

		public void CompressBlock()
		{
			for (int i = 0; i < this.last_lit; i++)
			{
				int num = (int)(this.l_buf[i] & 255);
				int num2 = (int)this.d_buf[i];
				if (num2-- != 0)
				{
					int num3 = this.Lcode(num);
					this.literalTree.WriteSymbol(num3);
					int num4 = (num3 - 261) / 4;
					if (num4 > 0 && num4 <= 5)
					{
						this.pending.WriteBits(num & (1 << num4) - 1, num4);
					}
					int num5 = this.Dcode(num2);
					this.distTree.WriteSymbol(num5);
					num4 = num5 / 2 - 1;
					if (num4 > 0)
					{
						this.pending.WriteBits(num2 & (1 << num4) - 1, num4);
					}
				}
				else
				{
					this.literalTree.WriteSymbol(num);
				}
			}
			this.literalTree.WriteSymbol(DeflaterHuffman.EOF_SYMBOL);
		}

		public void FlushStoredBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
		{
			this.pending.WriteBits(lastBlock ? 1 : 0, 3);
			this.pending.AlignToByte();
			this.pending.WriteShort(storedLength);
			this.pending.WriteShort(~storedLength);
			this.pending.WriteBlock(stored, storedOffset, storedLength);
			this.Reset();
		}

		public void FlushBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
		{
			short[] expr_15_cp_0 = this.literalTree.freqs;
			int expr_15_cp_1 = DeflaterHuffman.EOF_SYMBOL;
			expr_15_cp_0[expr_15_cp_1] += 1;
			this.literalTree.BuildTree();
			this.distTree.BuildTree();
			this.literalTree.CalcBLFreq(this.blTree);
			this.distTree.CalcBLFreq(this.blTree);
			this.blTree.BuildTree();
			int num = 4;
			for (int i = 18; i > num; i--)
			{
				if (this.blTree.length[DeflaterHuffman.BL_ORDER[i]] > 0)
				{
					num = i + 1;
				}
			}
			int num2 = 14 + num * 3 + this.blTree.GetEncodedLength() + this.literalTree.GetEncodedLength() + this.distTree.GetEncodedLength() + this.extra_bits;
			int num3 = this.extra_bits;
			for (int j = 0; j < DeflaterHuffman.LITERAL_NUM; j++)
			{
				num3 += (int)(this.literalTree.freqs[j] * (short)DeflaterHuffman.staticLLength[j]);
			}
			for (int k = 0; k < DeflaterHuffman.DIST_NUM; k++)
			{
				num3 += (int)(this.distTree.freqs[k] * (short)DeflaterHuffman.staticDLength[k]);
			}
			if (num2 >= num3)
			{
				num2 = num3;
			}
			if (storedOffset >= 0 && storedLength + 4 < num2 >> 3)
			{
				this.FlushStoredBlock(stored, storedOffset, storedLength, lastBlock);
				return;
			}
			if (num2 == num3)
			{
				this.pending.WriteBits(2 + (lastBlock ? 1 : 0), 3);
				this.literalTree.SetStaticCodes(DeflaterHuffman.staticLCodes, DeflaterHuffman.staticLLength);
				this.distTree.SetStaticCodes(DeflaterHuffman.staticDCodes, DeflaterHuffman.staticDLength);
				this.CompressBlock();
				this.Reset();
				return;
			}
			this.pending.WriteBits(4 + (lastBlock ? 1 : 0), 3);
			this.SendAllTrees(num);
			this.CompressBlock();
			this.Reset();
		}

		public bool IsFull()
		{
			return this.last_lit >= DeflaterHuffman.BUFSIZE;
		}

		public bool TallyLit(int lit)
		{
			this.d_buf[this.last_lit] = 0;
			byte[] arg_27_0 = this.l_buf;
			int num = this.last_lit;
			this.last_lit = num + 1;
			arg_27_0[num] = (byte)lit;
			short[] expr_39_cp_0 = this.literalTree.freqs;
			expr_39_cp_0[lit] += 1;
			return this.IsFull();
		}

		public bool TallyDist(int dist, int len)
		{
			this.d_buf[this.last_lit] = (short)dist;
			byte[] arg_2A_0 = this.l_buf;
			int num = this.last_lit;
			this.last_lit = num + 1;
			arg_2A_0[num] = (byte)(len - 3);
			int num2 = this.Lcode(len - 3);
			short[] expr_46_cp_0 = this.literalTree.freqs;
			int expr_46_cp_1 = num2;
			expr_46_cp_0[expr_46_cp_1] += 1;
			if (num2 >= 265 && num2 < 285)
			{
				this.extra_bits += (num2 - 261) / 4;
			}
			int num3 = this.Dcode(dist - 1);
			short[] expr_8D_cp_0 = this.distTree.freqs;
			int expr_8D_cp_1 = num3;
			expr_8D_cp_0[expr_8D_cp_1] += 1;
			if (num3 >= 4)
			{
				this.extra_bits += num3 / 2 - 1;
			}
			return this.IsFull();
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class DeflaterPending : PendingBuffer
	{
		public DeflaterPending() : base(65536)
		{
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression
{
	public class PendingBuffer
	{
		protected byte[] buf;

		private int start;

		private int end;

		private uint bits;

		private int bitCount;

		public int BitCount
		{
			get
			{
				return this.bitCount;
			}
		}

		public bool IsFlushed
		{
			get
			{
				return this.end == 0;
			}
		}

		public PendingBuffer() : this(4096)
		{
		}

		public PendingBuffer(int bufsize)
		{
			this.buf = new byte[bufsize];
		}

		public void Reset()
		{
			this.start = (this.end = (this.bitCount = 0));
		}

		public void WriteByte(int b)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			byte[] arg_2E_0 = this.buf;
			int num = this.end;
			this.end = num + 1;
			arg_2E_0[num] = (byte)b;
		}

		public void WriteShort(int s)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			byte[] arg_2E_0 = this.buf;
			int num = this.end;
			this.end = num + 1;
			arg_2E_0[num] = (byte)s;
			byte[] arg_4A_0 = this.buf;
			num = this.end;
			this.end = num + 1;
			arg_4A_0[num] = (byte)(s >> 8);
		}

		public void WriteInt(int s)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			byte[] arg_2E_0 = this.buf;
			int num = this.end;
			this.end = num + 1;
			arg_2E_0[num] = (byte)s;
			byte[] arg_4A_0 = this.buf;
			num = this.end;
			this.end = num + 1;
			arg_4A_0[num] = (byte)(s >> 8);
			byte[] arg_67_0 = this.buf;
			num = this.end;
			this.end = num + 1;
			arg_67_0[num] = (byte)(s >> 16);
			byte[] arg_84_0 = this.buf;
			num = this.end;
			this.end = num + 1;
			arg_84_0[num] = (byte)(s >> 24);
		}

		public void WriteBlock(byte[] block, int offset, int len)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			Array.Copy(block, offset, this.buf, this.end, len);
			this.end += len;
		}

		public void AlignToByte()
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			if (this.bitCount > 0)
			{
				byte[] arg_3C_0 = this.buf;
				int num = this.end;
				this.end = num + 1;
				arg_3C_0[num] = (byte)this.bits;
				if (this.bitCount > 8)
				{
					byte[] arg_66_0 = this.buf;
					num = this.end;
					this.end = num + 1;
					arg_66_0[num] = (byte)(this.bits >> 8);
				}
			}
			this.bits = 0u;
			this.bitCount = 0;
		}

		public void WriteBits(int b, int count)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			this.bits |= (uint)((uint)b << this.bitCount);
			this.bitCount += count;
			if (this.bitCount >= 16)
			{
				byte[] arg_63_0 = this.buf;
				int num = this.end;
				this.end = num + 1;
				arg_63_0[num] = (byte)this.bits;
				byte[] arg_84_0 = this.buf;
				num = this.end;
				this.end = num + 1;
				arg_84_0[num] = (byte)(this.bits >> 8);
				this.bits >>= 16;
				this.bitCount -= 16;
			}
		}

		public void WriteShortMSB(int s)
		{
			if (DeflaterConstants.DEBUGGING && this.start != 0)
			{
				throw new SharpZipBaseException();
			}
			byte[] arg_30_0 = this.buf;
			int num = this.end;
			this.end = num + 1;
			arg_30_0[num] = (byte)(s >> 8);
			byte[] arg_4A_0 = this.buf;
			num = this.end;
			this.end = num + 1;
			arg_4A_0[num] = (byte)s;
		}

		public int Flush(byte[] output, int offset, int length)
		{
			if (this.bitCount >= 8)
			{
				byte[] arg_27_0 = this.buf;
				int num = this.end;
				this.end = num + 1;
				arg_27_0[num] = (byte)this.bits;
				this.bits >>= 8;
				this.bitCount -= 8;
			}
			if (length > this.end - this.start)
			{
				length = this.end - this.start;
				Array.Copy(this.buf, this.start, output, offset, length);
				this.start = 0;
				this.end = 0;
			}
			else
			{
				Array.Copy(this.buf, this.start, output, offset, length);
				this.start += length;
			}
			return length;
		}

		public byte[] ToByteArray()
		{
			byte[] array = new byte[this.end - this.start];
			Array.Copy(this.buf, this.start, array, 0, array.Length);
			this.start = 0;
			this.end = 0;
			return array;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Utilities.Zip.Checksums;
using System;
using System.IO;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Compression.Streams
{
	public class DeflaterOutputStream : Stream
	{
		protected byte[] buf;

		protected Deflater def;

		protected Stream baseOutputStream;

		private bool isClosed;

		private bool isStreamOwner = true;

		private string password;

		private uint[] keys;

		public bool IsStreamOwner
		{
			get
			{
				return this.isStreamOwner;
			}
			set
			{
				this.isStreamOwner = value;
			}
		}

		public bool CanPatchEntries
		{
			get
			{
				return this.baseOutputStream.CanSeek;
			}
		}

		public override bool CanRead
		{
			get
			{
				return this.baseOutputStream.CanRead;
			}
		}

		public override bool CanSeek
		{
			get
			{
				return false;
			}
		}

		public override bool CanWrite
		{
			get
			{
				return this.baseOutputStream.CanWrite;
			}
		}

		public override long Length
		{
			get
			{
				return this.baseOutputStream.Length;
			}
		}

		public override long Position
		{
			get
			{
				return this.baseOutputStream.Position;
			}
			set
			{
				throw new NotSupportedException("DefalterOutputStream Position not supported");
			}
		}

		public string Password
		{
			get
			{
				return this.password;
			}
			set
			{
				if (value != null && value.Length == 0)
				{
					this.password = null;
					return;
				}
				this.password = value;
			}
		}

		public override long Seek(long offset, SeekOrigin origin)
		{
			throw new NotSupportedException("DeflaterOutputStream Seek not supported");
		}

		public override void SetLength(long val)
		{
			throw new NotSupportedException("DeflaterOutputStream SetLength not supported");
		}

		public override int ReadByte()
		{
			throw new NotSupportedException("DeflaterOutputStream ReadByte not supported");
		}

		public override int Read(byte[] b, int off, int len)
		{
			throw new NotSupportedException("DeflaterOutputStream Read not supported");
		}

		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			throw new NotSupportedException("DeflaterOutputStream BeginRead not currently supported");
		}

		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			throw new NotSupportedException("DeflaterOutputStream BeginWrite not currently supported");
		}

		protected void Deflate()
		{
			while (!this.def.IsNeedingInput)
			{
				int num = this.def.Deflate(this.buf, 0, this.buf.Length);
				if (num <= 0)
				{
					break;
				}
				if (this.keys != null)
				{
					this.EncryptBlock(this.buf, 0, num);
				}
				this.baseOutputStream.Write(this.buf, 0, num);
			}
			if (!this.def.IsNeedingInput)
			{
				throw new SharpZipBaseException("DeflaterOutputStream can't deflate all input?");
			}
		}

		public DeflaterOutputStream(Stream baseOutputStream) : this(baseOutputStream, new Deflater(), 512)
		{
		}

		public DeflaterOutputStream(Stream baseOutputStream, Deflater defl) : this(baseOutputStream, defl, 512)
		{
		}

		public DeflaterOutputStream(Stream baseOutputStream, Deflater deflater, int bufsize)
		{
			if (!baseOutputStream.CanWrite)
			{
				throw new ArgumentException("baseOutputStream", "must support writing");
			}
			if (deflater == null)
			{
				throw new ArgumentNullException("deflater");
			}
			if (bufsize <= 0)
			{
				throw new ArgumentOutOfRangeException("bufsize");
			}
			this.baseOutputStream = baseOutputStream;
			this.buf = new byte[bufsize];
			this.def = deflater;
		}

		public override void Flush()
		{
			this.def.Flush();
			this.Deflate();
			this.baseOutputStream.Flush();
		}

		public virtual void Finish()
		{
			this.def.Finish();
			while (!this.def.IsFinished)
			{
				int num = this.def.Deflate(this.buf, 0, this.buf.Length);
				if (num <= 0)
				{
					break;
				}
				if (this.keys != null)
				{
					this.EncryptBlock(this.buf, 0, num);
				}
				this.baseOutputStream.Write(this.buf, 0, num);
			}
			if (!this.def.IsFinished)
			{
				throw new SharpZipBaseException("Can't deflate all input?");
			}
			this.baseOutputStream.Flush();
			this.keys = null;
		}

		public override void Close()
		{
			if (!this.isClosed)
			{
				this.isClosed = true;
				this.Finish();
				if (this.isStreamOwner)
				{
					this.baseOutputStream.Close();
				}
			}
		}

		public override void WriteByte(byte bval)
		{
			this.Write(new byte[]
			{
				bval
			}, 0, 1);
		}

		public override void Write(byte[] buf, int off, int len)
		{
			this.def.SetInput(buf, off, len);
			this.Deflate();
		}

		protected byte EncryptByte()
		{
			uint expr_10 = (this.keys[2] & 65535u) | 2u;
			return (byte)(expr_10 * (expr_10 ^ 1u) >> 8);
		}

		protected void EncryptBlock(byte[] buffer, int offset, int length)
		{
			for (int i = offset; i < offset + length; i++)
			{
				byte ch = buffer[i];
				int expr_0F_cp_1 = i;
				buffer[expr_0F_cp_1] ^= this.EncryptByte();
				this.UpdateKeys(ch);
			}
		}

		protected void InitializePassword(string password)
		{
			this.keys = new uint[]
			{
				305419896u,
				591751049u,
				878082192u
			};
			for (int i = 0; i < password.Length; i++)
			{
				this.UpdateKeys((byte)password[i]);
			}
		}

		protected void UpdateKeys(byte ch)
		{
			this.keys[0] = Crc32.ComputeCrc32(this.keys[0], ch);
			this.keys[1] = this.keys[1] + (uint)((byte)this.keys[0]);
			this.keys[1] = this.keys[1] * 134775813u + 1u;
			this.keys[2] = Crc32.ComputeCrc32(this.keys[2], (byte)(this.keys[1] >> 24));
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Checksums
{
	public sealed class Adler32 : IChecksum
	{
		private static readonly uint BASE = 65521u;

		private uint checksum;

		public long Value
		{
			get
			{
				return (long)((ulong)this.checksum);
			}
		}

		public Adler32()
		{
			this.Reset();
		}

		public void Reset()
		{
			this.checksum = 1u;
		}

		public void Update(int bval)
		{
			uint num = this.checksum & 65535u;
			uint num2 = this.checksum >> 16;
			num = (num + (uint)(bval & 255)) % Adler32.BASE;
			num2 = (num + num2) % Adler32.BASE;
			this.checksum = (num2 << 16) + num;
		}

		public void Update(byte[] buffer)
		{
			this.Update(buffer, 0, buffer.Length);
		}

		public void Update(byte[] buf, int off, int len)
		{
			if (buf == null)
			{
				throw new ArgumentNullException("buf");
			}
			if (off < 0 || len < 0 || off + len > buf.Length)
			{
				throw new ArgumentOutOfRangeException();
			}
			uint num = this.checksum & 65535u;
			uint num2 = this.checksum >> 16;
			while (len > 0)
			{
				int num3 = 3800;
				if (num3 > len)
				{
					num3 = len;
				}
				len -= num3;
				while (--num3 >= 0)
				{
					num += (uint)(buf[off++] & 255);
					num2 += num;
				}
				num %= Adler32.BASE;
				num2 %= Adler32.BASE;
			}
			this.checksum = (num2 << 16 | num);
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Checksums
{
	public sealed class Crc32 : IChecksum
	{
		private static readonly uint CrcSeed = 4294967295u;

		private static readonly uint[] CrcTable = new uint[]
		{
			0u,
			1996959894u,
			3993919788u,
			2567524794u,
			124634137u,
			1886057615u,
			3915621685u,
			2657392035u,
			249268274u,
			2044508324u,
			3772115230u,
			2547177864u,
			162941995u,
			2125561021u,
			3887607047u,
			2428444049u,
			498536548u,
			1789927666u,
			4089016648u,
			2227061214u,
			450548861u,
			1843258603u,
			4107580753u,
			2211677639u,
			325883990u,
			1684777152u,
			4251122042u,
			2321926636u,
			335633487u,
			1661365465u,
			4195302755u,
			2366115317u,
			997073096u,
			1281953886u,
			3579855332u,
			2724688242u,
			1006888145u,
			1258607687u,
			3524101629u,
			2768942443u,
			901097722u,
			1119000684u,
			3686517206u,
			2898065728u,
			853044451u,
			1172266101u,
			3705015759u,
			2882616665u,
			651767980u,
			1373503546u,
			3369554304u,
			3218104598u,
			565507253u,
			1454621731u,
			3485111705u,
			3099436303u,
			671266974u,
			1594198024u,
			3322730930u,
			2970347812u,
			795835527u,
			1483230225u,
			3244367275u,
			3060149565u,
			1994146192u,
			31158534u,
			2563907772u,
			4023717930u,
			1907459465u,
			112637215u,
			2680153253u,
			3904427059u,
			2013776290u,
			251722036u,
			2517215374u,
			3775830040u,
			2137656763u,
			141376813u,
			2439277719u,
			3865271297u,
			1802195444u,
			476864866u,
			2238001368u,
			4066508878u,
			1812370925u,
			453092731u,
			2181625025u,
			4111451223u,
			1706088902u,
			314042704u,
			2344532202u,
			4240017532u,
			1658658271u,
			366619977u,
			2362670323u,
			4224994405u,
			1303535960u,
			984961486u,
			2747007092u,
			3569037538u,
			1256170817u,
			1037604311u,
			2765210733u,
			3554079995u,
			1131014506u,
			879679996u,
			2909243462u,
			3663771856u,
			1141124467u,
			855842277u,
			2852801631u,
			3708648649u,
			1342533948u,
			654459306u,
			3188396048u,
			3373015174u,
			1466479909u,
			544179635u,
			3110523913u,
			3462522015u,
			1591671054u,
			702138776u,
			2966460450u,
			3352799412u,
			1504918807u,
			783551873u,
			3082640443u,
			3233442989u,
			3988292384u,
			2596254646u,
			62317068u,
			1957810842u,
			3939845945u,
			2647816111u,
			81470997u,
			1943803523u,
			3814918930u,
			2489596804u,
			225274430u,
			2053790376u,
			3826175755u,
			2466906013u,
			167816743u,
			2097651377u,
			4027552580u,
			2265490386u,
			503444072u,
			1762050814u,
			4150417245u,
			2154129355u,
			426522225u,
			1852507879u,
			4275313526u,
			2312317920u,
			282753626u,
			1742555852u,
			4189708143u,
			2394877945u,
			397917763u,
			1622183637u,
			3604390888u,
			2714866558u,
			953729732u,
			1340076626u,
			3518719985u,
			2797360999u,
			1068828381u,
			1219638859u,
			3624741850u,
			2936675148u,
			906185462u,
			1090812512u,
			3747672003u,
			2825379669u,
			829329135u,
			1181335161u,
			3412177804u,
			3160834842u,
			628085408u,
			1382605366u,
			3423369109u,
			3138078467u,
			570562233u,
			1426400815u,
			3317316542u,
			2998733608u,
			733239954u,
			1555261956u,
			3268935591u,
			3050360625u,
			752459403u,
			1541320221u,
			2607071920u,
			3965973030u,
			1969922972u,
			40735498u,
			2617837225u,
			3943577151u,
			1913087877u,
			83908371u,
			2512341634u,
			3803740692u,
			2075208622u,
			213261112u,
			2463272603u,
			3855990285u,
			2094854071u,
			198958881u,
			2262029012u,
			4057260610u,
			1759359992u,
			534414190u,
			2176718541u,
			4139329115u,
			1873836001u,
			414664567u,
			2282248934u,
			4279200368u,
			1711684554u,
			285281116u,
			2405801727u,
			4167216745u,
			1634467795u,
			376229701u,
			2685067896u,
			3608007406u,
			1308918612u,
			956543938u,
			2808555105u,
			3495958263u,
			1231636301u,
			1047427035u,
			2932959818u,
			3654703836u,
			1088359270u,
			936918000u,
			2847714899u,
			3736837829u,
			1202900863u,
			817233897u,
			3183342108u,
			3401237130u,
			1404277552u,
			615818150u,
			3134207493u,
			3453421203u,
			1423857449u,
			601450431u,
			3009837614u,
			3294710456u,
			1567103746u,
			711928724u,
			3020668471u,
			3272380065u,
			1510334235u,
			755167117u
		};

		private uint crc;

		public long Value
		{
			get
			{
				return (long)((ulong)this.crc);
			}
			set
			{
				this.crc = (uint)value;
			}
		}

		internal static uint ComputeCrc32(uint oldCrc, byte bval)
		{
			return Crc32.CrcTable[(int)((oldCrc ^ (uint)bval) & 255u)] ^ oldCrc >> 8;
		}

		public void Reset()
		{
			this.crc = 0u;
		}

		public void Update(int bval)
		{
			this.crc ^= Crc32.CrcSeed;
			this.crc = (Crc32.CrcTable[(int)(checked((IntPtr)(unchecked((ulong)this.crc ^ (ulong)((long)bval)) & 255uL)))] ^ this.crc >> 8);
			this.crc ^= Crc32.CrcSeed;
		}

		public void Update(byte[] buffer)
		{
			this.Update(buffer, 0, buffer.Length);
		}

		public void Update(byte[] buf, int off, int len)
		{
			if (buf == null)
			{
				throw new ArgumentNullException("buf");
			}
			if (off < 0 || len < 0 || off + len > buf.Length)
			{
				throw new ArgumentOutOfRangeException();
			}
			this.crc ^= Crc32.CrcSeed;
			while (--len >= 0)
			{
				this.crc = (Crc32.CrcTable[(int)((this.crc ^ (uint)buf[off++]) & 255u)] ^ this.crc >> 8);
			}
			this.crc ^= Crc32.CrcSeed;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Utilities.Zip.Checksums
{
	public interface IChecksum
	{
		long Value
		{
			get;
		}

		void Reset();

		void Update(int bval);

		void Update(byte[] buffer);

		void Update(byte[] buf, int off, int len);
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Logging;
using System;
using System.Threading;

namespace GameAnalyticsSDK.Net.Threading
{
	public class GAThreading
	{
		private static bool endThread = false;

		private static DateTime threadDeadline;

		private static readonly GAThreading _instance = new GAThreading();

		private const int ThreadWaitTimeInMs = 1000;

		private readonly PriorityQueue<long, TimedBlock> blocks = new PriorityQueue<long, TimedBlock>();

		private readonly object threadLock = new object();

		private TimedBlock scheduledBlock;

		private bool hasScheduledBlockRun;

		private Thread thread;

		private static GAThreading Instance
		{
			get
			{
				return GAThreading._instance;
			}
		}

		private GAThreading()
		{
			GAThreading.threadDeadline = DateTime.Now;
			this.hasScheduledBlockRun = true;
		}

		~GAThreading()
		{
			GAThreading.StopThread();
		}

		private static void RunBlocks()
		{
			TimedBlock nextBlock;
			while ((nextBlock = GAThreading.GetNextBlock()) != null)
			{
				nextBlock.block();
			}
			if ((nextBlock = GAThreading.GetScheduledBlock()) != null)
			{
				nextBlock.block();
			}
		}

		public static void Run()
		{
			GALogger.D("Starting GA thread");
			try
			{
				while (!GAThreading.endThread && GAThreading.threadDeadline.CompareTo(DateTime.Now) > 0)
				{
					GAThreading.RunBlocks();
					Thread.Sleep(1000);
				}
				GAThreading.RunBlocks();
				if (!GAThreading.endThread)
				{
					GALogger.D("Ending GA thread");
				}
			}
			catch (Exception)
			{
			}
		}

		public static void PerformTaskOnGAThread(string blockName, Action taskBlock)
		{
			GAThreading.PerformTaskOnGAThread(blockName, taskBlock, 0L);
		}

		public static void PerformTaskOnGAThread(string blockName, Action taskBlock, long delayInSeconds)
		{
			if (GAThreading.endThread)
			{
				return;
			}
			object obj = GAThreading.Instance.threadLock;
			lock (obj)
			{
				DateTime deadline = DateTime.Now.AddSeconds((double)delayInSeconds);
				TimedBlock timedBlock = new TimedBlock(deadline, taskBlock, blockName);
				GAThreading.Instance.AddTimedBlock(timedBlock);
				GAThreading.threadDeadline = deadline.AddSeconds(10.0);
				if (GAThreading.IsThreadFinished())
				{
					if (GAThreading.Instance.thread != null)
					{
						GAThreading.Instance.thread.Join();
					}
					GAThreading.StartThread();
				}
			}
		}

		public static void ScheduleTimer(double interval, string blockName, Action callback)
		{
			if (GAThreading.endThread)
			{
				return;
			}
			object obj = GAThreading.Instance.threadLock;
			lock (obj)
			{
				if (GAThreading.Instance.hasScheduledBlockRun)
				{
					DateTime deadline = DateTime.Now.AddSeconds(interval);
					GAThreading.Instance.scheduledBlock = new TimedBlock(deadline, callback, blockName);
					GAThreading.Instance.hasScheduledBlockRun = false;
					GAThreading.threadDeadline = deadline.AddSeconds(2.0);
					if (GAThreading.IsThreadFinished())
					{
						if (GAThreading.Instance.thread != null)
						{
							GAThreading.Instance.thread.Join();
						}
						GAThreading.StartThread();
					}
				}
			}
		}

		private void AddTimedBlock(TimedBlock timedBlock)
		{
			this.blocks.Enqueue(timedBlock.deadline.Ticks, timedBlock);
		}

		private static TimedBlock GetNextBlock()
		{
			object obj = GAThreading.Instance.threadLock;
			TimedBlock result;
			lock (obj)
			{
				DateTime now = DateTime.Now;
				if (GAThreading.Instance.blocks.HasItems && GAThreading.Instance.blocks.Peek().deadline.CompareTo(now) <= 0)
				{
					result = GAThreading.Instance.blocks.Dequeue();
				}
				else
				{
					result = null;
				}
			}
			return result;
		}

		private static TimedBlock GetScheduledBlock()
		{
			object obj = GAThreading.Instance.threadLock;
			TimedBlock result;
			lock (obj)
			{
				DateTime now = DateTime.Now;
				if (!GAThreading.Instance.hasScheduledBlockRun && GAThreading.Instance.scheduledBlock != null && GAThreading.Instance.scheduledBlock.deadline.CompareTo(now) <= 0)
				{
					GAThreading.Instance.hasScheduledBlockRun = true;
					result = GAThreading.Instance.scheduledBlock;
				}
				else
				{
					result = null;
				}
			}
			return result;
		}

		public static void StartThread()
		{
			GAThreading.Instance.thread = new Thread(new ThreadStart(GAThreading.Run));
			GAThreading.Instance.thread.Priority = ThreadPriority.Lowest;
			GAThreading.Instance.thread.Start();
		}

		public static void StopThread()
		{
			GAThreading.endThread = true;
		}

		public static bool IsThreadFinished()
		{
			return GAThreading.Instance.thread == null || !GAThreading.Instance.thread.IsAlive;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace GameAnalyticsSDK.Net.Threading
{
	internal class PriorityQueue<TPriority, TItem>
	{
		[Serializable]
		private sealed class __c
		{
			public static readonly PriorityQueue<TPriority, TItem>.__c __9 = new PriorityQueue<TPriority, TItem>.__c();

			public static Func<KeyValuePair<TPriority, Queue<TItem>>, int> __9__11_0;

			internal int _get_Count_b__11_0(KeyValuePair<TPriority, Queue<TItem>> q)
			{
				return q.Value.Count;
			}
		}

		private readonly SortedDictionary<TPriority, Queue<TItem>> _subqueues;

		public bool HasItems
		{
			get
			{
				return this._subqueues.Any<KeyValuePair<TPriority, Queue<TItem>>>();
			}
		}

		public int Count
		{
			get
			{
				IEnumerable<KeyValuePair<TPriority, Queue<TItem>>> arg_25_0 = this._subqueues;
				Func<KeyValuePair<TPriority, Queue<TItem>>, int> arg_25_1;
				if ((arg_25_1 = PriorityQueue<TPriority, TItem>.__c.__9__11_0) == null)
				{
					arg_25_1 = (PriorityQueue<TPriority, TItem>.__c.__9__11_0 = new Func<KeyValuePair<TPriority, Queue<TItem>>, int>(PriorityQueue<TPriority, TItem>.__c.__9._get_Count_b__11_0));
				}
				return arg_25_0.Sum(arg_25_1);
			}
		}

		public PriorityQueue(IComparer<TPriority> priorityComparer)
		{
			this._subqueues = new SortedDictionary<TPriority, Queue<TItem>>(priorityComparer);
		}

		public PriorityQueue() : this(Comparer<TPriority>.Default)
		{
		}

		public void Enqueue(TPriority priority, TItem item)
		{
			if (!this._subqueues.ContainsKey(priority))
			{
				this.AddQueueOfPriority(priority);
			}
			this._subqueues[priority].Enqueue(item);
		}

		private void AddQueueOfPriority(TPriority priority)
		{
			this._subqueues.Add(priority, new Queue<TItem>());
		}

		public TItem Peek()
		{
			if (this.HasItems)
			{
				return this._subqueues.First<KeyValuePair<TPriority, Queue<TItem>>>().Value.Peek();
			}
			throw new InvalidOperationException("The queue is empty");
		}

		public TItem Dequeue()
		{
			if (this._subqueues.Any<KeyValuePair<TPriority, Queue<TItem>>>())
			{
				return this.DequeueFromHighPriorityQueue();
			}
			throw new InvalidOperationException("The queue is empty");
		}

		private TItem DequeueFromHighPriorityQueue()
		{
			KeyValuePair<TPriority, Queue<TItem>> keyValuePair = this._subqueues.First<KeyValuePair<TPriority, Queue<TItem>>>();
			TItem arg_39_0 = keyValuePair.Value.Dequeue();
			if (!keyValuePair.Value.Any<TItem>())
			{
				this._subqueues.Remove(keyValuePair.Key);
			}
			return arg_39_0;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using Foundation.Tasks;
using GameAnalyticsSDK.Net.Http;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;

namespace GameAnalyticsSDK.Net.Tasks
{
	internal class SdkErrorTask
	{
		private sealed class __c__DisplayClass7_0
		{
			public string url;

			public SdkErrorTask __4__this;

			internal void _Execute_b__0()
			{
				this.__4__this.DoInBackground(this.url);
			}
		}

		protected EGASdkErrorType type;

		protected byte[] payloadData;

		protected string hashHmac;

		protected string body = "";

		private const int MaxCount = 10;

		private static Dictionary<EGASdkErrorType, int> countMap = new Dictionary<EGASdkErrorType, int>();

		public SdkErrorTask(EGASdkErrorType type, byte[] payloadData, string secretKey)
		{
			this.type = type;
			this.payloadData = payloadData;
			this.hashHmac = GAUtilities.HmacWithKey(secretKey, payloadData);
		}

		public void Execute(string url)
		{
			SdkErrorTask.__c__DisplayClass7_0 expr_05 = new SdkErrorTask.__c__DisplayClass7_0();
			expr_05.__4__this = this;
			expr_05.url = url;
			AsyncTask.Run(new Action(expr_05._Execute_b__0));
		}

		protected void DoInBackground(string url)
		{
			if (!SdkErrorTask.countMap.ContainsKey(this.type))
			{
				SdkErrorTask.countMap.Add(this.type, 0);
			}
			if (SdkErrorTask.countMap[this.type] >= 10)
			{
				return;
			}
			HttpStatusCode responseCode = (HttpStatusCode)0;
			string responseDescription = "";
			try
			{
				HttpWebRequest httpWebRequest = WebRequest.Create(url) as HttpWebRequest;
				httpWebRequest.Method = "POST";
				httpWebRequest.ContentLength = (long)this.payloadData.Length;
				httpWebRequest.Headers[HttpRequestHeader.Authorization] = this.hashHmac;
				httpWebRequest.ContentType = "application/json";
				using (Stream requestStream = httpWebRequest.GetRequestStream())
				{
					requestStream.Write(this.payloadData, 0, this.payloadData.Length);
				}
				using (HttpWebResponse httpWebResponse = httpWebRequest.GetResponse() as HttpWebResponse)
				{
					using (Stream responseStream = httpWebResponse.GetResponseStream())
					{
						using (StreamReader streamReader = new StreamReader(responseStream))
						{
							string text = streamReader.ReadToEnd();
							this.body = text;
						}
					}
				}
			}
			catch (WebException ex)
			{
				if (ex.Response != null)
				{
					using (HttpWebResponse httpWebResponse2 = (HttpWebResponse)ex.Response)
					{
						using (Stream responseStream2 = httpWebResponse2.GetResponseStream())
						{
							using (StreamReader streamReader2 = new StreamReader(responseStream2))
							{
								string text2 = streamReader2.ReadToEnd();
								responseCode = httpWebResponse2.StatusCode;
								responseDescription = httpWebResponse2.StatusDescription;
								this.body = text2;
							}
						}
					}
				}
			}
			catch (Exception arg_183_0)
			{
				GALogger.E(arg_183_0.ToString());
			}
			GALogger.D("sdk error request content : " + this.body);
			this.OnPostExecute(responseCode, responseDescription);
		}

		protected void OnPostExecute(HttpStatusCode responseCode, string responseDescription)
		{
			if (string.IsNullOrEmpty(this.body))
			{
				GALogger.D(string.Concat(new object[]
				{
					"sdk error failed. Might be no connection. Description: ",
					responseDescription,
					", Status code: ",
					responseCode
				}));
				return;
			}
			if (responseCode != HttpStatusCode.OK)
			{
				GALogger.W(string.Concat(new object[]
				{
					"sdk error failed. response code not 200. status code: ",
					responseCode,
					", description: ",
					responseDescription,
					", body: ",
					this.body
				}));
				return;
			}
			SdkErrorTask.countMap[this.type] = SdkErrorTask.countMap[this.type] + 1;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Device;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.Utilities;
using Mono.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.IO;

namespace GameAnalyticsSDK.Net.Store
{
	internal class GAStore
	{
		public const bool InMemory = false;

		private const long MaxDbSizeBytes = 6291456L;

		private const long MaxDbSizeBytesBeforeTrim = 5242880L;

		private static readonly GAStore _instance = new GAStore();

		private string dbPath = "";

		private bool _tableReady;

		private static GAStore Instance
		{
			get
			{
				return GAStore._instance;
			}
		}

		private SqliteConnection SqlDatabase
		{
			get;
			set;
		}

		private bool DbReady
		{
			get;
			set;
		}

		public static bool IsTableReady
		{
			get
			{
				return GAStore.Instance._tableReady;
			}
			private set
			{
				GAStore.Instance._tableReady = value;
			}
		}

		public static bool IsDbTooLargeForEvents
		{
			get
			{
				return GAStore.DbSizeBytes > 6291456L;
			}
		}

		public static long DbSizeBytes
		{
			get
			{
				return new FileInfo(GAStore.Instance.dbPath).Length;
			}
		}

		private GAStore()
		{
		}

		public static JSONArray ExecuteQuerySync(string sql)
		{
			return GAStore.ExecuteQuerySync(sql, new Dictionary<string, object>());
		}

		public static JSONArray ExecuteQuerySync(string sql, Dictionary<string, object> parameters)
		{
			return GAStore.ExecuteQuerySync(sql, parameters, false);
		}

		public static JSONArray ExecuteQuerySync(string sql, Dictionary<string, object> parameters, bool useTransaction)
		{
			if (GAUtilities.StringMatch(sql.ToUpperInvariant(), "^(UPDATE|INSERT|DELETE)"))
			{
				useTransaction = true;
			}
			SqliteConnection sqlDatabase = GAStore.Instance.SqlDatabase;
			JSONArray jSONArray = new JSONArray();
			SqliteTransaction sqliteTransaction = null;
			SqliteCommand sqliteCommand = null;
			try
			{
				if (useTransaction)
				{
					sqliteTransaction = sqlDatabase.BeginTransaction();
				}
				sqliteCommand = sqlDatabase.CreateCommand();
				if (useTransaction)
				{
					sqliteCommand.Transaction = sqliteTransaction;
				}
				sqliteCommand.CommandText = sql;
				sqliteCommand.Prepare();
				if (parameters.Count != 0)
				{
					foreach (KeyValuePair<string, object> current in parameters)
					{
						sqliteCommand.Parameters.AddWithValue(current.Key, current.Value);
					}
				}
				using (SqliteDataReader sqliteDataReader = sqliteCommand.ExecuteReader())
				{
					while (sqliteDataReader.Read())
					{
						int fieldCount = sqliteDataReader.FieldCount;
						JSONObject jSONObject = new JSONObject();
						for (int i = 0; i < fieldCount; i++)
						{
							string name = sqliteDataReader.GetName(i);
							if (!string.IsNullOrEmpty(name))
							{
								jSONObject[name] = sqliteDataReader.GetValue(i).ToString();
							}
						}
						jSONArray.Add(jSONObject);
					}
				}
				if (useTransaction)
				{
					sqliteTransaction.Commit();
				}
			}
			catch (SqliteException arg)
			{
				GALogger.E("SQLITE3 ERROR: " + arg);
				jSONArray = null;
				if (useTransaction && sqliteTransaction != null)
				{
					try
					{
						sqliteTransaction.Rollback();
					}
					catch (SqliteException arg2)
					{
						GALogger.E("SQLITE3 ROLLBACK ERROR: " + arg2);
					}
					finally
					{
						sqliteTransaction.Dispose();
					}
				}
			}
			finally
			{
				if (sqliteCommand != null)
				{
					sqliteCommand.Dispose();
				}
				if (sqliteTransaction != null)
				{
					sqliteTransaction.Dispose();
				}
			}
			return jSONArray;
		}

		public static bool EnsureDatabase(bool dropDatabase, string key)
		{
			if (string.IsNullOrEmpty(GAStore.Instance.dbPath))
			{
				GAStore.Instance.dbPath = Path.Combine(Path.Combine(GADevice.WritablePath, key), "ga.sqlite3");
				string path = Path.Combine(GADevice.WritablePath, key);
				if (!Directory.Exists(path))
				{
					Directory.CreateDirectory(path);
				}
				GALogger.D("Database path set to: " + GAStore.Instance.dbPath);
			}
			try
			{
				GAStore.Instance.SqlDatabase = new SqliteConnection("URI=file:" + GAStore.Instance.dbPath + ";Version=3");
				GAStore.Instance.SqlDatabase.Open();
				GAStore.Instance.DbReady = true;
				GALogger.I("Database opened: " + GAStore.Instance.dbPath);
			}
			catch (Exception ex)
			{
				GAStore.Instance.DbReady = false;
				GALogger.W(string.Concat(new object[]
				{
					"Could not open database: ",
					GAStore.Instance.dbPath,
					" ",
					ex
				}));
				bool result = false;
				return result;
			}
			if (dropDatabase)
			{
				GALogger.D("Drop tables");
				GAStore.ExecuteQuerySync("DROP TABLE ga_events");
				GAStore.ExecuteQuerySync("DROP TABLE ga_state");
				GAStore.ExecuteQuerySync("DROP TABLE ga_session");
				GAStore.ExecuteQuerySync("DROP TABLE ga_progression");
				GAStore.ExecuteQuerySync("VACUUM");
			}
			string sql = "CREATE TABLE IF NOT EXISTS ga_events(status CHAR(50) NOT NULL, category CHAR(50) NOT NULL, session_id CHAR(50) NOT NULL, client_ts CHAR(50) NOT NULL, event TEXT NOT NULL);";
			string sql2 = "CREATE TABLE IF NOT EXISTS ga_session(session_id CHAR(50) PRIMARY KEY NOT NULL, timestamp CHAR(50) NOT NULL, event TEXT NOT NULL);";
			string sql3 = "CREATE TABLE IF NOT EXISTS ga_state(key CHAR(255) PRIMARY KEY NOT NULL, value TEXT);";
			string sql4 = "CREATE TABLE IF NOT EXISTS ga_progression(progression CHAR(255) PRIMARY KEY NOT NULL, tries CHAR(255));";
			if (GAStore.ExecuteQuerySync(sql) == null)
			{
				return false;
			}
			if (GAStore.ExecuteQuerySync("SELECT status FROM ga_events LIMIT 0,1") == null)
			{
				GALogger.D("ga_events corrupt, recreating.");
				GAStore.ExecuteQuerySync("DROP TABLE ga_events");
				if (GAStore.ExecuteQuerySync(sql) == null)
				{
					GALogger.W("ga_events corrupt, could not recreate it.");
					return false;
				}
			}
			if (GAStore.ExecuteQuerySync(sql2) == null)
			{
				return false;
			}
			if (GAStore.ExecuteQuerySync("SELECT session_id FROM ga_session LIMIT 0,1") == null)
			{
				GALogger.D("ga_session corrupt, recreating.");
				GAStore.ExecuteQuerySync("DROP TABLE ga_session");
				if (GAStore.ExecuteQuerySync(sql2) == null)
				{
					GALogger.W("ga_session corrupt, could not recreate it.");
					return false;
				}
			}
			if (GAStore.ExecuteQuerySync(sql3) == null)
			{
				return false;
			}
			if (GAStore.ExecuteQuerySync("SELECT key FROM ga_state LIMIT 0,1") == null)
			{
				GALogger.D("ga_state corrupt, recreating.");
				GAStore.ExecuteQuerySync("DROP TABLE ga_state");
				if (GAStore.ExecuteQuerySync(sql3) == null)
				{
					GALogger.W("ga_state corrupt, could not recreate it.");
					return false;
				}
			}
			if (GAStore.ExecuteQuerySync(sql4) == null)
			{
				return false;
			}
			if (GAStore.ExecuteQuerySync("SELECT progression FROM ga_progression LIMIT 0,1") == null)
			{
				GALogger.D("ga_progression corrupt, recreating.");
				GAStore.ExecuteQuerySync("DROP TABLE ga_progression");
				if (GAStore.ExecuteQuerySync(sql4) == null)
				{
					GALogger.W("ga_progression corrupt, could not recreate it.");
					return false;
				}
			}
			GAStore.TrimEventTable();
			GAStore.IsTableReady = true;
			GALogger.D("Database tables ensured present");
			return true;
		}

		public static void SetState(string key, string value)
		{
			if (value == null)
			{
				GAStore.ExecuteQuerySync("DELETE FROM ga_state WHERE key = $key;", new Dictionary<string, object>
				{
					{
						"$key",
						key
					}
				});
				return;
			}
			GAStore.ExecuteQuerySync("INSERT OR REPLACE INTO ga_state (key, value) VALUES($key, $value);", new Dictionary<string, object>
			{
				{
					"$key",
					key
				},
				{
					"$value",
					value
				}
			}, true);
		}

		private static void TrimEventTable()
		{
			if (GAStore.DbSizeBytes > 5242880L)
			{
				JSONArray jSONArray = GAStore.ExecuteQuerySync("SELECT session_id, Max(client_ts) FROM ga_events GROUP BY session_id ORDER BY client_ts LIMIT 3");
				if (jSONArray != null && jSONArray.Count > 0)
				{
					string text = "";
					for (int i = 0; i < jSONArray.Count; i++)
					{
						text += jSONArray[i].Value;
						if (i < jSONArray.Count - 1)
						{
							text += ",";
						}
					}
					string arg_88_0 = "DELETE FROM ga_events WHERE session_id IN (\"" + text + "\");";
					GALogger.W("Database too large when initializing. Deleting the oldest 3 sessions.");
					GAStore.ExecuteQuerySync(arg_88_0);
					GAStore.ExecuteQuerySync("VACUUM");
				}
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Device;
using GameAnalyticsSDK.Net.Events;
using GameAnalyticsSDK.Net.Http;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.Store;
using GameAnalyticsSDK.Net.Threading;
using GameAnalyticsSDK.Net.Utilities;
using GameAnalyticsSDK.Net.Validators;
using System;
using System.Collections.Generic;

namespace GameAnalyticsSDK.Net.State
{
	internal class GAState
	{
		private const string CategorySdkError = "sdk_error";

		private const int MaxCustomFieldsCount = 50;

		private const int MaxCustomFieldsKeyLength = 64;

		private const int MaxCustomFieldsValueStringLength = 256;

		private static readonly GAState _instance = new GAState();

		private string _userId;

		private string _identifier;

		private bool _initialized;

		private long _sessionStart;

		private int _sessionNum;

		private int _transactionNum;

		private string _sessionId;

		private string _currentCustomDimension01;

		private string _currentCustomDimension02;

		private string _currentCustomDimension03;

		private string _gameKey;

		private string _gameSecret;

		private string[] _availableCustomDimensions01 = new string[0];

		private string[] _availableCustomDimensions02 = new string[0];

		private string[] _availableCustomDimensions03 = new string[0];

		private string[] _availableResourceCurrencies = new string[0];

		private string[] _availableResourceItemTypes = new string[0];

		private string _build;

		private bool _useManualSessionHandling;

		private bool _isEventSubmissionEnabled = true;

		private string _defaultUserId;

		private Dictionary<string, int> progressionTries = new Dictionary<string, int>();

		private JSONNode sdkConfigDefault = new JSONObject();

		private JSONNode sdkConfig = new JSONObject();

		private JSONNode sdkConfigCached = new JSONObject();

		private JSONNode configurations = new JSONObject();

		private bool commandCenterIsReady;

		private readonly List<ICommandCenterListener> commandCenterListeners = new List<ICommandCenterListener>();

		private readonly object configurationsLock = new object();

		public const string InMemoryPrefix = "in_memory_";

		private const string DefaultUserIdKey = "default_user_id";

		public const string SessionNumKey = "session_num";

		public const string TransactionNumKey = "transaction_num";

		private const string FacebookIdKey = "facebook_id";

		private const string GenderKey = "gender";

		private const string BirthYearKey = "birth_year";

		private const string Dimension01Key = "dimension01";

		private const string Dimension02Key = "dimension02";

		private const string Dimension03Key = "dimension03";

		private const string SdkConfigCachedKey = "sdk_config_cached";

		private static GAState Instance
		{
			get
			{
				return GAState._instance;
			}
		}

		public static string UserId
		{
			private get
			{
				return GAState.Instance._userId;
			}
			set
			{
				GAState.Instance._userId = ((value == null) ? "" : value);
				GAState.CacheIdentifier();
			}
		}

		public static string Identifier
		{
			get
			{
				return GAState.Instance._identifier;
			}
			private set
			{
				GAState.Instance._identifier = value;
			}
		}

		public static bool Initialized
		{
			get
			{
				return GAState.Instance._initialized;
			}
			private set
			{
				GAState.Instance._initialized = value;
			}
		}

		public static long SessionStart
		{
			get
			{
				return GAState.Instance._sessionStart;
			}
			private set
			{
				GAState.Instance._sessionStart = value;
			}
		}

		public static int SessionNum
		{
			get
			{
				return GAState.Instance._sessionNum;
			}
			private set
			{
				GAState.Instance._sessionNum = value;
			}
		}

		public static int TransactionNum
		{
			get
			{
				return GAState.Instance._transactionNum;
			}
			private set
			{
				GAState.Instance._transactionNum = value;
			}
		}

		public static string SessionId
		{
			get
			{
				return GAState.Instance._sessionId;
			}
			private set
			{
				GAState.Instance._sessionId = value;
			}
		}

		public static string CurrentCustomDimension01
		{
			get
			{
				return GAState.Instance._currentCustomDimension01;
			}
			private set
			{
				GAState.Instance._currentCustomDimension01 = value;
			}
		}

		public static string CurrentCustomDimension02
		{
			get
			{
				return GAState.Instance._currentCustomDimension02;
			}
			private set
			{
				GAState.Instance._currentCustomDimension02 = value;
			}
		}

		public static string CurrentCustomDimension03
		{
			get
			{
				return GAState.Instance._currentCustomDimension03;
			}
			private set
			{
				GAState.Instance._currentCustomDimension03 = value;
			}
		}

		public static string GameKey
		{
			get
			{
				return GAState.Instance._gameKey;
			}
			private set
			{
				GAState.Instance._gameKey = value;
			}
		}

		public static string GameSecret
		{
			get
			{
				return GAState.Instance._gameSecret;
			}
			private set
			{
				GAState.Instance._gameSecret = value;
			}
		}

		public static string[] AvailableCustomDimensions01
		{
			get
			{
				return GAState.Instance._availableCustomDimensions01;
			}
			set
			{
				if (!GAValidator.ValidateCustomDimensions(value))
				{
					return;
				}
				GAState.Instance._availableCustomDimensions01 = value;
				GAState.ValidateAndFixCurrentDimensions();
				GALogger.I("Set available custom01 dimension values: (" + GAUtilities.JoinStringArray(value, ", ") + ")");
			}
		}

		public static string[] AvailableCustomDimensions02
		{
			get
			{
				return GAState.Instance._availableCustomDimensions02;
			}
			set
			{
				if (!GAValidator.ValidateCustomDimensions(value))
				{
					return;
				}
				GAState.Instance._availableCustomDimensions02 = value;
				GAState.ValidateAndFixCurrentDimensions();
				GALogger.I("Set available custom02 dimension values: (" + GAUtilities.JoinStringArray(value, ", ") + ")");
			}
		}

		public static string[] AvailableCustomDimensions03
		{
			get
			{
				return GAState.Instance._availableCustomDimensions03;
			}
			set
			{
				if (!GAValidator.ValidateCustomDimensions(value))
				{
					return;
				}
				GAState.Instance._availableCustomDimensions03 = value;
				GAState.ValidateAndFixCurrentDimensions();
				GALogger.I("Set available custom03 dimension values: (" + GAUtilities.JoinStringArray(value, ", ") + ")");
			}
		}

		public static string[] AvailableResourceCurrencies
		{
			get
			{
				return GAState.Instance._availableResourceCurrencies;
			}
			set
			{
				if (!GAValidator.ValidateResourceCurrencies(value))
				{
					return;
				}
				GAState.Instance._availableResourceCurrencies = value;
				GALogger.I("Set available resource currencies: (" + GAUtilities.JoinStringArray(value, ", ") + ")");
			}
		}

		public static string[] AvailableResourceItemTypes
		{
			get
			{
				return GAState.Instance._availableResourceItemTypes;
			}
			set
			{
				if (!GAValidator.ValidateResourceItemTypes(value))
				{
					return;
				}
				GAState.Instance._availableResourceItemTypes = value;
				GALogger.I("Set available resource item types: (" + GAUtilities.JoinStringArray(value, ", ") + ")");
			}
		}

		public static string Build
		{
			get
			{
				return GAState.Instance._build;
			}
			set
			{
				GAState.Instance._build = value;
			}
		}

		public static bool UseManualSessionHandling
		{
			get
			{
				return GAState.Instance._useManualSessionHandling;
			}
			private set
			{
				GAState.Instance._useManualSessionHandling = value;
			}
		}

		public static bool IsEventSubmissionEnabled
		{
			get
			{
				return GAState.Instance._isEventSubmissionEnabled;
			}
			private set
			{
				GAState.Instance._isEventSubmissionEnabled = value;
			}
		}

		private bool Enabled
		{
			get;
			set;
		}

		private string FacebookId
		{
			get;
			set;
		}

		private string Gender
		{
			get;
			set;
		}

		private int BirthYear
		{
			get;
			set;
		}

		private JSONNode SdkConfigCached
		{
			get;
			set;
		}

		private bool InitAuthorized
		{
			get;
			set;
		}

		private long ClientServerTimeOffset
		{
			get;
			set;
		}

		private long SuspendBlockId
		{
			get;
			set;
		}

		private string DefaultUserId
		{
			get
			{
				return GAState.Instance._defaultUserId;
			}
			set
			{
				GAState.Instance._defaultUserId = ((value == null) ? "" : value);
				GAState.CacheIdentifier();
			}
		}

		private static JSONNode SdkConfig
		{
			get
			{
				if (GAState.Instance.sdkConfig.AsObject != null && GAState.Instance.sdkConfig.Count != 0)
				{
					return GAState.Instance.sdkConfig;
				}
				if (GAState.Instance.sdkConfigCached.AsObject != null && GAState.Instance.sdkConfigCached.Count != 0)
				{
					return GAState.Instance.sdkConfigCached;
				}
				return GAState.Instance.sdkConfigDefault;
			}
		}

		private GAState()
		{
			this.Enabled = false;
		}

		~GAState()
		{
			GAState.EndSessionAndStopQueue(false);
		}

		public static bool IsEnabled()
		{
			return GAState.Instance.Enabled;
		}

		public static void SetCustomDimension01(string dimension)
		{
			GAState.CurrentCustomDimension01 = dimension;
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("dimension01", dimension);
			}
			GALogger.I("Set custom01 dimension value: " + dimension);
		}

		public static void SetCustomDimension02(string dimension)
		{
			GAState.CurrentCustomDimension02 = dimension;
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("dimension02", dimension);
			}
			GALogger.I("Set custom02 dimension value: " + dimension);
		}

		public static void SetCustomDimension03(string dimension)
		{
			GAState.CurrentCustomDimension03 = dimension;
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("dimension03", dimension);
			}
			GALogger.I("Set custom03 dimension value: " + dimension);
		}

		public static void SetFacebookId(string facebookId)
		{
			GAState.Instance.FacebookId = facebookId;
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("facebook_id", facebookId);
			}
			GALogger.I("Set facebook id: " + facebookId);
		}

		public static void SetGender(EGAGender gender)
		{
			GAState.Instance.Gender = gender.ToString().ToLowerInvariant();
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("gender", GAState.Instance.Gender);
			}
			GALogger.I("Set gender: " + gender);
		}

		public static void SetBirthYear(int birthYear)
		{
			GAState.Instance.BirthYear = birthYear;
			if (GAStore.IsTableReady)
			{
				GAStore.SetState("birth_year", birthYear.ToString());
			}
			GALogger.I("Set birth year: " + birthYear);
		}

		public static void IncrementSessionNum()
		{
			GAState.SessionNum++;
		}

		public static void IncrementTransactionNum()
		{
			GAState.TransactionNum++;
		}

		public static void IncrementProgressionTries(string progression)
		{
			int num = GAState.GetProgressionTries(progression) + 1;
			GAState.Instance.progressionTries[progression] = num;
			GAStore.ExecuteQuerySync("INSERT OR REPLACE INTO ga_progression (progression, tries) VALUES($progression, $tries);", new Dictionary<string, object>
			{
				{
					"$progression",
					progression
				},
				{
					"$tries",
					num
				}
			});
		}

		public static int GetProgressionTries(string progression)
		{
			if (GAState.Instance.progressionTries.ContainsKey(progression))
			{
				return GAState.Instance.progressionTries[progression];
			}
			return 0;
		}

		public static void ClearProgressionTries(string progression)
		{
			Dictionary<string, int> dictionary = GAState.Instance.progressionTries;
			if (dictionary.ContainsKey(progression))
			{
				dictionary.Remove(progression);
			}
			GAStore.ExecuteQuerySync("DELETE FROM ga_progression WHERE progression = $progression;", new Dictionary<string, object>
			{
				{
					"$progression",
					progression
				}
			});
		}

		public static bool HasAvailableCustomDimensions01(string dimension1)
		{
			return GAUtilities.StringArrayContainsString(GAState.AvailableCustomDimensions01, dimension1);
		}

		public static bool HasAvailableCustomDimensions02(string dimension2)
		{
			return GAUtilities.StringArrayContainsString(GAState.AvailableCustomDimensions02, dimension2);
		}

		public static bool HasAvailableCustomDimensions03(string dimension3)
		{
			return GAUtilities.StringArrayContainsString(GAState.AvailableCustomDimensions03, dimension3);
		}

		public static bool HasAvailableResourceCurrency(string currency)
		{
			return GAUtilities.StringArrayContainsString(GAState.AvailableResourceCurrencies, currency);
		}

		public static bool HasAvailableResourceItemType(string itemType)
		{
			return GAUtilities.StringArrayContainsString(GAState.AvailableResourceItemTypes, itemType);
		}

		public static void SetKeys(string gameKey, string gameSecret)
		{
			GAState.GameKey = gameKey;
			GAState.GameSecret = gameSecret;
		}

		public static void SetManualSessionHandling(bool flag)
		{
			GAState.UseManualSessionHandling = flag;
			GALogger.I("Use manual session handling: " + flag.ToString());
		}

		public static void SetEnabledEventSubmission(bool flag)
		{
			GAState.IsEventSubmissionEnabled = flag;
		}

		public static void InternalInitialize()
		{
			if (!GAStore.IsTableReady)
			{
				return;
			}
			GAState.EnsurePersistedStates();
			GAStore.SetState("default_user_id", GAState.Instance.DefaultUserId);
			GAState.Initialized = true;
			GAState.StartNewSession();
			if (GAState.IsEnabled())
			{
				GAEvents.EnsureEventQueueIsRunning();
			}
		}

		public static void EndSessionAndStopQueue(bool endThread)
		{
			if (GAState.Initialized && GAState.IsEnabled() && GAState.SessionIsStarted())
			{
				GALogger.I("Ending session.");
				GAEvents.StopEventQueue();
				GAEvents.AddSessionEndEvent();
				GAState.SessionStart = 0L;
			}
			if (endThread)
			{
				GAThreading.StopThread();
			}
		}

		public static void ResumeSessionAndStartQueue()
		{
			if (!GAState.Initialized)
			{
				return;
			}
			GALogger.I("Resuming session.");
			if (!GAState.SessionIsStarted())
			{
				GAState.StartNewSession();
			}
		}

		public static JSONObject GetEventAnnotations()
		{
			JSONObject jSONObject = new JSONObject();
			jSONObject.Add("v", new JSONNumber(2.0));
			jSONObject["user_id"] = GAState.Identifier;
			jSONObject.Add("client_ts", new JSONNumber((double)GAState.GetClientTsAdjusted()));
			jSONObject["sdk_version"] = GADevice.RelevantSdkVersion;
			jSONObject["os_version"] = GADevice.OSVersion;
			jSONObject["manufacturer"] = GADevice.DeviceManufacturer;
			jSONObject["device"] = GADevice.DeviceModel;
			jSONObject["platform"] = GADevice.BuildPlatform;
			jSONObject["session_id"] = GAState.SessionId;
			jSONObject.Add("session_num", new JSONNumber((double)GAState.SessionNum));
			string connectionType = GADevice.ConnectionType;
			if (GAValidator.ValidateConnectionType(connectionType))
			{
				jSONObject["connection_type"] = connectionType;
			}
			if (!string.IsNullOrEmpty(GADevice.GameEngineVersion))
			{
				jSONObject["engine_version"] = GADevice.GameEngineVersion;
			}
			if (!string.IsNullOrEmpty(GAState.Build))
			{
				jSONObject["build"] = GAState.Build;
			}
			if (!string.IsNullOrEmpty(GAState.Instance.FacebookId))
			{
				jSONObject["facebook_id"] = GAState.Instance.FacebookId;
			}
			if (!string.IsNullOrEmpty(GAState.Instance.Gender))
			{
				jSONObject["gender"] = GAState.Instance.Gender;
			}
			if (GAState.Instance.BirthYear != 0)
			{
				jSONObject.Add("birth_year", new JSONNumber((double)GAState.Instance.BirthYear));
			}
			return jSONObject;
		}

		public static JSONObject GetSdkErrorEventAnnotations()
		{
			JSONObject jSONObject = new JSONObject();
			jSONObject.Add("v", new JSONNumber(2.0));
			jSONObject["category"] = "sdk_error";
			jSONObject["sdk_version"] = GADevice.RelevantSdkVersion;
			jSONObject["os_version"] = GADevice.OSVersion;
			jSONObject["manufacturer"] = GADevice.DeviceManufacturer;
			jSONObject["device"] = GADevice.DeviceModel;
			jSONObject["platform"] = GADevice.BuildPlatform;
			string connectionType = GADevice.ConnectionType;
			if (GAValidator.ValidateConnectionType(connectionType))
			{
				jSONObject["connection_type"] = connectionType;
			}
			if (!string.IsNullOrEmpty(GADevice.GameEngineVersion))
			{
				jSONObject["engine_version"] = GADevice.GameEngineVersion;
			}
			return jSONObject;
		}

		public static JSONObject GetInitAnnotations()
		{
			JSONObject expr_05 = new JSONObject();
			expr_05["user_id"] = GAState.Identifier;
			expr_05["sdk_version"] = GADevice.RelevantSdkVersion;
			expr_05["os_version"] = GADevice.OSVersion;
			expr_05["platform"] = GADevice.BuildPlatform;
			return expr_05;
		}

		public static long GetClientTsAdjusted()
		{
			long num = GAUtilities.TimeIntervalSince1970();
			long num2 = num + GAState.Instance.ClientServerTimeOffset;
			if (GAValidator.ValidateClientTs(num2))
			{
				return num2;
			}
			return num;
		}

		public static bool SessionIsStarted()
		{
			return GAState.SessionStart != 0L;
		}

		public static JSONObject ValidateAndCleanCustomFields(IDictionary<string, object> fields)
		{
			JSONObject jSONObject = new JSONObject();
			if (fields != null)
			{
				int num = 0;
				foreach (KeyValuePair<string, object> current in fields)
				{
					if (current.Key == null || current.Value == null)
					{
						GALogger.W(string.Concat(new object[]
						{
							"ValidateAndCleanCustomFields: entry with key=",
							current.Key,
							", value=",
							current.Value,
							" has been omitted because its key or value is null"
						}));
					}
					else if (num < 50)
					{
						if (GAUtilities.StringMatch(current.Key, "^[a-zA-Z0-9_]{1," + 64 + "}$"))
						{
							if (current.Value is string || current.Value is char)
							{
								string text = Convert.ToString(current.Value);
								if (text.Length <= 256 && text.Length > 0)
								{
									jSONObject[current.Key] = text;
									num++;
								}
								else
								{
									GALogger.W(string.Concat(new object[]
									{
										"ValidateAndCleanCustomFields: entry with key=",
										current.Key,
										", value=",
										current.Value,
										" has been omitted because its value is an empty string or exceeds the max number of characters (",
										256,
										")"
									}));
								}
							}
							else if (current.Value is double)
							{
								jSONObject[current.Key] = new JSONNumber((double)current.Value);
								num++;
							}
							else if (current.Value is float)
							{
								jSONObject[current.Key] = new JSONNumber((double)((float)current.Value));
								num++;
							}
							else if (current.Value is long || current.Value is ulong)
							{
								jSONObject[current.Key] = new JSONNumber((double)Convert.ToInt64(current.Value));
								num++;
							}
							else if (current.Value is int || current.Value is byte || current.Value is sbyte || current.Value is byte || current.Value is uint || current.Value is short || current.Value is ushort)
							{
								jSONObject[current.Key] = new JSONNumber((double)Convert.ToInt32(current.Value));
								num++;
							}
							else
							{
								GALogger.W(string.Concat(new object[]
								{
									"ValidateAndCleanCustomFields: entry with key=",
									current.Key,
									", value=",
									current.Value,
									" has been omitted because its value is not a string or number"
								}));
							}
						}
						else
						{
							GALogger.W(string.Concat(new object[]
							{
								"ValidateAndCleanCustomFields: entry with key=",
								current.Key,
								", value=",
								current.Value,
								" has been omitted because its key illegal characters, an empty or exceeds the max number of characters (",
								64,
								")"
							}));
						}
					}
					else
					{
						GALogger.W(string.Concat(new object[]
						{
							"ValidateAndCleanCustomFields: entry with key=",
							current.Key,
							", value=",
							current.Value,
							" has been omitted because it exceeds the max number of custom fields (",
							50,
							")"
						}));
					}
				}
			}
			return jSONObject;
		}

		public static string GetConfigurationStringValue(string key, string defaultValue)
		{
			object obj = GAState.Instance.configurationsLock;
			string result;
			lock (obj)
			{
				result = ((!GAState.Instance.configurations[key].IsNull) ? GAState.Instance.configurations[key].Value : defaultValue);
			}
			return result;
		}

		public static bool IsCommandCenterReady()
		{
			return GAState.Instance.commandCenterIsReady;
		}

		public static void AddCommandCenterListener(ICommandCenterListener listener)
		{
			if (!GAState.Instance.commandCenterListeners.Contains(listener))
			{
				GAState.Instance.commandCenterListeners.Add(listener);
			}
		}

		public static void RemoveCommandCenterListener(ICommandCenterListener listener)
		{
			if (GAState.Instance.commandCenterListeners.Contains(listener))
			{
				GAState.Instance.commandCenterListeners.Remove(listener);
			}
		}

		public static string GetConfigurationsAsString()
		{
			return GAState.Instance.configurations.ToString();
		}

		private static void CacheIdentifier()
		{
			if (!string.IsNullOrEmpty(GAState.UserId))
			{
				GAState.Identifier = GAState.UserId;
			}
			else if (!string.IsNullOrEmpty(GAState.Instance.DefaultUserId))
			{
				GAState.Identifier = GAState.Instance.DefaultUserId;
			}
			GALogger.D("identifier, {clean:" + GAState.Identifier + "}");
		}

		private static void EnsurePersistedStates()
		{
			JSONObject jSONObject = new JSONObject();
			JSONArray jSONArray = GAStore.ExecuteQuerySync("SELECT * FROM ga_state;");
			if (jSONArray != null && jSONArray.Count != 0)
			{
				for (int i = 0; i < jSONArray.Count; i++)
				{
					JSONNode jSONNode = jSONArray[i];
					jSONObject.Add(jSONNode["key"], jSONNode["value"]);
				}
			}
			GAState instance = GAState.Instance;
			instance.DefaultUserId = ((jSONObject["default_user_id"] != null) ? jSONObject["default_user_id"].Value : Guid.NewGuid().ToString());
			GAState.SessionNum = ((jSONObject["session_num"] != null) ? jSONObject["session_num"].AsInt : 0);
			GAState.TransactionNum = ((jSONObject["transaction_num"] != null) ? jSONObject["transaction_num"].AsInt : 0);
			if (!string.IsNullOrEmpty(instance.FacebookId))
			{
				GAStore.SetState("facebook_id", instance.FacebookId);
			}
			else
			{
				instance.FacebookId = ((jSONObject["facebook_id"] != null) ? jSONObject["facebook_id"].Value : "");
				if (!string.IsNullOrEmpty(instance.FacebookId))
				{
					GALogger.D("facebookid found in DB: " + instance.FacebookId);
				}
			}
			if (!string.IsNullOrEmpty(instance.Gender))
			{
				GAStore.SetState("gender", instance.Gender);
			}
			else
			{
				instance.Gender = ((jSONObject["gender"] != null) ? jSONObject["gender"].Value : "");
				if (!string.IsNullOrEmpty(instance.Gender))
				{
					GALogger.D("gender found in DB: " + instance.Gender);
				}
			}
			if (instance.BirthYear != 0)
			{
				GAStore.SetState("birth_year", instance.BirthYear.ToString());
			}
			else
			{
				instance.BirthYear = ((jSONObject["birth_year"] != null) ? jSONObject["birth_year"].AsInt : 0);
				if (instance.BirthYear != 0)
				{
					GALogger.D("birthYear found in DB: " + instance.BirthYear);
				}
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension01))
			{
				GAStore.SetState("dimension01", GAState.CurrentCustomDimension01);
			}
			else
			{
				GAState.CurrentCustomDimension01 = ((jSONObject["dimension01"] != null) ? jSONObject["dimension01"].Value : "");
				if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension01))
				{
					GALogger.D("Dimension01 found in cache: " + GAState.CurrentCustomDimension01);
				}
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension02))
			{
				GAStore.SetState("dimension02", GAState.CurrentCustomDimension02);
			}
			else
			{
				GAState.CurrentCustomDimension02 = ((jSONObject["dimension02"] != null) ? jSONObject["dimension02"].Value : "");
				if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension02))
				{
					GALogger.D("Dimension02 found in cache: " + GAState.CurrentCustomDimension02);
				}
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension03))
			{
				GAStore.SetState("dimension03", GAState.CurrentCustomDimension03);
			}
			else
			{
				GAState.CurrentCustomDimension03 = ((jSONObject["dimension03"] != null) ? jSONObject["dimension03"].Value : "");
				if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension03))
				{
					GALogger.D("Dimension03 found in cache: " + GAState.CurrentCustomDimension03);
				}
			}
			string text = (jSONObject["sdk_config_cached"] != null) ? jSONObject["sdk_config_cached"].Value : "";
			if (!string.IsNullOrEmpty(text))
			{
				JSONNode jSONNode2 = null;
				try
				{
					jSONNode2 = JSONNode.LoadFromBinaryBase64(text);
				}
				catch (Exception)
				{
				}
				if (jSONNode2 != null && jSONNode2.Count != 0)
				{
					instance.SdkConfigCached = jSONNode2;
				}
			}
			JSONArray jSONArray2 = GAStore.ExecuteQuerySync("SELECT * FROM ga_progression;");
			if (jSONArray2 != null && jSONArray2.Count != 0)
			{
				for (int j = 0; j < jSONArray2.Count; j++)
				{
					JSONNode jSONNode3 = jSONArray2[j];
					if (jSONNode3 != null && jSONNode3.Count != 0)
					{
						instance.progressionTries[jSONNode3["progression"].Value] = jSONNode3["tries"].AsInt;
					}
				}
			}
		}

		private static void StartNewSession()
		{
			GALogger.I("Starting a new session.");
			GAState.ValidateAndFixCurrentDimensions();
			KeyValuePair<EGAHTTPApiResponse, JSONObject> keyValuePair = GAHTTPApi.Instance.RequestInitReturningDict();
			GAState.StartNewSession(keyValuePair.Key, keyValuePair.Value);
		}

		public static void StartNewSession(EGAHTTPApiResponse initResponse, JSONObject initResponseDict)
		{
			if (initResponse == EGAHTTPApiResponse.Ok && initResponseDict != null)
			{
				long num = 0L;
				if (initResponseDict["server_ts"] != null)
				{
					num = GAState.CalculateServerTimeOffset(initResponseDict["server_ts"].AsLong);
				}
				initResponseDict.Add("time_offset", new JSONNumber((double)num));
				GAStore.SetState("sdk_config_cached", initResponseDict.SaveToBinaryBase64());
				GAState.Instance.sdkConfigCached = initResponseDict;
				GAState.Instance.sdkConfig = initResponseDict;
				GAState.Instance.InitAuthorized = true;
			}
			else if (initResponse == EGAHTTPApiResponse.Unauthorized)
			{
				GALogger.W("Initialize SDK failed - Unauthorized");
				GAState.Instance.InitAuthorized = false;
			}
			else
			{
				if (initResponse == EGAHTTPApiResponse.NoResponse || initResponse == EGAHTTPApiResponse.RequestTimeout)
				{
					GALogger.I("Init call (session start) failed - no response. Could be offline or timeout.");
				}
				else if (initResponse == EGAHTTPApiResponse.BadResponse || initResponse == EGAHTTPApiResponse.JsonEncodeFailed || initResponse == EGAHTTPApiResponse.JsonDecodeFailed)
				{
					GALogger.I("Init call (session start) failed - bad response. Could be bad response from proxy or GA servers.");
				}
				else if (initResponse == EGAHTTPApiResponse.BadRequest || initResponse == EGAHTTPApiResponse.UnknownResponseCode)
				{
					GALogger.I("Init call (session start) failed - bad request or unknown response.");
				}
				if (GAState.Instance.sdkConfig == null)
				{
					if (GAState.Instance.sdkConfigCached != null)
					{
						GALogger.I("Init call (session start) failed - using cached init values.");
						GAState.Instance.sdkConfig = GAState.Instance.sdkConfigCached;
					}
					else
					{
						GALogger.I("Init call (session start) failed - using default init values.");
						GAState.Instance.sdkConfig = GAState.Instance.sdkConfigDefault;
					}
				}
				else
				{
					GALogger.I("Init call (session start) failed - using cached init values.");
				}
				GAState.Instance.InitAuthorized = true;
			}
			JSONNode jSONNode = GAState.SdkConfig;
			if (jSONNode["enabled"].IsBoolean && !jSONNode["enabled"].AsBool)
			{
				GAState.Instance.Enabled = false;
			}
			else if (!GAState.Instance.InitAuthorized)
			{
				GAState.Instance.Enabled = false;
			}
			else
			{
				GAState.Instance.Enabled = true;
			}
			GAState.Instance.ClientServerTimeOffset = ((GAState.SdkConfig["time_offset"] != null) ? GAState.SdkConfig["time_offset"].AsLong : 0L);
			GAState.PopulateConfigurations(GAState.SdkConfig);
			if (!GAState.IsEnabled())
			{
				GALogger.W("Could not start session: SDK is disabled.");
				GAEvents.StopEventQueue();
				return;
			}
			GAEvents.EnsureEventQueueIsRunning();
			GAState.SessionId = Guid.NewGuid().ToString().ToLowerInvariant();
			GAState.SessionStart = GAState.GetClientTsAdjusted();
			GAEvents.AddSessionStartEvent();
		}

		private static void ValidateAndFixCurrentDimensions()
		{
			if (!GAValidator.ValidateDimension01(GAState.CurrentCustomDimension01))
			{
				GALogger.D("Invalid dimension01 found in variable. Setting to nil. Invalid dimension: " + GAState.CurrentCustomDimension01);
				GAState.SetCustomDimension01("");
			}
			if (!GAValidator.ValidateDimension02(GAState.CurrentCustomDimension02))
			{
				GALogger.D("Invalid dimension02 found in variable. Setting to nil. Invalid dimension: " + GAState.CurrentCustomDimension02);
				GAState.SetCustomDimension02("");
			}
			if (!GAValidator.ValidateDimension03(GAState.CurrentCustomDimension03))
			{
				GALogger.D("Invalid dimension03 found in variable. Setting to nil. Invalid dimension: " + GAState.CurrentCustomDimension03);
				GAState.SetCustomDimension03("");
			}
		}

		private static long CalculateServerTimeOffset(long serverTs)
		{
			long num = GAUtilities.TimeIntervalSince1970();
			return serverTs - num;
		}

		private static void PopulateConfigurations(JSONNode sdkConfig)
		{
			object obj = GAState.Instance.configurationsLock;
			lock (obj)
			{
				JSONArray asArray = sdkConfig["configurations"].AsArray;
				if (asArray != null)
				{
					for (int i = 0; i < asArray.Count; i++)
					{
						JSONNode jSONNode = asArray[i];
						if (jSONNode != null)
						{
							string value = jSONNode["key"].Value;
							object obj2;
							if (jSONNode["value"].IsNumber)
							{
								obj2 = jSONNode["value"].AsDouble;
							}
							else
							{
								obj2 = jSONNode["value"].Value;
							}
							long num = jSONNode["start"].IsNumber ? jSONNode["start"].AsLong : (-9223372036854775808L);
							long num2 = jSONNode["end"].IsNumber ? jSONNode["end"].AsLong : 9223372036854775807L;
							long clientTsAdjusted = GAState.GetClientTsAdjusted();
							GALogger.D(string.Concat(new object[]
							{
								"PopulateConfigurations: key=",
								value,
								", value=",
								obj2,
								", start_ts=",
								num,
								", end_ts=, client_ts_adjusted=",
								clientTsAdjusted
							}));
							if (value != null && obj2 != null && clientTsAdjusted > num && clientTsAdjusted < num2)
							{
								new JSONObject();
								if (jSONNode["value"].IsNumber)
								{
									GAState.Instance.configurations.Add(value, new JSONNumber(jSONNode["value"].AsDouble));
								}
								else
								{
									GAState.Instance.configurations.Add(value, jSONNode["value"].Value);
								}
								GALogger.D("configuration added: " + jSONNode);
							}
						}
					}
				}
				GAState.Instance.commandCenterIsReady = true;
				using (List<ICommandCenterListener>.Enumerator enumerator = GAState.Instance.commandCenterListeners.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						enumerator.Current.OnCommandCenterUpdated();
					}
				}
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;
using UnityEngine;

namespace GameAnalyticsSDK.Net.Logging
{
	internal class GALogger
	{
		private static readonly GALogger _instance = new GALogger();

		private bool infoLogEnabled;

		private bool infoLogVerboseEnabled;

		private static bool debugEnabled;

		private const string Tag = "GameAnalytics";

		private static GALogger Instance
		{
			get
			{
				return GALogger._instance;
			}
		}

		public static bool InfoLog
		{
			set
			{
				GALogger.Instance.infoLogEnabled = value;
			}
		}

		public static bool VerboseLog
		{
			set
			{
				GALogger.Instance.infoLogVerboseEnabled = value;
			}
		}

		private GALogger()
		{
		}

		public static void I(string format)
		{
			if (!GALogger.Instance.infoLogEnabled)
			{
				return;
			}
			string message = "Info/GameAnalytics: " + format;
			GALogger.Instance.SendNotificationMessage(message, EGALoggerMessageType.Info);
		}

		public static void W(string format)
		{
			string message = "Warning/GameAnalytics: " + format;
			GALogger.Instance.SendNotificationMessage(message, EGALoggerMessageType.Warning);
		}

		public static void E(string format)
		{
			string message = "Error/GameAnalytics: " + format;
			GALogger.Instance.SendNotificationMessage(message, EGALoggerMessageType.Error);
		}

		public static void II(string format)
		{
			if (!GALogger.Instance.infoLogVerboseEnabled)
			{
				return;
			}
			string message = "Verbose/GameAnalytics: " + format;
			GALogger.Instance.SendNotificationMessage(message, EGALoggerMessageType.Info);
		}

		public static void D(string format)
		{
			if (!GALogger.debugEnabled)
			{
				return;
			}
			string message = "Debug/GameAnalytics: " + format;
			GALogger.Instance.SendNotificationMessage(message, EGALoggerMessageType.Debug);
		}

		private void SendNotificationMessage(string message, EGALoggerMessageType type)
		{
			switch (type)
			{
			case EGALoggerMessageType.Error:
				UnityEngine.Debug.LogError(message);
				return;
			case EGALoggerMessageType.Warning:
				UnityEngine.Debug.LogWarning(message);
				return;
			case EGALoggerMessageType.Info:
				UnityEngine.Debug.Log(message);
				return;
			case EGALoggerMessageType.Debug:
				UnityEngine.Debug.Log(message);
				return;
			default:
				return;
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Http
{
	internal enum EGAHTTPApiResponse
	{
		NoResponse,
		BadResponse,
		RequestTimeout,
		JsonEncodeFailed,
		JsonDecodeFailed,
		InternalServerError,
		BadRequest,
		Unauthorized,
		UnknownResponseCode,
		Ok
	}
}

// Decompile from assembly: GameAnalytics.dll

using System;

namespace GameAnalyticsSDK.Net.Http
{
	internal enum EGASdkErrorType
	{
		Undefined,
		Rejected
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.State;
using GameAnalyticsSDK.Net.Tasks;
using GameAnalyticsSDK.Net.Utilities;
using GameAnalyticsSDK.Net.Validators;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace GameAnalyticsSDK.Net.Http
{
	internal class GAHTTPApi
	{
		private static readonly GAHTTPApi _instance = new GAHTTPApi();

		private static string protocol = "https";

		private static string hostName = "api.gameanalytics.com";

		private static string version = "v2";

		private static string baseUrl = GAHTTPApi.getBaseUrl();

		private static string initializeUrlPath = "init";

		private static string eventsUrlPath = "events";

		private bool useGzip;

		public static GAHTTPApi Instance
		{
			get
			{
				return GAHTTPApi._instance;
			}
		}

		private static string getBaseUrl()
		{
			return string.Concat(new string[]
			{
				GAHTTPApi.protocol,
				"://",
				GAHTTPApi.hostName,
				"/",
				GAHTTPApi.version
			});
		}

		private GAHTTPApi()
		{
			this.useGzip = true;
			ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(this.MyRemoteCertificateValidationCallback);
		}

		private bool MyRemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
		{
			bool result = true;
			if (sslPolicyErrors != SslPolicyErrors.None)
			{
				for (int i = 0; i < chain.ChainStatus.Length; i++)
				{
					if (chain.ChainStatus[i].Status != X509ChainStatusFlags.RevocationStatusUnknown)
					{
						chain.ChainPolicy.RevocationFlag = X509RevocationFlag.EntireChain;
						chain.ChainPolicy.RevocationMode = X509RevocationMode.Online;
						chain.ChainPolicy.UrlRetrievalTimeout = new TimeSpan(0, 1, 0);
						chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllFlags;
						if (!chain.Build((X509Certificate2)certificate))
						{
							result = false;
						}
					}
				}
			}
			return result;
		}

		public KeyValuePair<EGAHTTPApiResponse, JSONObject> RequestInitReturningDict()
		{
			string gameKey = GAState.GameKey;
			string text = string.Concat(new string[]
			{
				GAHTTPApi.baseUrl,
				"/",
				gameKey,
				"/",
				GAHTTPApi.initializeUrlPath
			});
			text = "https://rubick.gameanalytics.com/v2/command_center?game_key=" + gameKey + "&interval_seconds=1000000";
			GALogger.D("Sending 'init' URL: " + text);
			string text2 = GAState.GetInitAnnotations().ToString();
			JSONObject value;
			if (string.IsNullOrEmpty(text2))
			{
				EGAHTTPApiResponse arg_6E_0 = EGAHTTPApiResponse.JsonEncodeFailed;
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_6E_0, value);
			}
			string text3 = "";
			HttpStatusCode responseCode = (HttpStatusCode)0;
			string responseMessage = "";
			string text4 = "";
			try
			{
				byte[] array = this.CreatePayloadData(text2, false);
				HttpWebRequest httpWebRequest = this.CreateRequest(text, array, false);
				text4 = httpWebRequest.Headers[HttpRequestHeader.Authorization];
				using (Stream requestStream = httpWebRequest.GetRequestStream())
				{
					requestStream.Write(array, 0, array.Length);
				}
				using (HttpWebResponse httpWebResponse = httpWebRequest.GetResponse() as HttpWebResponse)
				{
					using (Stream responseStream = httpWebResponse.GetResponseStream())
					{
						using (StreamReader streamReader = new StreamReader(responseStream))
						{
							string arg_110_0 = streamReader.ReadToEnd();
							responseCode = httpWebResponse.StatusCode;
							responseMessage = httpWebResponse.StatusDescription;
							text3 = arg_110_0;
						}
					}
				}
			}
			catch (WebException ex)
			{
				if (ex.Response != null)
				{
					using (HttpWebResponse httpWebResponse2 = (HttpWebResponse)ex.Response)
					{
						using (Stream responseStream2 = httpWebResponse2.GetResponseStream())
						{
							using (StreamReader streamReader2 = new StreamReader(responseStream2))
							{
								string arg_182_0 = streamReader2.ReadToEnd();
								responseCode = httpWebResponse2.StatusCode;
								responseMessage = httpWebResponse2.StatusDescription;
								text3 = arg_182_0;
							}
						}
					}
				}
			}
			catch (Exception arg_1B0_0)
			{
				GALogger.E(arg_1B0_0.ToString());
			}
			GALogger.D("init request content : " + text3);
			JSONNode jSONNode = JSON.Parse(text3);
			EGAHTTPApiResponse eGAHTTPApiResponse = this.ProcessRequestResponse(responseCode, responseMessage, text3, "Init");
			if (eGAHTTPApiResponse != EGAHTTPApiResponse.Ok && eGAHTTPApiResponse != EGAHTTPApiResponse.BadRequest)
			{
				GALogger.D(string.Concat(new string[]
				{
					"Failed Init Call. URL: ",
					text,
					", Authorization: ",
					text4,
					", JSONString: ",
					text2
				}));
				EGAHTTPApiResponse arg_22E_0 = eGAHTTPApiResponse;
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_22E_0, value);
			}
			if (jSONNode == null)
			{
				GALogger.D("Failed Init Call. Json decoding failed");
				EGAHTTPApiResponse arg_24C_0 = EGAHTTPApiResponse.JsonDecodeFailed;
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_24C_0, value);
			}
			if (eGAHTTPApiResponse == EGAHTTPApiResponse.BadRequest)
			{
				GALogger.D("Failed Init Call. Bad request. Response: " + jSONNode.ToString());
				EGAHTTPApiResponse arg_272_0 = eGAHTTPApiResponse;
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_272_0, value);
			}
			JSONObject jSONObject = GAValidator.ValidateAndCleanInitRequestResponse(jSONNode);
			if (jSONObject == null)
			{
				EGAHTTPApiResponse arg_28F_0 = EGAHTTPApiResponse.BadResponse;
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_28F_0, value);
			}
			EGAHTTPApiResponse arg_29B_0 = EGAHTTPApiResponse.Ok;
			value = jSONObject;
			return new KeyValuePair<EGAHTTPApiResponse, JSONObject>(arg_29B_0, value);
		}

		public KeyValuePair<EGAHTTPApiResponse, JSONNode> SendEventsInArray(List<JSONNode> eventArray)
		{
			if (eventArray.Count == 0)
			{
				GALogger.D("sendEventsInArray called with missing eventArray");
			}
			string gameKey = GAState.GameKey;
			string text = string.Concat(new string[]
			{
				GAHTTPApi.baseUrl,
				"/",
				gameKey,
				"/",
				GAHTTPApi.eventsUrlPath
			});
			GALogger.D("Sending 'events' URL: " + text);
			string text2 = GAUtilities.ArrayOfObjectsToJsonString(eventArray);
			JSONNode value;
			if (text2.Length == 0)
			{
				GALogger.D("sendEventsInArray JSON encoding failed of eventArray");
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONNode>(EGAHTTPApiResponse.JsonEncodeFailed, value);
			}
			string text3 = "";
			HttpStatusCode responseCode = (HttpStatusCode)0;
			string responseMessage = "";
			string text4 = "";
			try
			{
				byte[] array = this.CreatePayloadData(text2, this.useGzip);
				HttpWebRequest httpWebRequest = this.CreateRequest(text, array, this.useGzip);
				text4 = httpWebRequest.Headers[HttpRequestHeader.Authorization];
				using (Stream requestStream = httpWebRequest.GetRequestStream())
				{
					requestStream.Write(array, 0, array.Length);
				}
				using (HttpWebResponse httpWebResponse = httpWebRequest.GetResponse() as HttpWebResponse)
				{
					using (Stream responseStream = httpWebResponse.GetResponseStream())
					{
						using (StreamReader streamReader = new StreamReader(responseStream))
						{
							string arg_121_0 = streamReader.ReadToEnd();
							responseCode = httpWebResponse.StatusCode;
							responseMessage = httpWebResponse.StatusDescription;
							text3 = arg_121_0;
						}
					}
				}
			}
			catch (WebException ex)
			{
				if (ex.Response != null)
				{
					using (HttpWebResponse httpWebResponse2 = (HttpWebResponse)ex.Response)
					{
						using (Stream responseStream2 = httpWebResponse2.GetResponseStream())
						{
							using (StreamReader streamReader2 = new StreamReader(responseStream2))
							{
								string arg_193_0 = streamReader2.ReadToEnd();
								responseCode = httpWebResponse2.StatusCode;
								responseMessage = httpWebResponse2.StatusDescription;
								text3 = arg_193_0;
							}
						}
					}
				}
			}
			catch (Exception arg_1C1_0)
			{
				GALogger.E(arg_1C1_0.ToString());
			}
			GALogger.D("events request content: " + text3);
			EGAHTTPApiResponse eGAHTTPApiResponse = this.ProcessRequestResponse(responseCode, responseMessage, text3, "Events");
			if (eGAHTTPApiResponse != EGAHTTPApiResponse.Ok && eGAHTTPApiResponse != EGAHTTPApiResponse.BadRequest)
			{
				GALogger.D(string.Concat(new string[]
				{
					"Failed events Call. URL: ",
					text,
					", Authorization: ",
					text4,
					", JSONString: ",
					text2
				}));
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONNode>(eGAHTTPApiResponse, value);
			}
			JSONNode jSONNode = JSON.Parse(text3);
			if (jSONNode == null)
			{
				value = null;
				return new KeyValuePair<EGAHTTPApiResponse, JSONNode>(EGAHTTPApiResponse.JsonDecodeFailed, value);
			}
			if (eGAHTTPApiResponse == EGAHTTPApiResponse.BadRequest)
			{
				GALogger.D("Failed Events Call. Bad request. Response: " + jSONNode.ToString());
			}
			value = jSONNode;
			return new KeyValuePair<EGAHTTPApiResponse, JSONNode>(eGAHTTPApiResponse, value);
		}

		public void SendSdkErrorEvent(EGASdkErrorType type)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			string gameKey = GAState.GameKey;
			string gameSecret = GAState.GameSecret;
			if (!GAValidator.ValidateSdkErrorEvent(gameKey, gameSecret, type))
			{
				return;
			}
			string text = string.Concat(new string[]
			{
				GAHTTPApi.baseUrl,
				"/",
				gameKey,
				"/",
				GAHTTPApi.eventsUrlPath
			});
			GALogger.D("Sending 'events' URL: " + text);
			JSONObject sdkErrorEventAnnotations = GAState.GetSdkErrorEventAnnotations();
			string s = GAHTTPApi.SdkErrorTypeToString(type);
			sdkErrorEventAnnotations.Add("type", s);
			string text2 = GAUtilities.ArrayOfObjectsToJsonString(new List<JSONNode>
			{
				sdkErrorEventAnnotations
			});
			if (string.IsNullOrEmpty(text2))
			{
				GALogger.W("sendSdkErrorEvent: JSON encoding failed.");
				return;
			}
			GALogger.D("sendSdkErrorEvent json: " + text2);
			byte[] bytes = Encoding.UTF8.GetBytes(text2);
			new SdkErrorTask(type, bytes, gameSecret).Execute(text);
		}

		private byte[] CreatePayloadData(string payload, bool gzip)
		{
			byte[] array;
			if (gzip)
			{
				array = GAUtilities.GzipCompress(payload);
				GALogger.D(string.Concat(new object[]
				{
					"Gzip stats. Size: ",
					Encoding.UTF8.GetBytes(payload).Length,
					", Compressed: ",
					array.Length,
					", Content: ",
					payload
				}));
			}
			else
			{
				array = Encoding.UTF8.GetBytes(payload);
			}
			return array;
		}

		private static string SdkErrorTypeToString(EGASdkErrorType value)
		{
			if (value == EGASdkErrorType.Rejected)
			{
				return "rejected";
			}
			return "";
		}

		private HttpWebRequest CreateRequest(string url, byte[] payloadData, bool gzip)
		{
			HttpWebRequest httpWebRequest = WebRequest.Create(url) as HttpWebRequest;
			httpWebRequest.Method = "POST";
			httpWebRequest.ContentLength = (long)payloadData.Length;
			if (gzip)
			{
				httpWebRequest.Headers[HttpRequestHeader.ContentEncoding] = "gzip";
			}
			string gameSecret = GAState.GameSecret;
			httpWebRequest.Headers[HttpRequestHeader.Authorization] = GAUtilities.HmacWithKey(gameSecret, payloadData);
			httpWebRequest.ContentType = "application/json";
			return httpWebRequest;
		}

		private EGAHTTPApiResponse ProcessRequestResponse(HttpStatusCode responseCode, string responseMessage, string body, string requestId)
		{
			if (string.IsNullOrEmpty(body))
			{
				GALogger.D(string.Concat(new object[]
				{
					requestId,
					" request. failed. Might be no connection. Description: ",
					responseMessage,
					", Status code: ",
					responseCode
				}));
				return EGAHTTPApiResponse.NoResponse;
			}
			if (responseCode == HttpStatusCode.OK)
			{
				return EGAHTTPApiResponse.Ok;
			}
			if (responseCode == (HttpStatusCode)0 || responseCode == HttpStatusCode.Unauthorized)
			{
				GALogger.D(requestId + " request. 401 - Unauthorized.");
				return EGAHTTPApiResponse.Unauthorized;
			}
			if (responseCode == HttpStatusCode.BadRequest)
			{
				GALogger.D(requestId + " request. 400 - Bad Request.");
				return EGAHTTPApiResponse.BadRequest;
			}
			if (responseCode == HttpStatusCode.InternalServerError)
			{
				GALogger.D(requestId + " request. 500 - Internal Server Error.");
				return EGAHTTPApiResponse.InternalServerError;
			}
			return EGAHTTPApiResponse.UnknownResponseCode;
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Http;
using GameAnalyticsSDK.Net.Logging;
using GameAnalyticsSDK.Net.State;
using GameAnalyticsSDK.Net.Store;
using GameAnalyticsSDK.Net.Threading;
using GameAnalyticsSDK.Net.Utilities;
using GameAnalyticsSDK.Net.Validators;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace GameAnalyticsSDK.Net.Events
{
	internal class GAEvents
	{
		private static readonly GAEvents _instance = new GAEvents();

		private const string CategorySessionStart = "user";

		private const string CategorySessionEnd = "session_end";

		private const string CategoryDesign = "design";

		private const string CategoryBusiness = "business";

		private const string CategoryProgression = "progression";

		private const string CategoryResource = "resource";

		private const string CategoryError = "error";

		private bool isRunning;

		private bool keepRunning;

		private const double ProcessEventsIntervalInSeconds = 8.0;

		private const int MaxEventCount = 500;

		private static GAEvents Instance
		{
			get
			{
				return GAEvents._instance;
			}
		}

		private GAEvents()
		{
		}

		public static void StopEventQueue()
		{
			GAEvents.Instance.keepRunning = false;
		}

		public static void EnsureEventQueueIsRunning()
		{
			GAEvents.Instance.keepRunning = true;
			if (!GAEvents.Instance.isRunning)
			{
				GAEvents.Instance.isRunning = true;
				GAThreading.ScheduleTimer(8.0, "processEventQueue", new Action(GAEvents.ProcessEventQueue));
			}
		}

		public static void AddSessionStartEvent()
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			string text = "user";
			JSONObject expr_13 = new JSONObject();
			expr_13["category"] = text;
			GAState.IncrementSessionNum();
			GAStore.SetState("session_num", GAState.SessionNum.ToString(CultureInfo.InvariantCulture));
			GAEvents.AddDimensionsToEvent(expr_13);
			GAEvents.AddEventToStore(expr_13);
			GALogger.I("Add SESSION START event");
			GAEvents.ProcessEvents(text, false);
		}

		public static void AddSessionEndEvent()
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			long sessionStart = GAState.SessionStart;
			long num = GAState.GetClientTsAdjusted() - sessionStart;
			if (num < 0L)
			{
				GALogger.W("Session length was calculated to be less then 0. Should not be possible. Resetting to 0.");
				num = 0L;
			}
			JSONObject expr_2D = new JSONObject();
			expr_2D["category"] = "session_end";
			expr_2D.Add("length", new JSONNumber((double)num));
			GAEvents.AddDimensionsToEvent(expr_2D);
			GAEvents.AddEventToStore(expr_2D);
			GALogger.I("Add SESSION END event.");
			GAEvents.ProcessEvents("", false);
		}

		public static void AddBusinessEvent(string currency, int amount, string itemType, string itemId, string cartType, IDictionary<string, object> fields)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			if (!GAValidator.ValidateBusinessEvent(currency, (long)amount, cartType, itemType, itemId))
			{
				return;
			}
			JSONObject jSONObject = new JSONObject();
			GAState.IncrementTransactionNum();
			GAStore.SetState("transaction_num", GAState.TransactionNum.ToString(CultureInfo.InvariantCulture));
			jSONObject["event_id"] = itemType + ":" + itemId;
			jSONObject["category"] = "business";
			jSONObject["currency"] = currency;
			jSONObject.Add("amount", new JSONNumber((double)amount));
			jSONObject.Add("transaction_num", new JSONNumber((double)GAState.TransactionNum));
			if (!string.IsNullOrEmpty(cartType))
			{
				jSONObject.Add("cart_type", cartType);
			}
			GAEvents.AddDimensionsToEvent(jSONObject);
			GAEvents.AddFieldsToEvent(jSONObject, GAState.ValidateAndCleanCustomFields(fields));
			GALogger.I(string.Concat(new object[]
			{
				"Add BUSINESS event: {currency:",
				currency,
				", amount:",
				amount,
				", itemType:",
				itemType,
				", itemId:",
				itemId,
				", cartType:",
				cartType,
				"}"
			}));
			GAEvents.AddEventToStore(jSONObject);
		}

		public static void AddResourceEvent(EGAResourceFlowType flowType, string currency, double amount, string itemType, string itemId, IDictionary<string, object> fields)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			if (!GAValidator.ValidateResourceEvent(flowType, currency, (long)amount, itemType, itemId))
			{
				return;
			}
			if (flowType == EGAResourceFlowType.Sink)
			{
				amount *= -1.0;
			}
			JSONObject jSONObject = new JSONObject();
			string text = GAEvents.ResourceFlowTypeToString(flowType);
			jSONObject["event_id"] = string.Concat(new string[]
			{
				text,
				":",
				currency,
				":",
				itemType,
				":",
				itemId
			});
			jSONObject["category"] = "resource";
			jSONObject.Add("amount", new JSONNumber(amount));
			GAEvents.AddDimensionsToEvent(jSONObject);
			GAEvents.AddFieldsToEvent(jSONObject, GAState.ValidateAndCleanCustomFields(fields));
			GALogger.I(string.Concat(new object[]
			{
				"Add RESOURCE event: {currency:",
				currency,
				", amount:",
				amount,
				", itemType:",
				itemType,
				", itemId:",
				itemId,
				"}"
			}));
			GAEvents.AddEventToStore(jSONObject);
		}

		public static void AddProgressionEvent(EGAProgressionStatus progressionStatus, string progression01, string progression02, string progression03, double score, bool sendScore, IDictionary<string, object> fields)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			string text = GAEvents.ProgressionStatusToString(progressionStatus);
			if (!GAValidator.ValidateProgressionEvent(progressionStatus, progression01, progression02, progression03))
			{
				return;
			}
			JSONObject jSONObject = new JSONObject();
			string text2;
			if (string.IsNullOrEmpty(progression02))
			{
				text2 = progression01;
			}
			else if (string.IsNullOrEmpty(progression03))
			{
				text2 = progression01 + ":" + progression02;
			}
			else
			{
				text2 = string.Concat(new string[]
				{
					progression01,
					":",
					progression02,
					":",
					progression03
				});
			}
			jSONObject["category"] = "progression";
			jSONObject["event_id"] = text + ":" + text2;
			double num = 0.0;
			if (sendScore && progressionStatus != EGAProgressionStatus.Start)
			{
				jSONObject.Add("score", new JSONNumber(score));
			}
			if (progressionStatus == EGAProgressionStatus.Fail)
			{
				GAState.IncrementProgressionTries(text2);
			}
			if (progressionStatus == EGAProgressionStatus.Complete)
			{
				GAState.IncrementProgressionTries(text2);
				num = (double)GAState.GetProgressionTries(text2);
				jSONObject.Add("attempt_num", new JSONNumber(num));
				GAState.ClearProgressionTries(text2);
			}
			GAEvents.AddDimensionsToEvent(jSONObject);
			GAEvents.AddFieldsToEvent(jSONObject, GAState.ValidateAndCleanCustomFields(fields));
			GALogger.I(string.Concat(new object[]
			{
				"Add PROGRESSION event: {status:",
				text,
				", progression01:",
				progression01,
				", progression02:",
				progression02,
				", progression03:",
				progression03,
				", score:",
				score,
				", attempt:",
				num,
				"}"
			}));
			GAEvents.AddEventToStore(jSONObject);
		}

		public static void AddDesignEvent(string eventId, double value, bool sendValue, IDictionary<string, object> fields)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			if (!GAValidator.ValidateDesignEvent(eventId, value))
			{
				return;
			}
			JSONObject jSONObject = new JSONObject();
			jSONObject["category"] = "design";
			jSONObject["event_id"] = eventId;
			if (sendValue)
			{
				jSONObject.Add("value", new JSONNumber(value));
			}
			GAEvents.AddDimensionsToEvent(jSONObject);
			GAEvents.AddFieldsToEvent(jSONObject, GAState.ValidateAndCleanCustomFields(fields));
			GALogger.I(string.Concat(new object[]
			{
				"Add DESIGN event: {eventId:",
				eventId,
				", value:",
				value,
				"}"
			}));
			GAEvents.AddEventToStore(jSONObject);
		}

		public static void AddErrorEvent(EGAErrorSeverity severity, string message, IDictionary<string, object> fields)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			string text = GAEvents.ErrorSeverityToString(severity);
			if (!GAValidator.ValidateErrorEvent(severity, message))
			{
				return;
			}
			JSONObject jSONObject = new JSONObject();
			jSONObject["category"] = "error";
			jSONObject["severity"] = text;
			jSONObject["message"] = message;
			GAEvents.AddDimensionsToEvent(jSONObject);
			GAEvents.AddFieldsToEvent(jSONObject, GAState.ValidateAndCleanCustomFields(fields));
			GALogger.I(string.Concat(new string[]
			{
				"Add ERROR event: {severity:",
				text,
				", message:",
				message,
				"}"
			}));
			GAEvents.AddEventToStore(jSONObject);
		}

		private static void ProcessEventQueue()
		{
			GAEvents.ProcessEvents("", true);
			if (GAEvents.Instance.keepRunning)
			{
				GAThreading.ScheduleTimer(8.0, "processEventQueue", new Action(GAEvents.ProcessEventQueue));
				return;
			}
			GAEvents.Instance.isRunning = false;
		}

		private static void ProcessEvents(string category, bool performCleanUp)
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			try
			{
				string text = Guid.NewGuid().ToString();
				string deleteSql = "DELETE FROM ga_events WHERE status = '" + text + "'";
				string putbackSql = "UPDATE ga_events SET status = 'new' WHERE status = '" + text + "';";
				if (performCleanUp)
				{
					GAEvents.CleanupEvents();
					GAEvents.FixMissingSessionEndEvents();
				}
				string text2 = "";
				if (!string.IsNullOrEmpty(category))
				{
					text2 = " AND category='" + category + "' ";
				}
				string sql = "SELECT event FROM ga_events WHERE status = 'new' " + text2 + ";";
				string sql2 = string.Concat(new string[]
				{
					"UPDATE ga_events SET status = '",
					text,
					"' WHERE status = 'new' ",
					text2,
					";"
				});
				JSONArray jSONArray = GAStore.ExecuteQuerySync(sql);
				if (jSONArray == null || jSONArray.Count == 0)
				{
					GALogger.I("Event queue: No events to send");
					GAEvents.UpdateSessionTime();
				}
				else
				{
					if (jSONArray.Count > 500)
					{
						sql = string.Concat(new object[]
						{
							"SELECT client_ts FROM ga_events WHERE status = 'new' ",
							text2,
							" ORDER BY client_ts ASC LIMIT 0,",
							500,
							";"
						});
						jSONArray = GAStore.ExecuteQuerySync(sql);
						if (jSONArray == null)
						{
							return;
						}
						string value = jSONArray[jSONArray.Count - 1]["client_ts"].Value;
						sql = string.Concat(new string[]
						{
							"SELECT event FROM ga_events WHERE status = 'new' ",
							text2,
							" AND client_ts<='",
							value,
							"';"
						});
						jSONArray = GAStore.ExecuteQuerySync(sql);
						if (jSONArray == null)
						{
							return;
						}
						sql2 = string.Concat(new string[]
						{
							"UPDATE ga_events SET status='",
							text,
							"' WHERE status='new' ",
							text2,
							" AND client_ts<='",
							value,
							"';"
						});
					}
					GALogger.I("Event queue: Sending " + jSONArray.Count + " events.");
					if (!(GAStore.ExecuteQuerySync(sql2) == null))
					{
						List<JSONNode> list = new List<JSONNode>();
						for (int i = 0; i < jSONArray.Count; i++)
						{
							JSONNode jSONNode = jSONArray[i];
							JSONNode jSONNode2 = null;
							try
							{
								jSONNode2 = JSONNode.LoadFromBinaryBase64(jSONNode["event"].Value);
							}
							catch (Exception)
							{
							}
							if (jSONNode2 != null && jSONNode2.Count != 0)
							{
								list.Add(jSONNode2);
							}
						}
						KeyValuePair<EGAHTTPApiResponse, JSONNode> keyValuePair = GAHTTPApi.Instance.SendEventsInArray(list);
						GAEvents.ProcessEvents(keyValuePair.Key, keyValuePair.Value, putbackSql, deleteSql, list.Count);
					}
				}
			}
			catch (Exception arg)
			{
				GALogger.E("Error during ProcessEvents(): " + arg);
			}
		}

		public static void ProcessEvents(EGAHTTPApiResponse responseEnum, JSONNode dataDict, string putbackSql, string deleteSql, int eventCount)
		{
			if (responseEnum == EGAHTTPApiResponse.Ok)
			{
				GAStore.ExecuteQuerySync(deleteSql);
				GALogger.I("Event queue: " + eventCount + " events sent.");
				return;
			}
			if (responseEnum == EGAHTTPApiResponse.NoResponse)
			{
				GALogger.W("Event queue: Failed to send events to collector - Retrying next time");
				GAStore.ExecuteQuerySync(putbackSql);
				return;
			}
			if (dataDict != null)
			{
				JSONNode jSONNode = null;
				IEnumerator<JSONNode> enumerator = dataDict.Children.GetEnumerator();
				if (enumerator.MoveNext())
				{
					jSONNode = enumerator.Current;
				}
				if (responseEnum == EGAHTTPApiResponse.BadRequest && jSONNode is JSONArray)
				{
					GALogger.W(string.Concat(new object[]
					{
						"Event queue: ",
						eventCount,
						" events sent. ",
						dataDict.Count,
						" events failed GA server validation."
					}));
				}
				else
				{
					GALogger.W("Event queue: Failed to send events.");
				}
			}
			else
			{
				GALogger.W("Event queue: Failed to send events.");
			}
			GAStore.ExecuteQuerySync(deleteSql);
		}

		private static void CleanupEvents()
		{
			GAStore.ExecuteQuerySync("UPDATE ga_events SET status = 'new';");
		}

		private static void FixMissingSessionEndEvents()
		{
			if (!GAState.IsEventSubmissionEnabled)
			{
				return;
			}
			JSONArray jSONArray = GAStore.ExecuteQuerySync("SELECT timestamp, event FROM ga_session WHERE session_id != $session_id;", new Dictionary<string, object>
			{
				{
					"$session_id",
					GAState.SessionId
				}
			});
			if (jSONArray == null || jSONArray.Count == 0)
			{
				return;
			}
			GALogger.I(jSONArray.Count + " session(s) located with missing session_end event.");
			for (int i = 0; i < jSONArray.Count; i++)
			{
				JSONNode jSONNode = jSONArray[i];
				JSONNode jSONNode2 = null;
				try
				{
					jSONNode2 = JSONNode.LoadFromBinaryBase64(jSONNode["event"].Value);
				}
				catch (Exception)
				{
				}
				if (jSONNode2 != null)
				{
					long arg_B6_0 = jSONNode2["client_ts"].AsLong;
					long asLong = jSONNode["timestamp"].AsLong;
					long num = arg_B6_0 - asLong;
					num = Math.Max(0L, num);
					GALogger.D("fixMissingSessionEndEvents length calculated: " + num);
					jSONNode2["category"] = "session_end";
					jSONNode2.Add("length", new JSONNumber((double)num));
					GAEvents.AddEventToStore(jSONNode2.AsObject);
				}
				else
				{
					GALogger.I("Problem decoding session_end event. Skipping  this session_end event.");
				}
			}
		}

		private static void AddEventToStore(JSONObject eventData)
		{
			if (!GAStore.IsTableReady)
			{
				GALogger.W("Could not add event: SDK datastore error");
				return;
			}
			if (!GAState.Initialized)
			{
				GALogger.W("Could not add event: SDK is not initialized");
				return;
			}
			try
			{
				if (GAStore.IsDbTooLargeForEvents && !GAUtilities.StringMatch(eventData["category"].Value, "^(user|session_end|business)$"))
				{
					GALogger.W("Database too large. Event has been blocked.");
				}
				else
				{
					JSONObject eventAnnotations = GAState.GetEventAnnotations();
					string value = eventAnnotations.SaveToBinaryBase64();
					JSONNode.Enumerator enumerator = eventData.GetEnumerator();
					while (enumerator.MoveNext())
					{
						KeyValuePair<string, JSONNode> current = enumerator.Current;
						eventAnnotations.Add(current.Key, current.Value);
					}
					string str = eventAnnotations.ToString();
					GALogger.II("Event added to queue: " + str);
					Dictionary<string, object> dictionary = new Dictionary<string, object>();
					dictionary.Add("$status", "new");
					dictionary.Add("$category", eventAnnotations["category"].Value);
					dictionary.Add("$session_id", eventAnnotations["session_id"].Value);
					dictionary.Add("$client_ts", eventAnnotations["client_ts"].Value);
					dictionary.Add("$event", eventAnnotations.SaveToBinaryBase64());
					GAStore.ExecuteQuerySync("INSERT INTO ga_events (status, category, session_id, client_ts, event) VALUES($status, $category, $session_id, $client_ts, $event);", dictionary);
					if (eventData["category"].Value.Equals("session_end"))
					{
						dictionary.Clear();
						dictionary.Add("$session_id", eventAnnotations["session_id"].Value);
						GAStore.ExecuteQuerySync("DELETE FROM ga_session WHERE session_id = $session_id;", dictionary);
					}
					else
					{
						string arg_1C2_0 = "INSERT OR REPLACE INTO ga_session(session_id, timestamp, event) VALUES($session_id, $timestamp, $event);";
						dictionary.Clear();
						dictionary.Add("$session_id", eventAnnotations["session_id"].Value);
						dictionary.Add("$timestamp", GAState.SessionStart);
						dictionary.Add("$event", value);
						GAStore.ExecuteQuerySync(arg_1C2_0, dictionary);
					}
				}
			}
			catch (Exception arg_1D4_0)
			{
				GALogger.E("addEventToStoreWithEventData: error using json");
				GALogger.E(arg_1D4_0.ToString());
			}
		}

		private static void AddDimensionsToEvent(JSONObject eventData)
		{
			if (eventData == null)
			{
				return;
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension01))
			{
				eventData["custom_01"] = GAState.CurrentCustomDimension01;
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension02))
			{
				eventData["custom_02"] = GAState.CurrentCustomDimension02;
			}
			if (!string.IsNullOrEmpty(GAState.CurrentCustomDimension03))
			{
				eventData["custom_03"] = GAState.CurrentCustomDimension03;
			}
		}

		private static void AddFieldsToEvent(JSONObject eventData, JSONObject fields)
		{
			if (eventData == null)
			{
				return;
			}
			if (fields != null && fields.Count > 0)
			{
				eventData["custom_fields"] = fields;
			}
		}

		private static string ResourceFlowTypeToString(EGAResourceFlowType value)
		{
			if (value == EGAResourceFlowType.Source)
			{
				return "Source";
			}
			if (value != EGAResourceFlowType.Sink)
			{
				return "";
			}
			return "Sink";
		}

		private static string ProgressionStatusToString(EGAProgressionStatus value)
		{
			switch (value)
			{
			case EGAProgressionStatus.Start:
				return "Start";
			case EGAProgressionStatus.Complete:
				return "Complete";
			case EGAProgressionStatus.Fail:
				return "Fail";
			default:
				return "";
			}
		}

		private static void UpdateSessionTime()
		{
			if (GAState.SessionIsStarted())
			{
				JSONObject eventAnnotations = GAState.GetEventAnnotations();
				string value = eventAnnotations.SaveToBinaryBase64();
				GAStore.ExecuteQuerySync("INSERT OR REPLACE INTO ga_session(session_id, timestamp, event) VALUES($session_id, $timestamp, $event);", new Dictionary<string, object>
				{
					{
						"$session_id",
						eventAnnotations["session_id"].Value
					},
					{
						"$timestamp",
						GAState.SessionStart
					},
					{
						"$event",
						value
					}
				});
			}
		}

		private static string ErrorSeverityToString(EGAErrorSeverity value)
		{
			switch (value)
			{
			case EGAErrorSeverity.Debug:
				return "debug";
			case EGAErrorSeverity.Info:
				return "info";
			case EGAErrorSeverity.Warning:
				return "warning";
			case EGAErrorSeverity.Error:
				return "error";
			case EGAErrorSeverity.Critical:
				return "critical";
			default:
				return "";
			}
		}
	}
}

// Decompile from assembly: GameAnalytics.dll

using GameAnalyticsSDK.Net.Logging;
using System;
using System.IO;
using System.Text.RegularExpressions;
using UnityEngine;

namespace GameAnalyticsSDK.Net.Device
{
	internal static class GADevice
	{
		private const string _sdkWrapperVersion = "mono 2.1.7";

		private static readonly string _buildPlatform = GADevice.UnityRuntimePlatformToString(Application.platform);

		private static readonly string _deviceModel = SystemInfo.deviceType.ToString().ToLowerInvariant();

		private static string _writablepath = GADevice.GetPersistentPath();

		private static readonly string _osVersion = GADevice.GetOSVersionString();

		private static readonly string _deviceManufacturer = "unknown";

		public static string SdkGameEngineVersion
		{
			private get;
			set;
		}

		public static string GameEngineVersion
		{
			get;
			set;
		}

		public static string ConnectionType
		{
			get;
			set;
		}

		public static string RelevantSdkVersion
		{
			get
			{
				if (!string.IsNullOrEmpty(GADevice.SdkGameEngineVersion))
				{
					return GADevice.SdkGameEngineVersion;
				}
				return "mono 2.1.7";
			}
		}

		public static string BuildPlatform
		{
			get
			{
				return GADevice._buildPlatform;
			}
		}

		public static string OSVersion
		{
			get
			{
				return GADevice._osVersion;
			}
		}

		public static string DeviceModel
		{
			get
			{
				return GADevice._deviceModel;
			}
		}

		public static string DeviceManufacturer
		{
			get
			{
				return GADevice._deviceManufacturer;
			}
		}

		public static string WritablePath
		{
			get
			{
				return GADevice._writablepath;
			}
		}

		public static void Touch()
		{
		}

		public static void UpdateConnectionType()
		{
			NetworkReachability internetReachability = Application.internetReachability;
			if (internetReachability == NetworkReachability.ReachableViaCarrierDataNetwork)
			{
				GADevice.ConnectionType = "wwan";
				return;
			}
			if (internetReachability != NetworkReachability.ReachableViaLocalAreaNetwork)
			{
				GADevice.ConnectionType = "offline";
				return;
			}
			GADevice.ConnectionType = "lan";
		}

		private static string GetOSVersionString()
		{
			string operatingSystem = SystemInfo.operatingSystem;
			GALogger.D("GetOSVersionString: " + operatingSystem);
			Match match = Regex.Match(operatingSystem, "Windows.*?\\((\\d{0,5}\\.\\d{0,5}\\.(\\d{0,5}))\\)");
			if (match.Success)
			{
				string str = match.Groups[1].Value;
				string value = match.Groups[2].Value;
				int num = 0;
				int.TryParse(value, out num);
				if (num > 10000)
				{
					str = "10.0." + value;
				}
				return "windows " + str;
			}
			match = Regex.Match(operatingSystem, "Mac OS X (\\d{0,5}\\.\\d{0,5}\\.\\d{0,5})");
			if (match.Success)
			{
				return "mac_osx " + match.Captures[0].Value.Replace("Mac OS X ", "");
			}
			match = Regex.Match(operatingSystem, "Mac OS X (\\d{0,5}_\\d{0,5}_\\d{0,5})");
			if (match.Success)
			{
				return "mac_osx " + match.Captures[0].Value.Replace("Mac OS X ", "").Replace("_", ".");
			}
			return GADevice.UnityRuntimePlatformToString(Application.platform) + " 0.0.0";
		}

		private static string GetPersistentPath()
		{
			string text = string.Concat(new string[]
			{
				Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
				Path.DirectorySeparatorChar.ToString(),
				"GameAnalytics",
				Path.DirectorySeparatorChar.ToString(),
				AppDomain.CurrentDomain.FriendlyName
			});
			if (!Directory.Exists(text))
			{
				Directory.CreateDirectory(text);
			}
			return text;
		}

		private static string UnityRuntimePlatformToString(RuntimePlatform platform)
		{
			switch (platform)
			{
			case RuntimePlatform.OSXPlayer:
			case RuntimePlatform.OSXDashboardPlayer:
				return "mac_osx";
			case RuntimePlatform.WindowsPlayer:
				return "windows";
			case RuntimePlatform.PS3:
				return "ps3";
			case RuntimePlatform.XBOX360:
				return "xbox360";
			case RuntimePlatform.LinuxPlayer:
				return "linux";
			case RuntimePlatform.WebGLPlayer:
				return "webgl";
			case RuntimePlatform.MetroPlayerX86:
			case RuntimePlatform.MetroPlayerX64:
			case RuntimePlatform.MetroPlayerARM:
				switch (SystemInfo.deviceType)
				{
				case DeviceType.Handheld:
					return "uwp_mobile";
				case DeviceType.Console:
					return "uwp_console";
				case DeviceType.Desktop:
					return "uwp_desktop";
				default:
					return "uwp_desktop";
				}
				break;
			case RuntimePlatform.WP8Player:
				return "windows_phone";
			case RuntimePlatform.TizenPlayer:
				return "tizen";
			case RuntimePlatform.PSP2:
				return "vita";
			case RuntimePlatform.PS4:
				return "ps4";
			case RuntimePlatform.PSM:
				return "psm";
			case RuntimePlatform.XboxOne:
				return "xboxone";
			case RuntimePlatform.SamsungTVPlayer:
				return "samsung_tv";
			case RuntimePlatform.WiiU:
				return "wiiu";
			}
			return "unknown";
		}
	}
}

